using System;
using System.Web;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common;
using IUDICO.DataModel.Common.ImportUtils;
using IUDICO.DataModel.Common.TestRequestUtils;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.ImportManagers;
using LEX.CONTROLS;
using LEX.CONTROLS.Expressions;

namespace IUDICO.DataModel.Controllers.Student
{
    public class OpenTestController : ControllerBase
    {
        [ControllerParameter] public int OpenThema;

        [ControllerParameter] public int PageIndex;
        
        [ControllerParameter] public int CurriculumnId;

        [ControllerParameter] public int StageId;

        [ControllerParameter] public string PagesIds;


        private string[] _pages;


        public readonly IVariable<string> Description = string.Empty.AsVariable();

        public readonly IVariable<string> ThemaName = string.Empty.AsVariable();

        public readonly IVariable<string> PageCount = string.Empty.AsVariable();

        #region Page Controls

        private HtmlControl _iframe;

        public HttpResponse Response { private get; set; }

        public ContentPlaceHolder PageContent { private get; set; }

        public CheckBox ShowResult { private get; set; }

        public Button NextButton { private get; set; }

        public Button PreviousButton { private get; set; }

        #endregion


        public void NextPage()
        {
            RedirectToController(new OpenTestController
                                     {
                                         BackUrl = string.Empty,
                                         OpenThema = OpenThema,
                                         PageIndex = ++PageIndex,
                                         PagesIds = PagesIds
                                     });
        }

        public void PreviousPage()
        {
            RedirectToController(new OpenTestController
                                     {
                                         BackUrl = string.Empty,
                                         OpenThema = OpenThema,
                                         PageIndex = --PageIndex,
                                         PagesIds = PagesIds
                                     });
        }

        public void PageLoad(object sender, EventArgs e)
        {
            if (OpenThema == 0)
                throw new Exception("Wrong request (Thema ID dont specified)");

            LoadIFrame();

            SetPages(ServerModel.DB.Load<TblThemes>(OpenThema));

            ShowCurrentTestPage();

        }

        private void ShowCurrentTestPage()
        {
            CorrectWrongIndex();

            CheckButtonState();

            var currentPage = ServerModel.DB.Load<TblPages>(int.Parse(_pages[PageIndex]));

            SetDescription(currentPage);
            _iframe.Attributes["src"] = CreateRequestForPage(currentPage);
        }

        private void SetDescription(TblPages p)
        {
            Description.Value = string.Format("You open {0}({1}) page", p.PageName, (FX_PAGETYPE) p.PageTypeRef);

            PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, _pages.Length);
        }

        private void CorrectWrongIndex()
        {
            if (PageIndex >= _pages.Length || PageIndex < 0)
            {
               Response.Redirect(
                        ServerModel.Forms.BuildRedirectUrl
                        (new ThemeResultController
                        {
                            BackUrl = string.Empty,
                            ThemeId = OpenThema,
                            CurriculumnName = (ServerModel.DB.Load<TblCurriculums>(CurriculumnId)).Name,
                            StageName = (ServerModel.DB.Load<TblStages>(StageId)).Name
                        }));
            }
        }

        private void CheckButtonState()
        {
            PreviousButton.Enabled = !(PageIndex == 0);

            NextButton.Enabled = !(PageIndex == _pages.Length - 1);

            ShowResult.Visible = !NextButton.Enabled;
        }

        private void SetPages(TblThemes thema)
        {
            ThemaName.Value = thema.Name;

            _pages = (PagesIds == null) ? new string[0] : PagesIds.Split(StudentHelper.PagesIdSplitter);
        }

        private string CreateRequestForPage(TblPages p)
        {
            string extension = (p.PageTypeRef == (int)FX_PAGETYPE.Practice)
                                    ? FileExtentions.IudicoPracticePage
                                    : FileExtentions.IudicoTheoryPage;

            RequestBuilder testPageUrl = RequestBuilder.NewRequest(extension, p.ID)
                .AddCurriculumnId(CurriculumnId).AddStageId(StageId);

            if (p.PageTypeRef == (int) FX_PAGETYPE.Practice)
                testPageUrl.AddThemeId(OpenThema).AddPageIndex(PageIndex).AddPagesIds(PagesIds);

            return testPageUrl.Build();
        }

        private void LoadIFrame()
        {
            if (PageContent != null)
            {
                _iframe = (HtmlControl) PageContent.FindControl("_openedTestFrame");
                if (_iframe == null)
                    throw new Exception("Can't load iframe");
            }
            else
            {
                throw new Exception("Can't load page Content");
            }
        }
    }
}