using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.ImportManagers;

namespace IUDICO.DataModel.Controllers
{
    public class OpenTestController : ControllerBase
    {
        /*The request url must look like this: OpenTest.aspx?openThema={ThemaId}&pageIndex={pageIndex}*/

        #region Request Constants

        private const string themaIdRequestParameter = "openThema";

        private const string pageIndexRequestParameter = "pageIndex";

        private const string testPageRequestPattern = "DisplayIudicoTestPage.{0}?pageId={1}"; 
        
        #endregion

        private int themaId;

        [PersistantField]
        private int currentPageIndex;

        private readonly List<string> urls = new List<string>();

        public HttpRequest Request { get; set; }

        public HttpResponse Response { get; set; }

        #region Page Controls
        
        private HtmlControl iframe;

        public ContentPlaceHolder PageContent { get; set; }

        public Button NextButton { get; set; }

        public Button PreviousButton { get; set; } 
        
        #endregion

        public void NextButton_Click(object sender, EventArgs e)
        {
            NextPage();
        }

        private void NextPage()
        {
            currentPageIndex++;
            ShowCurrentTestPage();
        }

        public void PreviousButton_Click(object sender, EventArgs e)
        {
            PreviousPage();
        }

        private void PreviousPage()
        {
            currentPageIndex--;
            ShowCurrentTestPage();
        }

        public void PageLoad(object sender, EventArgs e)
        {
            LoadIFrame();

            ParseRequest();

            SetPagesUrls();

            ShowCurrentTestPage();
        }

        private void ShowCurrentTestPage()
        {
            CorrectWrongIndex();

            CheckButtonState();

            iframe.Attributes["src"] = urls[currentPageIndex];
        }

        private void CorrectWrongIndex()
        {
            if (currentPageIndex >= urls.Count || currentPageIndex < 0)
                Response.Redirect("StudentPage.aspx");

        }

        private void CheckButtonState()
        {
            PreviousButton.Enabled = !(currentPageIndex == 0);

            NextButton.Enabled = !(currentPageIndex == urls.Count - 1);
        }

        private void SetPagesUrls()
        {
            var thema = ServerModel.DB.Load<TblThemes>(themaId);

            var pages = ServerModel.DB.Load<TblPages>(ServerModel.DB.LookupIds<TblPages>(thema, null));

            for (int i = 0; i < pages.Count; i++)
            {
                    CreateRequestForPage(pages[i], i);
            }
            
        }

        private void CreateRequestForPage(TblPages p, int i)
        {
            string extension = (p.PageTypeRef == (int) FX_PAGETYPE.Practice ? FileExtentions.IudicoPracticePage : FileExtentions.IudicoTheoryPage);

            string testPageUrl = string.Format(testPageRequestPattern, extension, p.ID);

            if (p.PageTypeRef == (int)FX_PAGETYPE.Practice)
            {
                testPageUrl += string.Format("&submit={0}&answers=false&themeId={1}&pageIndex={2}",
                    Request["submit"], themaId, i);
            }

            urls.Add(testPageUrl);
        }

        private void ParseRequest()
        {
            if(Request[themaIdRequestParameter] != null)
            {
                themaId = int.Parse(Request[themaIdRequestParameter]);

                if (Request[pageIndexRequestParameter] != null)
                {
                    currentPageIndex = int.Parse(Request[pageIndexRequestParameter]);
                }
            }
            else
            {
                throw new Exception("Wrong request (Thema ID dont specified)"); 
            }
        }

        private void LoadIFrame()
        {
            if (PageContent != null)
            {
                iframe = (HtmlControl)PageContent.FindControl("openedTestFrame");
                if(iframe == null)
                    throw new Exception("Can't load iframe"); 
            }
            else
            {
                throw new Exception("Can't load page Content");
            }
        }
    }
}
