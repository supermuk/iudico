using System;
using System.IO;
using System.Text;
using System.Web;
using System.Web.UI;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common.StudentUtils;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.ImportManagers;
using IUDICO.DataModel.WebControl;
using LEX.CONTROLS;
using LEX.CONTROLS.Expressions;

namespace IUDICO.DataModel.Controllers.Student
{
    public class OpenTestController : ControllerBase
    {
        [ControllerParameter] public int OpenThema;

        [ControllerParameter] public int PageIndex;
        
        [ControllerParameter] public int CurriculumnId;

        [ControllerParameter] public int StageId;

        [ControllerParameter] public string PagesIds;


        private string[] _pages;


        public readonly IVariable<string> Description = string.Empty.AsVariable();

        public readonly IVariable<string> ThemaName = string.Empty.AsVariable();

        public readonly IVariable<string> PageCount = string.Empty.AsVariable();

        #region Page Controls


        public HttpResponse Response { private get; set; }

        public HtmlGenericControl PageDiv { private get; set; }

        public Button NextButton { private get; set; }

        public Button PreviousButton { private get; set; }

        #endregion


        public void NextPage()
        {
            RedirectToController(new OpenTestController
                                     {
                                         BackUrl = string.Empty,
                                         OpenThema = OpenThema,
                                         PageIndex = ++PageIndex,
                                         PagesIds = PagesIds,
                                         CurriculumnId = CurriculumnId,
                                         StageId = StageId
                                     });
        }

        public void PreviousPage()
        {
            RedirectToController(new OpenTestController
                                     {
                                         BackUrl = string.Empty,
                                         OpenThema = OpenThema,
                                         PageIndex = --PageIndex,
                                         PagesIds = PagesIds,
                                         CurriculumnId = CurriculumnId,
                                         StageId = StageId
                                     });
        }

        public void PageLoad(object sender, EventArgs e)
        {
            if (OpenThema == 0)
                throw new Exception("Wrong request (Thema ID dont specified)");

            SetPages(ServerModel.DB.Load<TblThemes>(OpenThema));

            ShowCurrentTestPage();

        }

        private void ShowCurrentTestPage()
        {
            CorrectWrongIndex();

            CheckButtonState();

            var currentPage = ServerModel.DB.Load<TblPages>(int.Parse(_pages[PageIndex]));
            ShowPage(currentPage);
            
            SetDescription(currentPage);
        }

        private void ShowPage(TblPages page)
        {
            Control control;

            if ((FX_PAGETYPE)page.PageTypeRef == FX_PAGETYPE.Practice)
            {
                control = PageDiv.Page.ParseControl(Encoding.Unicode.GetString(page.PageFile.ToArray()));
                foreach (var v in control.Controls)
                    if(v is Button)
                        ((Button)v).Click += SubmitClick;
            }
            else
                control = PageDiv.Page.ParseControl(string.Format(@"<IFRAME ID=""_testDetailsFrame"" scrolling=""auto"" Runat=""Server""  src=""DisplayTheory.itp?PageId={0}""></IFRAME>", page.ID));

            PageDiv.Controls.Add(control);
            File.WriteAllText(@"D:\d.txt", Encoding.Unicode.GetString(page.PageFile.ToArray()));
        }

        private void SubmitClick(object sender, EventArgs e)
        {
        }

        private void SetDescription(TblPages p)
        {
            Description.Value = string.Format("You open {0}({1}) page", p.PageName, (FX_PAGETYPE) p.PageTypeRef);

            PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, _pages.Length);
        }

        private void CorrectWrongIndex()
        {
            if (PageIndex >= _pages.Length || PageIndex < 0)
            {
                if (ServerModel.User.Current != null)
                    Response.Redirect(
                        ServerModel.Forms.BuildRedirectUrl
                            (new ThemeResultController
                                 {
                                     BackUrl = string.Empty,
                                     ThemeId = OpenThema,
                                     CurriculumnName = (ServerModel.DB.Load<TblCurriculums>(CurriculumnId)).Name,
                                     StageName = (ServerModel.DB.Load<TblStages>(StageId)).Name,
                                     UserId = ServerModel.User.Current.ID
                                 }));
            }
        }

        private void CheckButtonState()
        {
            PreviousButton.Enabled = !(PageIndex == 0);

            NextButton.Enabled = !(PageIndex == _pages.Length - 1);
        }

        private void SetPages(TblThemes thema)
        {
            ThemaName.Value = thema.Name;

            _pages = PageShifter.GetPagesFromParameter(PagesIds);
        }
    }
}