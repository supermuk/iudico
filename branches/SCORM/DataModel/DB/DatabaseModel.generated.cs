#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4927
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IUDICO.DataModel.DB
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="IUDICO")]
	public partial class DatabaseModel : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertFxAnswerType(FxAnswerType instance);
    partial void UpdateFxAnswerType(FxAnswerType instance);
    partial void DeleteFxAnswerType(FxAnswerType instance);
    partial void InsertFxCompiledStatuses(FxCompiledStatuses instance);
    partial void UpdateFxCompiledStatuses(FxCompiledStatuses instance);
    partial void DeleteFxCompiledStatuses(FxCompiledStatuses instance);
    partial void InsertFxCourseOperations(FxCourseOperations instance);
    partial void UpdateFxCourseOperations(FxCourseOperations instance);
    partial void DeleteFxCourseOperations(FxCourseOperations instance);
    partial void InsertFxCurriculumOperations(FxCurriculumOperations instance);
    partial void UpdateFxCurriculumOperations(FxCurriculumOperations instance);
    partial void DeleteFxCurriculumOperations(FxCurriculumOperations instance);
    partial void InsertFxGroupOperations(FxGroupOperations instance);
    partial void UpdateFxGroupOperations(FxGroupOperations instance);
    partial void DeleteFxGroupOperations(FxGroupOperations instance);
    partial void InsertFxLanguages(FxLanguages instance);
    partial void UpdateFxLanguages(FxLanguages instance);
    partial void DeleteFxLanguages(FxLanguages instance);
    partial void InsertFxPageOperations(FxPageOperations instance);
    partial void UpdateFxPageOperations(FxPageOperations instance);
    partial void DeleteFxPageOperations(FxPageOperations instance);
    partial void InsertFxPageOrders(FxPageOrders instance);
    partial void UpdateFxPageOrders(FxPageOrders instance);
    partial void DeleteFxPageOrders(FxPageOrders instance);
    partial void InsertFxPageTypes(FxPageTypes instance);
    partial void UpdateFxPageTypes(FxPageTypes instance);
    partial void DeleteFxPageTypes(FxPageTypes instance);
    partial void InsertFxRoles(FxRoles instance);
    partial void UpdateFxRoles(FxRoles instance);
    partial void DeleteFxRoles(FxRoles instance);
    partial void InsertFxStageOperations(FxStageOperations instance);
    partial void UpdateFxStageOperations(FxStageOperations instance);
    partial void DeleteFxStageOperations(FxStageOperations instance);
    partial void InsertFxThemeOperations(FxThemeOperations instance);
    partial void UpdateFxThemeOperations(FxThemeOperations instance);
    partial void DeleteFxThemeOperations(FxThemeOperations instance);
    partial void InsertRelResourcesDependency(RelResourcesDependency instance);
    partial void UpdateRelResourcesDependency(RelResourcesDependency instance);
    partial void DeleteRelResourcesDependency(RelResourcesDependency instance);
    partial void InsertRelResourcesFiles(RelResourcesFiles instance);
    partial void UpdateRelResourcesFiles(RelResourcesFiles instance);
    partial void DeleteRelResourcesFiles(RelResourcesFiles instance);
    partial void InsertRelStagesThemes(RelStagesThemes instance);
    partial void UpdateRelStagesThemes(RelStagesThemes instance);
    partial void DeleteRelStagesThemes(RelStagesThemes instance);
    partial void InsertRelUserGroups(RelUserGroups instance);
    partial void UpdateRelUserGroups(RelUserGroups instance);
    partial void DeleteRelUserGroups(RelUserGroups instance);
    partial void InsertRelUserRoles(RelUserRoles instance);
    partial void UpdateRelUserRoles(RelUserRoles instance);
    partial void DeleteRelUserRoles(RelUserRoles instance);
    partial void InsertTblAttempts(TblAttempts instance);
    partial void UpdateTblAttempts(TblAttempts instance);
    partial void DeleteTblAttempts(TblAttempts instance);
    partial void InsertTblAttemptsVars(TblAttemptsVars instance);
    partial void UpdateTblAttemptsVars(TblAttemptsVars instance);
    partial void DeleteTblAttemptsVars(TblAttemptsVars instance);
    partial void InsertTblCompiledAnswers(TblCompiledAnswers instance);
    partial void UpdateTblCompiledAnswers(TblCompiledAnswers instance);
    partial void DeleteTblCompiledAnswers(TblCompiledAnswers instance);
    partial void InsertTblCompiledQuestions(TblCompiledQuestions instance);
    partial void UpdateTblCompiledQuestions(TblCompiledQuestions instance);
    partial void DeleteTblCompiledQuestions(TblCompiledQuestions instance);
    partial void InsertTblCompiledQuestionsData(TblCompiledQuestionsData instance);
    partial void UpdateTblCompiledQuestionsData(TblCompiledQuestionsData instance);
    partial void DeleteTblCompiledQuestionsData(TblCompiledQuestionsData instance);
    partial void InsertTblCourses(TblCourses instance);
    partial void UpdateTblCourses(TblCourses instance);
    partial void DeleteTblCourses(TblCourses instance);
    partial void InsertTblCurriculums(TblCurriculums instance);
    partial void UpdateTblCurriculums(TblCurriculums instance);
    partial void DeleteTblCurriculums(TblCurriculums instance);
    partial void InsertTblFiles(TblFiles instance);
    partial void UpdateTblFiles(TblFiles instance);
    partial void DeleteTblFiles(TblFiles instance);
    partial void InsertTblGroups(TblGroups instance);
    partial void UpdateTblGroups(TblGroups instance);
    partial void DeleteTblGroups(TblGroups instance);
    partial void InsertTblItems(TblItems instance);
    partial void UpdateTblItems(TblItems instance);
    partial void DeleteTblItems(TblItems instance);
    partial void InsertTblOrganizations(TblOrganizations instance);
    partial void UpdateTblOrganizations(TblOrganizations instance);
    partial void DeleteTblOrganizations(TblOrganizations instance);
    partial void InsertTblPermissions(TblPermissions instance);
    partial void UpdateTblPermissions(TblPermissions instance);
    partial void DeleteTblPermissions(TblPermissions instance);
    partial void InsertTblQuestions(TblQuestions instance);
    partial void UpdateTblQuestions(TblQuestions instance);
    partial void DeleteTblQuestions(TblQuestions instance);
    partial void InsertTblResources(TblResources instance);
    partial void UpdateTblResources(TblResources instance);
    partial void DeleteTblResources(TblResources instance);
    partial void InsertTblStages(TblStages instance);
    partial void UpdateTblStages(TblStages instance);
    partial void DeleteTblStages(TblStages instance);
    partial void InsertTblThemes(TblThemes instance);
    partial void UpdateTblThemes(TblThemes instance);
    partial void DeleteTblThemes(TblThemes instance);
    partial void InsertTblUserAnswers(TblUserAnswers instance);
    partial void UpdateTblUserAnswers(TblUserAnswers instance);
    partial void DeleteTblUserAnswers(TblUserAnswers instance);
    partial void InsertTblUsers(TblUsers instance);
    partial void UpdateTblUsers(TblUsers instance);
    partial void DeleteTblUsers(TblUsers instance);
    #endregion
		
		public DatabaseModel(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModel(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModel(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseModel(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<FxAnswerType> FxAnswerType
		{
			get
			{
				return this.GetTable<FxAnswerType>();
			}
		}
		
		public System.Data.Linq.Table<FxCompiledStatuses> FxCompiledStatuses
		{
			get
			{
				return this.GetTable<FxCompiledStatuses>();
			}
		}
		
		public System.Data.Linq.Table<FxCourseOperations> FxCourseOperations
		{
			get
			{
				return this.GetTable<FxCourseOperations>();
			}
		}
		
		public System.Data.Linq.Table<FxCurriculumOperations> FxCurriculumOperations
		{
			get
			{
				return this.GetTable<FxCurriculumOperations>();
			}
		}
		
		public System.Data.Linq.Table<FxGroupOperations> FxGroupOperations
		{
			get
			{
				return this.GetTable<FxGroupOperations>();
			}
		}
		
		public System.Data.Linq.Table<FxLanguages> FxLanguages
		{
			get
			{
				return this.GetTable<FxLanguages>();
			}
		}
		
		public System.Data.Linq.Table<FxPageOperations> FxPageOperations
		{
			get
			{
				return this.GetTable<FxPageOperations>();
			}
		}
		
		public System.Data.Linq.Table<FxPageOrders> FxPageOrders
		{
			get
			{
				return this.GetTable<FxPageOrders>();
			}
		}
		
		public System.Data.Linq.Table<FxPageTypes> FxPageTypes
		{
			get
			{
				return this.GetTable<FxPageTypes>();
			}
		}
		
		public System.Data.Linq.Table<FxRoles> FxRoles
		{
			get
			{
				return this.GetTable<FxRoles>();
			}
		}
		
		public System.Data.Linq.Table<FxSampleBusinesObjectOperation> FxSampleBusinesObjectOperation
		{
			get
			{
				return this.GetTable<FxSampleBusinesObjectOperation>();
			}
		}
		
		public System.Data.Linq.Table<FxStageOperations> FxStageOperations
		{
			get
			{
				return this.GetTable<FxStageOperations>();
			}
		}
		
		public System.Data.Linq.Table<FxThemeOperations> FxThemeOperations
		{
			get
			{
				return this.GetTable<FxThemeOperations>();
			}
		}
		
		public System.Data.Linq.Table<RelResourcesDependency> RelResourcesDependency
		{
			get
			{
				return this.GetTable<RelResourcesDependency>();
			}
		}
		
		public System.Data.Linq.Table<RelResourcesFiles> RelResourcesFiles
		{
			get
			{
				return this.GetTable<RelResourcesFiles>();
			}
		}
		
		public System.Data.Linq.Table<RelStagesThemes> RelStagesThemes
		{
			get
			{
				return this.GetTable<RelStagesThemes>();
			}
		}
		
		public System.Data.Linq.Table<RelUserGroups> RelUserGroups
		{
			get
			{
				return this.GetTable<RelUserGroups>();
			}
		}
		
		public System.Data.Linq.Table<RelUserRoles> RelUserRoles
		{
			get
			{
				return this.GetTable<RelUserRoles>();
			}
		}
		
		public System.Data.Linq.Table<TblAttempts> TblAttempts
		{
			get
			{
				return this.GetTable<TblAttempts>();
			}
		}
		
		public System.Data.Linq.Table<TblAttemptsVars> TblAttemptsVars
		{
			get
			{
				return this.GetTable<TblAttemptsVars>();
			}
		}
		
		public System.Data.Linq.Table<TblCompiledAnswers> TblCompiledAnswers
		{
			get
			{
				return this.GetTable<TblCompiledAnswers>();
			}
		}
		
		public System.Data.Linq.Table<TblCompiledQuestions> TblCompiledQuestions
		{
			get
			{
				return this.GetTable<TblCompiledQuestions>();
			}
		}
		
		public System.Data.Linq.Table<TblCompiledQuestionsData> TblCompiledQuestionsData
		{
			get
			{
				return this.GetTable<TblCompiledQuestionsData>();
			}
		}
		
		public System.Data.Linq.Table<TblCourses> TblCourses
		{
			get
			{
				return this.GetTable<TblCourses>();
			}
		}
		
		public System.Data.Linq.Table<TblCurriculums> TblCurriculums
		{
			get
			{
				return this.GetTable<TblCurriculums>();
			}
		}
		
		public System.Data.Linq.Table<TblFiles> TblFiles
		{
			get
			{
				return this.GetTable<TblFiles>();
			}
		}
		
		public System.Data.Linq.Table<TblGroups> TblGroups
		{
			get
			{
				return this.GetTable<TblGroups>();
			}
		}
		
		public System.Data.Linq.Table<TblItems> TblItems
		{
			get
			{
				return this.GetTable<TblItems>();
			}
		}
		
		public System.Data.Linq.Table<TblOrganizations> TblOrganizations
		{
			get
			{
				return this.GetTable<TblOrganizations>();
			}
		}
		
		public System.Data.Linq.Table<TblPermissions> TblPermissions
		{
			get
			{
				return this.GetTable<TblPermissions>();
			}
		}
		
		public System.Data.Linq.Table<TblQuestions> TblQuestions
		{
			get
			{
				return this.GetTable<TblQuestions>();
			}
		}
		
		public System.Data.Linq.Table<TblResources> TblResources
		{
			get
			{
				return this.GetTable<TblResources>();
			}
		}
		
		public System.Data.Linq.Table<TblSampleBusinesObject> TblSampleBusinesObject
		{
			get
			{
				return this.GetTable<TblSampleBusinesObject>();
			}
		}
		
		public System.Data.Linq.Table<TblStages> TblStages
		{
			get
			{
				return this.GetTable<TblStages>();
			}
		}
		
		public System.Data.Linq.Table<TblThemes> TblThemes
		{
			get
			{
				return this.GetTable<TblThemes>();
			}
		}
		
		public System.Data.Linq.Table<TblUserAnswers> TblUserAnswers
		{
			get
			{
				return this.GetTable<TblUserAnswers>();
			}
		}
		
		public System.Data.Linq.Table<TblUsers> TblUsers
		{
			get
			{
				return this.GetTable<TblUsers>();
			}
		}
		
		[Function(Name="dbo.GetSecurityID", IsComposable=true)]
		[return: Parameter(DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> GetSecurityID()
		{
			return ((System.Nullable<System.Guid>)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
		
		[Function(Name="dbo.Security_CheckPermissionCourse")]
		[return: Parameter(DbType="Int")]
		public int Security_CheckPermissionCourse([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="CourseOperationID", DbType="Int")] System.Nullable<int> courseOperationID, [Parameter(Name="CourseID", DbType="Int")] System.Nullable<int> courseID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, courseOperationID, courseID, targetDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_CheckPermissionCurriculum")]
		[return: Parameter(DbType="Int")]
		public int Security_CheckPermissionCurriculum([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="CurriculumOperationID", DbType="Int")] System.Nullable<int> curriculumOperationID, [Parameter(Name="CurriculumID", DbType="Int")] System.Nullable<int> curriculumID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, curriculumOperationID, curriculumID, targetDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_CheckPermissionGroup")]
		[return: Parameter(DbType="Int")]
		public int Security_CheckPermissionGroup([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="GroupOperationID", DbType="Int")] System.Nullable<int> groupOperationID, [Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, groupOperationID, groupID, targetDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_CheckPermissionStage")]
		[return: Parameter(DbType="Int")]
		public int Security_CheckPermissionStage([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="StageOperationID", DbType="Int")] System.Nullable<int> stageOperationID, [Parameter(Name="StageID", DbType="Int")] System.Nullable<int> stageID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, stageOperationID, stageID, targetDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_CheckPermissionTheme")]
		[return: Parameter(DbType="Int")]
		public int Security_CheckPermissionTheme([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="ThemeOperationID", DbType="Int")] System.Nullable<int> themeOperationID, [Parameter(Name="ThemeID", DbType="Int")] System.Nullable<int> themeID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, themeOperationID, themeID, targetDate);
			return ((int)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetGroupPermissionsCourse")]
		public ISingleResult<Security_GetGroupPermissionsCourseResult> Security_GetGroupPermissionsCourse([Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="CourseOperationID", DbType="Int")] System.Nullable<int> courseOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, courseOperationID, targetDate);
			return ((ISingleResult<Security_GetGroupPermissionsCourseResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetGroupPermissionsCurriculum")]
		public ISingleResult<Security_GetGroupPermissionsCurriculumResult> Security_GetGroupPermissionsCurriculum([Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="CurriculumOperationID", DbType="Int")] System.Nullable<int> curriculumOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, curriculumOperationID, targetDate);
			return ((ISingleResult<Security_GetGroupPermissionsCurriculumResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetGroupPermissionsGroup")]
		public ISingleResult<Security_GetGroupPermissionsGroupResult> Security_GetGroupPermissionsGroup([Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="GroupOperationID", DbType="Int")] System.Nullable<int> groupOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, groupOperationID, targetDate);
			return ((ISingleResult<Security_GetGroupPermissionsGroupResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetGroupPermissionsStage")]
		public ISingleResult<Security_GetGroupPermissionsStageResult> Security_GetGroupPermissionsStage([Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="StageOperationID", DbType="Int")] System.Nullable<int> stageOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, stageOperationID, targetDate);
			return ((ISingleResult<Security_GetGroupPermissionsStageResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetGroupPermissionsTheme")]
		public ISingleResult<Security_GetGroupPermissionsThemeResult> Security_GetGroupPermissionsTheme([Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="ThemeOperationID", DbType="Int")] System.Nullable<int> themeOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), groupID, themeOperationID, targetDate);
			return ((ISingleResult<Security_GetGroupPermissionsThemeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetOperationsForCourse")]
		public ISingleResult<Security_GetOperationsForCourseResult> Security_GetOperationsForCourse([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="CourseID", DbType="Int")] System.Nullable<int> courseID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, courseID, targetDate);
			return ((ISingleResult<Security_GetOperationsForCourseResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetOperationsForCurriculum")]
		public ISingleResult<Security_GetOperationsForCurriculumResult> Security_GetOperationsForCurriculum([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="CurriculumID", DbType="Int")] System.Nullable<int> curriculumID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, curriculumID, targetDate);
			return ((ISingleResult<Security_GetOperationsForCurriculumResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetOperationsForGroup")]
		public ISingleResult<Security_GetOperationsForGroupResult> Security_GetOperationsForGroup([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="GroupID", DbType="Int")] System.Nullable<int> groupID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, groupID, targetDate);
			return ((ISingleResult<Security_GetOperationsForGroupResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetOperationsForStage")]
		public ISingleResult<Security_GetOperationsForStageResult> Security_GetOperationsForStage([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="StageID", DbType="Int")] System.Nullable<int> stageID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, stageID, targetDate);
			return ((ISingleResult<Security_GetOperationsForStageResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetOperationsForTheme")]
		public ISingleResult<Security_GetOperationsForThemeResult> Security_GetOperationsForTheme([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="ThemeID", DbType="Int")] System.Nullable<int> themeID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, themeID, targetDate);
			return ((ISingleResult<Security_GetOperationsForThemeResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetPermissionsCourse")]
		public ISingleResult<Security_GetPermissionsCourseResult> Security_GetPermissionsCourse([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="CourseOperationID", DbType="Int")] System.Nullable<int> courseOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, courseOperationID, targetDate);
			return ((ISingleResult<Security_GetPermissionsCourseResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetPermissionsCurriculum")]
		public ISingleResult<Security_GetPermissionsCurriculumResult> Security_GetPermissionsCurriculum([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="CurriculumOperationID", DbType="Int")] System.Nullable<int> curriculumOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, curriculumOperationID, targetDate);
			return ((ISingleResult<Security_GetPermissionsCurriculumResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetPermissionsGroup")]
		public ISingleResult<Security_GetPermissionsGroupResult> Security_GetPermissionsGroup([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="GroupOperationID", DbType="Int")] System.Nullable<int> groupOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, groupOperationID, targetDate);
			return ((ISingleResult<Security_GetPermissionsGroupResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetPermissionsStage")]
		public ISingleResult<Security_GetPermissionsStageResult> Security_GetPermissionsStage([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="StageOperationID", DbType="Int")] System.Nullable<int> stageOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, stageOperationID, targetDate);
			return ((ISingleResult<Security_GetPermissionsStageResult>)(result.ReturnValue));
		}
		
		[Function(Name="dbo.Security_GetPermissionsTheme")]
		public ISingleResult<Security_GetPermissionsThemeResult> Security_GetPermissionsTheme([Parameter(Name="UserID", DbType="Int")] System.Nullable<int> userID, [Parameter(Name="ThemeOperationID", DbType="Int")] System.Nullable<int> themeOperationID, [Parameter(Name="TargetDate", DbType="DateTime")] System.Nullable<System.DateTime> targetDate)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, themeOperationID, targetDate);
			return ((ISingleResult<Security_GetPermissionsThemeResult>)(result.ReturnValue));
		}
	}
	
	[Table(Name="dbo.fxAnswerType")]
	public partial class FxAnswerType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private short _SysState;
		
		private EntitySet<TblUserAnswers> _TblUserAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxAnswerType()
		{
			this._TblUserAnswers = new EntitySet<TblUserAnswers>(new Action<TblUserAnswers>(this.attach_TblUserAnswers), new Action<TblUserAnswers>(this.detach_TblUserAnswers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblUserAnswers_AnswerTypeRef", Storage="_TblUserAnswers", OtherKey="AnswerTypeRef", DeleteRule="NO ACTION")]
		public EntitySet<TblUserAnswers> TblUserAnswers
		{
			get
			{
				return this._TblUserAnswers;
			}
			set
			{
				this._TblUserAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblUserAnswers(TblUserAnswers entity)
		{
			this.SendPropertyChanging();
			entity.FxAnswerType = this;
		}
		
		private void detach_TblUserAnswers(TblUserAnswers entity)
		{
			this.SendPropertyChanging();
			entity.FxAnswerType = null;
		}
	}
	
	[Table(Name="dbo.fxCompiledStatuses")]
	public partial class FxCompiledStatuses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private short _SysState;
		
		private EntitySet<TblCompiledAnswers> _TblCompiledAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxCompiledStatuses()
		{
			this._TblCompiledAnswers = new EntitySet<TblCompiledAnswers>(new Action<TblCompiledAnswers>(this.attach_TblCompiledAnswers), new Action<TblCompiledAnswers>(this.detach_TblCompiledAnswers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblCompiledAnswers_fxdCompiledStatuses", Storage="_TblCompiledAnswers", OtherKey="StatusRef", DeleteRule="NO ACTION")]
		public EntitySet<TblCompiledAnswers> TblCompiledAnswers
		{
			get
			{
				return this._TblCompiledAnswers;
			}
			set
			{
				this._TblCompiledAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblCompiledAnswers(TblCompiledAnswers entity)
		{
			this.SendPropertyChanging();
			entity.FxCompiledStatuses = this;
		}
		
		private void detach_TblCompiledAnswers(TblCompiledAnswers entity)
		{
			this.SendPropertyChanging();
			entity.FxCompiledStatuses = null;
		}
	}
	
	[Table(Name="dbo.fxCourseOperations")]
	public partial class FxCourseOperations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanBeDelegatedChanging(bool value);
    partial void OnCanBeDelegatedChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxCourseOperations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this.OnCanBeDelegatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelegated = value;
					this.SendPropertyChanged("CanBeDelegated");
					this.OnCanBeDelegatedChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_CourseOperations", Storage="_TblPermissions", OtherKey="CourseOperationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxCourseOperations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxCourseOperations = null;
		}
	}
	
	[Table(Name="dbo.fxCurriculumOperations")]
	public partial class FxCurriculumOperations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanBeDelegatedChanging(bool value);
    partial void OnCanBeDelegatedChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxCurriculumOperations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this.OnCanBeDelegatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelegated = value;
					this.SendPropertyChanged("CanBeDelegated");
					this.OnCanBeDelegatedChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_CurriculumOperations", Storage="_TblPermissions", OtherKey="CurriculumOperationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxCurriculumOperations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxCurriculumOperations = null;
		}
	}
	
	[Table(Name="dbo.fxGroupOperations")]
	public partial class FxGroupOperations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanBeDelegatedChanging(bool value);
    partial void OnCanBeDelegatedChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxGroupOperations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this.OnCanBeDelegatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelegated = value;
					this.SendPropertyChanged("CanBeDelegated");
					this.OnCanBeDelegatedChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_GroupOperations", Storage="_TblPermissions", OtherKey="GroupOperationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxGroupOperations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxGroupOperations = null;
		}
	}
	
	[Table(Name="dbo.fxLanguages")]
	public partial class FxLanguages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private short _SysState;
		
		private EntitySet<TblCompiledQuestions> _TblCompiledQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxLanguages()
		{
			this._TblCompiledQuestions = new EntitySet<TblCompiledQuestions>(new Action<TblCompiledQuestions>(this.attach_TblCompiledQuestions), new Action<TblCompiledQuestions>(this.detach_TblCompiledQuestions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblCompiledQuestions_fxdLanguages", Storage="_TblCompiledQuestions", OtherKey="LanguageRef", DeleteRule="NO ACTION")]
		public EntitySet<TblCompiledQuestions> TblCompiledQuestions
		{
			get
			{
				return this._TblCompiledQuestions;
			}
			set
			{
				this._TblCompiledQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblCompiledQuestions(TblCompiledQuestions entity)
		{
			this.SendPropertyChanging();
			entity.FxLanguages = this;
		}
		
		private void detach_TblCompiledQuestions(TblCompiledQuestions entity)
		{
			this.SendPropertyChanging();
			entity.FxLanguages = null;
		}
	}
	
	[Table(Name="dbo.fxPageOperations")]
	public partial class FxPageOperations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanBeDelegatedChanging(bool value);
    partial void OnCanBeDelegatedChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxPageOperations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this.OnCanBeDelegatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelegated = value;
					this.SendPropertyChanged("CanBeDelegated");
					this.OnCanBeDelegatedChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_PageOperations", Storage="_TblPermissions", OtherKey="PageOperationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxPageOperations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxPageOperations = null;
		}
	}
	
	[Table(Name="dbo.fxPageOrders")]
	public partial class FxPageOrders : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private short _SysState;
		
		private EntitySet<TblThemes> _TblThemes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxPageOrders()
		{
			this._TblThemes = new EntitySet<TblThemes>(new Action<TblThemes>(this.attach_TblThemes), new Action<TblThemes>(this.detach_TblThemes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblThemes_fxdPageOrders", Storage="_TblThemes", OtherKey="PageOrderRef", DeleteRule="NO ACTION")]
		public EntitySet<TblThemes> TblThemes
		{
			get
			{
				return this._TblThemes;
			}
			set
			{
				this._TblThemes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.FxPageOrders = this;
		}
		
		private void detach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.FxPageOrders = null;
		}
	}
	
	[Table(Name="dbo.fxPageTypes")]
	public partial class FxPageTypes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Type;
		
		private short _SysState;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxPageTypes()
		{
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(10)")]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.fxRoles")]
	public partial class FxRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private short _SysState;
		
		private EntitySet<RelUserRoles> _RelUserRoles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxRoles()
		{
			this._RelUserRoles = new EntitySet<RelUserRoles>(new Action<RelUserRoles>(this.attach_RelUserRoles), new Action<RelUserRoles>(this.detach_RelUserRoles));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(20)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_ROLE_ID", Storage="_RelUserRoles", OtherKey="RoleID", DeleteRule="NO ACTION")]
		public EntitySet<RelUserRoles> RelUserRoles
		{
			get
			{
				return this._RelUserRoles;
			}
			set
			{
				this._RelUserRoles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelUserRoles(RelUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.FxRoles = this;
		}
		
		private void detach_RelUserRoles(RelUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.FxRoles = null;
		}
	}
	
	[Table(Name="dbo.fxSampleBusinesObjectOperation")]
	public partial class FxSampleBusinesObjectOperation
	{
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		public FxSampleBusinesObjectOperation()
		{
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this._Description = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this._CanBeDelegated = value;
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this._SysState = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.fxStageOperations")]
	public partial class FxStageOperations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanBeDelegatedChanging(bool value);
    partial void OnCanBeDelegatedChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxStageOperations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this.OnCanBeDelegatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelegated = value;
					this.SendPropertyChanged("CanBeDelegated");
					this.OnCanBeDelegatedChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_StageOperations", Storage="_TblPermissions", OtherKey="StageOperationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxStageOperations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxStageOperations = null;
		}
	}
	
	[Table(Name="dbo.fxThemeOperations")]
	public partial class FxThemeOperations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private bool _CanBeDelegated;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCanBeDelegatedChanging(bool value);
    partial void OnCanBeDelegatedChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public FxThemeOperations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelegated", DbType="Bit NOT NULL")]
		public bool CanBeDelegated
		{
			get
			{
				return this._CanBeDelegated;
			}
			set
			{
				if ((this._CanBeDelegated != value))
				{
					this.OnCanBeDelegatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelegated = value;
					this.SendPropertyChanged("CanBeDelegated");
					this.OnCanBeDelegatedChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_ThemeOperations", Storage="_TblPermissions", OtherKey="ThemeOperationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxThemeOperations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.FxThemeOperations = null;
		}
	}
	
	[Table(Name="dbo.relResourcesDependency")]
	public partial class RelResourcesDependency : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _DependantRef;
		
		private int _DependencyRef;
		
		private short _SysState;
		
		private EntityRef<TblResources> _TblResources;
		
		private EntityRef<TblResources> _DependencyRefTblResources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDependantRefChanging(int value);
    partial void OnDependantRefChanged();
    partial void OnDependencyRefChanging(int value);
    partial void OnDependencyRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public RelResourcesDependency()
		{
			this._TblResources = default(EntityRef<TblResources>);
			this._DependencyRefTblResources = default(EntityRef<TblResources>);
			OnCreated();
		}
		
		[Column(Storage="_DependantRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DependantRef
		{
			get
			{
				return this._DependantRef;
			}
			set
			{
				if ((this._DependantRef != value))
				{
					if (this._TblResources.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDependantRefChanging(value);
					this.SendPropertyChanging();
					this._DependantRef = value;
					this.SendPropertyChanged("DependantRef");
					this.OnDependantRefChanged();
				}
			}
		}
		
		[Column(Storage="_DependencyRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int DependencyRef
		{
			get
			{
				return this._DependencyRef;
			}
			set
			{
				if ((this._DependencyRef != value))
				{
					if (this._DependencyRefTblResources.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDependencyRefChanging(value);
					this.SendPropertyChanging();
					this._DependencyRef = value;
					this.SendPropertyChanged("DependencyRef");
					this.OnDependencyRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_relResourcesDependency_tblResources_Dependant", Storage="_TblResources", ThisKey="DependantRef", IsForeignKey=true)]
		public TblResources TblResources
		{
			get
			{
				return this._TblResources.Entity;
			}
			set
			{
				TblResources previousValue = this._TblResources.Entity;
				if (((previousValue != value) 
							|| (this._TblResources.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblResources.Entity = null;
						previousValue.RelResourcesDependency.Remove(this);
					}
					this._TblResources.Entity = value;
					if ((value != null))
					{
						value.RelResourcesDependency.Add(this);
						this._DependantRef = value.ID;
					}
					else
					{
						this._DependantRef = default(int);
					}
					this.SendPropertyChanged("TblResources");
				}
			}
		}
		
		[Association(Name="FK_relResourcesDependency_tblResources_Dependency", Storage="_DependencyRefTblResources", ThisKey="DependencyRef", IsForeignKey=true)]
		public TblResources DependencyRefTblResources
		{
			get
			{
				return this._DependencyRefTblResources.Entity;
			}
			set
			{
				TblResources previousValue = this._DependencyRefTblResources.Entity;
				if (((previousValue != value) 
							|| (this._DependencyRefTblResources.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._DependencyRefTblResources.Entity = null;
						previousValue.RelResourcesDependency_tblResources_Dependency.Remove(this);
					}
					this._DependencyRefTblResources.Entity = value;
					if ((value != null))
					{
						value.RelResourcesDependency_tblResources_Dependency.Add(this);
						this._DependencyRef = value.ID;
					}
					else
					{
						this._DependencyRef = default(int);
					}
					this.SendPropertyChanged("DependencyRefTblResources");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.relResourcesFiles")]
	public partial class RelResourcesFiles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceRef;
		
		private int _FileRef;
		
		private short _SysState;
		
		private EntityRef<TblFiles> _TblFiles;
		
		private EntityRef<TblResources> _TblResources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceRefChanging(int value);
    partial void OnResourceRefChanged();
    partial void OnFileRefChanging(int value);
    partial void OnFileRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public RelResourcesFiles()
		{
			this._TblFiles = default(EntityRef<TblFiles>);
			this._TblResources = default(EntityRef<TblResources>);
			OnCreated();
		}
		
		[Column(Storage="_ResourceRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceRef
		{
			get
			{
				return this._ResourceRef;
			}
			set
			{
				if ((this._ResourceRef != value))
				{
					if (this._TblResources.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceRefChanging(value);
					this.SendPropertyChanging();
					this._ResourceRef = value;
					this.SendPropertyChanged("ResourceRef");
					this.OnResourceRefChanged();
				}
			}
		}
		
		[Column(Storage="_FileRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int FileRef
		{
			get
			{
				return this._FileRef;
			}
			set
			{
				if ((this._FileRef != value))
				{
					if (this._TblFiles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFileRefChanging(value);
					this.SendPropertyChanging();
					this._FileRef = value;
					this.SendPropertyChanged("FileRef");
					this.OnFileRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_relResourcesFiles_tblFiles", Storage="_TblFiles", ThisKey="FileRef", IsForeignKey=true)]
		public TblFiles TblFiles
		{
			get
			{
				return this._TblFiles.Entity;
			}
			set
			{
				TblFiles previousValue = this._TblFiles.Entity;
				if (((previousValue != value) 
							|| (this._TblFiles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblFiles.Entity = null;
						previousValue.RelResourcesFiles.Remove(this);
					}
					this._TblFiles.Entity = value;
					if ((value != null))
					{
						value.RelResourcesFiles.Add(this);
						this._FileRef = value.ID;
					}
					else
					{
						this._FileRef = default(int);
					}
					this.SendPropertyChanged("TblFiles");
				}
			}
		}
		
		[Association(Name="FK_relResourcesFiles_tblResources", Storage="_TblResources", ThisKey="ResourceRef", IsForeignKey=true)]
		public TblResources TblResources
		{
			get
			{
				return this._TblResources.Entity;
			}
			set
			{
				TblResources previousValue = this._TblResources.Entity;
				if (((previousValue != value) 
							|| (this._TblResources.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblResources.Entity = null;
						previousValue.RelResourcesFiles.Remove(this);
					}
					this._TblResources.Entity = value;
					if ((value != null))
					{
						value.RelResourcesFiles.Add(this);
						this._ResourceRef = value.ID;
					}
					else
					{
						this._ResourceRef = default(int);
					}
					this.SendPropertyChanged("TblResources");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.relStagesThemes")]
	public partial class RelStagesThemes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _StageRef;
		
		private int _ThemeRef;
		
		private short _SysState;
		
		private EntityRef<TblStages> _TblStages;
		
		private EntityRef<TblThemes> _TblThemes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStageRefChanging(int value);
    partial void OnStageRefChanged();
    partial void OnThemeRefChanging(int value);
    partial void OnThemeRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public RelStagesThemes()
		{
			this._TblStages = default(EntityRef<TblStages>);
			this._TblThemes = default(EntityRef<TblThemes>);
			OnCreated();
		}
		
		[Column(Storage="_StageRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					if (this._TblStages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStageRefChanging(value);
					this.SendPropertyChanging();
					this._StageRef = value;
					this.SendPropertyChanged("StageRef");
					this.OnStageRefChanged();
				}
			}
		}
		
		[Column(Storage="_ThemeRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ThemeRef
		{
			get
			{
				return this._ThemeRef;
			}
			set
			{
				if ((this._ThemeRef != value))
				{
					if (this._TblThemes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeRefChanging(value);
					this.SendPropertyChanging();
					this._ThemeRef = value;
					this.SendPropertyChanged("ThemeRef");
					this.OnThemeRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Stage", Storage="_TblStages", ThisKey="StageRef", IsForeignKey=true)]
		public TblStages TblStages
		{
			get
			{
				return this._TblStages.Entity;
			}
			set
			{
				TblStages previousValue = this._TblStages.Entity;
				if (((previousValue != value) 
							|| (this._TblStages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblStages.Entity = null;
						previousValue.RelStagesThemes.Remove(this);
					}
					this._TblStages.Entity = value;
					if ((value != null))
					{
						value.RelStagesThemes.Add(this);
						this._StageRef = value.ID;
					}
					else
					{
						this._StageRef = default(int);
					}
					this.SendPropertyChanged("TblStages");
				}
			}
		}
		
		[Association(Name="FK_Theme", Storage="_TblThemes", ThisKey="ThemeRef", IsForeignKey=true)]
		public TblThemes TblThemes
		{
			get
			{
				return this._TblThemes.Entity;
			}
			set
			{
				TblThemes previousValue = this._TblThemes.Entity;
				if (((previousValue != value) 
							|| (this._TblThemes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblThemes.Entity = null;
						previousValue.RelStagesThemes.Remove(this);
					}
					this._TblThemes.Entity = value;
					if ((value != null))
					{
						value.RelStagesThemes.Add(this);
						this._ThemeRef = value.ID;
					}
					else
					{
						this._ThemeRef = default(int);
					}
					this.SendPropertyChanged("TblThemes");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.relUserGroups")]
	public partial class RelUserGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserRef;
		
		private int _GroupRef;
		
		private short _SysState;
		
		private EntityRef<TblGroups> _TblGroups;
		
		private EntityRef<TblUsers> _TblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    partial void OnGroupRefChanging(int value);
    partial void OnGroupRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public RelUserGroups()
		{
			this._TblGroups = default(EntityRef<TblGroups>);
			this._TblUsers = default(EntityRef<TblUsers>);
			OnCreated();
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._TblUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_GroupRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupRef
		{
			get
			{
				return this._GroupRef;
			}
			set
			{
				if ((this._GroupRef != value))
				{
					if (this._TblGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupRefChanging(value);
					this.SendPropertyChanging();
					this._GroupRef = value;
					this.SendPropertyChanged("GroupRef");
					this.OnGroupRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_GROUP", Storage="_TblGroups", ThisKey="GroupRef", IsForeignKey=true)]
		public TblGroups TblGroups
		{
			get
			{
				return this._TblGroups.Entity;
			}
			set
			{
				TblGroups previousValue = this._TblGroups.Entity;
				if (((previousValue != value) 
							|| (this._TblGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblGroups.Entity = null;
						previousValue.RelUserGroups.Remove(this);
					}
					this._TblGroups.Entity = value;
					if ((value != null))
					{
						value.RelUserGroups.Add(this);
						this._GroupRef = value.ID;
					}
					else
					{
						this._GroupRef = default(int);
					}
					this.SendPropertyChanged("TblGroups");
				}
			}
		}
		
		[Association(Name="FK_USER", Storage="_TblUsers", ThisKey="UserRef", IsForeignKey=true)]
		public TblUsers TblUsers
		{
			get
			{
				return this._TblUsers.Entity;
			}
			set
			{
				TblUsers previousValue = this._TblUsers.Entity;
				if (((previousValue != value) 
							|| (this._TblUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUsers.Entity = null;
						previousValue.RelUserGroups.Remove(this);
					}
					this._TblUsers.Entity = value;
					if ((value != null))
					{
						value.RelUserGroups.Add(this);
						this._UserRef = value.ID;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("TblUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.relUserRoles")]
	public partial class RelUserRoles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private int _RoleID;
		
		private short _SysState;
		
		private EntityRef<FxRoles> _FxRoles;
		
		private EntityRef<TblUsers> _TblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public RelUserRoles()
		{
			this._FxRoles = default(EntityRef<FxRoles>);
			this._TblUsers = default(EntityRef<TblUsers>);
			OnCreated();
		}
		
		[Column(Storage="_UserID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._TblUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[Column(Storage="_RoleID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._FxRoles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_ROLE_ID", Storage="_FxRoles", ThisKey="RoleID", IsForeignKey=true)]
		public FxRoles FxRoles
		{
			get
			{
				return this._FxRoles.Entity;
			}
			set
			{
				FxRoles previousValue = this._FxRoles.Entity;
				if (((previousValue != value) 
							|| (this._FxRoles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxRoles.Entity = null;
						previousValue.RelUserRoles.Remove(this);
					}
					this._FxRoles.Entity = value;
					if ((value != null))
					{
						value.RelUserRoles.Add(this);
						this._RoleID = value.ID;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("FxRoles");
				}
			}
		}
		
		[Association(Name="FK_USER_ID", Storage="_TblUsers", ThisKey="UserID", IsForeignKey=true)]
		public TblUsers TblUsers
		{
			get
			{
				return this._TblUsers.Entity;
			}
			set
			{
				TblUsers previousValue = this._TblUsers.Entity;
				if (((previousValue != value) 
							|| (this._TblUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUsers.Entity = null;
						previousValue.RelUserRoles.Remove(this);
					}
					this._TblUsers.Entity = value;
					if ((value != null))
					{
						value.RelUserRoles.Add(this);
						this._UserID = value.ID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("TblUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblAttempts")]
	public partial class TblAttempts : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _ThemeRef;
		
		private int _UserRef;
		
		private EntityRef<TblThemes> _TblThemes;
		
		private EntityRef<TblUsers> _TblUsers;
		
		private EntitySet<TblAttemptsVars> _TblAttemptsVars;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnThemeRefChanging(int value);
    partial void OnThemeRefChanged();
    partial void OnUserRefChanging(int value);
    partial void OnUserRefChanged();
    #endregion
		
		public TblAttempts()
		{
			this._TblThemes = default(EntityRef<TblThemes>);
			this._TblUsers = default(EntityRef<TblUsers>);
			this._TblAttemptsVars = new EntitySet<TblAttemptsVars>(new Action<TblAttemptsVars>(this.attach_TblAttemptsVars), new Action<TblAttemptsVars>(this.detach_TblAttemptsVars));
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ThemeRef", DbType="Int NOT NULL")]
		public int ThemeRef
		{
			get
			{
				return this._ThemeRef;
			}
			set
			{
				if ((this._ThemeRef != value))
				{
					if (this._TblThemes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeRefChanging(value);
					this.SendPropertyChanging();
					this._ThemeRef = value;
					this.SendPropertyChanged("ThemeRef");
					this.OnThemeRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int NOT NULL")]
		public int UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._TblUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Association(Name="FK_tblAttempts_tblThemes", Storage="_TblThemes", ThisKey="ThemeRef", IsForeignKey=true)]
		public TblThemes TblThemes
		{
			get
			{
				return this._TblThemes.Entity;
			}
			set
			{
				TblThemes previousValue = this._TblThemes.Entity;
				if (((previousValue != value) 
							|| (this._TblThemes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblThemes.Entity = null;
						previousValue.TblAttempts.Remove(this);
					}
					this._TblThemes.Entity = value;
					if ((value != null))
					{
						value.TblAttempts.Add(this);
						this._ThemeRef = value.ID;
					}
					else
					{
						this._ThemeRef = default(int);
					}
					this.SendPropertyChanged("TblThemes");
				}
			}
		}
		
		[Association(Name="FK_tblAttempts_tblUsers", Storage="_TblUsers", ThisKey="UserRef", IsForeignKey=true)]
		public TblUsers TblUsers
		{
			get
			{
				return this._TblUsers.Entity;
			}
			set
			{
				TblUsers previousValue = this._TblUsers.Entity;
				if (((previousValue != value) 
							|| (this._TblUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUsers.Entity = null;
						previousValue.TblAttempts.Remove(this);
					}
					this._TblUsers.Entity = value;
					if ((value != null))
					{
						value.TblAttempts.Add(this);
						this._UserRef = value.ID;
					}
					else
					{
						this._UserRef = default(int);
					}
					this.SendPropertyChanged("TblUsers");
				}
			}
		}
		
		[Association(Name="FK_tblAttemptsVars_tblAttempts", Storage="_TblAttemptsVars", OtherKey="AttemptRef", DeleteRule="NO ACTION")]
		public EntitySet<TblAttemptsVars> TblAttemptsVars
		{
			get
			{
				return this._TblAttemptsVars;
			}
			set
			{
				this._TblAttemptsVars.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblAttemptsVars(TblAttemptsVars entity)
		{
			this.SendPropertyChanging();
			entity.TblAttempts = this;
		}
		
		private void detach_TblAttemptsVars(TblAttemptsVars entity)
		{
			this.SendPropertyChanging();
			entity.TblAttempts = null;
		}
	}
	
	[Table(Name="dbo.tblAttemptsVars")]
	public partial class TblAttemptsVars : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _AttemptRef;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<TblAttempts> _TblAttempts;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnAttemptRefChanging(int value);
    partial void OnAttemptRefChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TblAttemptsVars()
		{
			this._TblAttempts = default(EntityRef<TblAttempts>);
			OnCreated();
		}
		
		[Column(Storage="_ID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_AttemptRef", DbType="Int NOT NULL")]
		public int AttemptRef
		{
			get
			{
				return this._AttemptRef;
			}
			set
			{
				if ((this._AttemptRef != value))
				{
					if (this._TblAttempts.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttemptRefChanging(value);
					this.SendPropertyChanging();
					this._AttemptRef = value;
					this.SendPropertyChanged("AttemptRef");
					this.OnAttemptRefChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="VarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Value", DbType="VarChar(MAX) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[Association(Name="FK_tblAttemptsVars_tblAttempts", Storage="_TblAttempts", ThisKey="AttemptRef", IsForeignKey=true)]
		public TblAttempts TblAttempts
		{
			get
			{
				return this._TblAttempts.Entity;
			}
			set
			{
				TblAttempts previousValue = this._TblAttempts.Entity;
				if (((previousValue != value) 
							|| (this._TblAttempts.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblAttempts.Entity = null;
						previousValue.TblAttemptsVars.Remove(this);
					}
					this._TblAttempts.Entity = value;
					if ((value != null))
					{
						value.TblAttemptsVars.Add(this);
						this._AttemptRef = value.ID;
					}
					else
					{
						this._AttemptRef = default(int);
					}
					this.SendPropertyChanged("TblAttempts");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblCompiledAnswers")]
	public partial class TblCompiledAnswers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _TimeUsed;
		
		private System.Nullable<int> _MemoryUsed;
		
		private int _StatusRef;
		
		private short _SysState;
		
		private int _UserAnswerRef;
		
		private string _Output;
		
		private int _CompiledQuestionsDataRef;
		
		private EntityRef<FxCompiledStatuses> _FxCompiledStatuses;
		
		private EntityRef<TblCompiledQuestionsData> _TblCompiledQuestionsData;
		
		private EntityRef<TblUserAnswers> _TblUserAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnTimeUsedChanging(System.Nullable<int> value);
    partial void OnTimeUsedChanged();
    partial void OnMemoryUsedChanging(System.Nullable<int> value);
    partial void OnMemoryUsedChanged();
    partial void OnStatusRefChanging(int value);
    partial void OnStatusRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    partial void OnUserAnswerRefChanging(int value);
    partial void OnUserAnswerRefChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    partial void OnCompiledQuestionsDataRefChanging(int value);
    partial void OnCompiledQuestionsDataRefChanged();
    #endregion
		
		public TblCompiledAnswers()
		{
			this._FxCompiledStatuses = default(EntityRef<FxCompiledStatuses>);
			this._TblCompiledQuestionsData = default(EntityRef<TblCompiledQuestionsData>);
			this._TblUserAnswers = default(EntityRef<TblUserAnswers>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_TimeUsed", DbType="Int")]
		public System.Nullable<int> TimeUsed
		{
			get
			{
				return this._TimeUsed;
			}
			set
			{
				if ((this._TimeUsed != value))
				{
					this.OnTimeUsedChanging(value);
					this.SendPropertyChanging();
					this._TimeUsed = value;
					this.SendPropertyChanged("TimeUsed");
					this.OnTimeUsedChanged();
				}
			}
		}
		
		[Column(Storage="_MemoryUsed", DbType="Int")]
		public System.Nullable<int> MemoryUsed
		{
			get
			{
				return this._MemoryUsed;
			}
			set
			{
				if ((this._MemoryUsed != value))
				{
					this.OnMemoryUsedChanging(value);
					this.SendPropertyChanging();
					this._MemoryUsed = value;
					this.SendPropertyChanged("MemoryUsed");
					this.OnMemoryUsedChanged();
				}
			}
		}
		
		[Column(Storage="_StatusRef", DbType="Int NOT NULL")]
		public int StatusRef
		{
			get
			{
				return this._StatusRef;
			}
			set
			{
				if ((this._StatusRef != value))
				{
					if (this._FxCompiledStatuses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatusRefChanging(value);
					this.SendPropertyChanging();
					this._StatusRef = value;
					this.SendPropertyChanged("StatusRef");
					this.OnStatusRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Column(Storage="_UserAnswerRef", DbType="Int NOT NULL")]
		public int UserAnswerRef
		{
			get
			{
				return this._UserAnswerRef;
			}
			set
			{
				if ((this._UserAnswerRef != value))
				{
					if (this._TblUserAnswers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAnswerRefChanging(value);
					this.SendPropertyChanging();
					this._UserAnswerRef = value;
					this.SendPropertyChanged("UserAnswerRef");
					this.OnUserAnswerRefChanged();
				}
			}
		}
		
		[Column(Storage="_Output", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[Column(Storage="_CompiledQuestionsDataRef", DbType="Int NOT NULL")]
		public int CompiledQuestionsDataRef
		{
			get
			{
				return this._CompiledQuestionsDataRef;
			}
			set
			{
				if ((this._CompiledQuestionsDataRef != value))
				{
					if (this._TblCompiledQuestionsData.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompiledQuestionsDataRefChanging(value);
					this.SendPropertyChanging();
					this._CompiledQuestionsDataRef = value;
					this.SendPropertyChanged("CompiledQuestionsDataRef");
					this.OnCompiledQuestionsDataRefChanged();
				}
			}
		}
		
		[Association(Name="FK_tblCompiledAnswers_fxdCompiledStatuses", Storage="_FxCompiledStatuses", ThisKey="StatusRef", IsForeignKey=true)]
		public FxCompiledStatuses FxCompiledStatuses
		{
			get
			{
				return this._FxCompiledStatuses.Entity;
			}
			set
			{
				FxCompiledStatuses previousValue = this._FxCompiledStatuses.Entity;
				if (((previousValue != value) 
							|| (this._FxCompiledStatuses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxCompiledStatuses.Entity = null;
						previousValue.TblCompiledAnswers.Remove(this);
					}
					this._FxCompiledStatuses.Entity = value;
					if ((value != null))
					{
						value.TblCompiledAnswers.Add(this);
						this._StatusRef = value.ID;
					}
					else
					{
						this._StatusRef = default(int);
					}
					this.SendPropertyChanged("FxCompiledStatuses");
				}
			}
		}
		
		[Association(Name="FK_tblCompiledAnswers_tblCompiledQuestionsData", Storage="_TblCompiledQuestionsData", ThisKey="CompiledQuestionsDataRef", IsForeignKey=true)]
		public TblCompiledQuestionsData TblCompiledQuestionsData
		{
			get
			{
				return this._TblCompiledQuestionsData.Entity;
			}
			set
			{
				TblCompiledQuestionsData previousValue = this._TblCompiledQuestionsData.Entity;
				if (((previousValue != value) 
							|| (this._TblCompiledQuestionsData.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCompiledQuestionsData.Entity = null;
						previousValue.TblCompiledAnswers.Remove(this);
					}
					this._TblCompiledQuestionsData.Entity = value;
					if ((value != null))
					{
						value.TblCompiledAnswers.Add(this);
						this._CompiledQuestionsDataRef = value.ID;
					}
					else
					{
						this._CompiledQuestionsDataRef = default(int);
					}
					this.SendPropertyChanged("TblCompiledQuestionsData");
				}
			}
		}
		
		[Association(Name="FK_tblCompiledAnswers_tblUserAnswers", Storage="_TblUserAnswers", ThisKey="UserAnswerRef", IsForeignKey=true)]
		public TblUserAnswers TblUserAnswers
		{
			get
			{
				return this._TblUserAnswers.Entity;
			}
			set
			{
				TblUserAnswers previousValue = this._TblUserAnswers.Entity;
				if (((previousValue != value) 
							|| (this._TblUserAnswers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUserAnswers.Entity = null;
						previousValue.TblCompiledAnswers.Remove(this);
					}
					this._TblUserAnswers.Entity = value;
					if ((value != null))
					{
						value.TblCompiledAnswers.Add(this);
						this._UserAnswerRef = value.ID;
					}
					else
					{
						this._UserAnswerRef = default(int);
					}
					this.SendPropertyChanged("TblUserAnswers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="dbo.tblCompiledQuestions")]
	public partial class TblCompiledQuestions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _LanguageRef;
		
		private System.Nullable<int> _TimeLimit;
		
		private System.Nullable<int> _MemoryLimit;
		
		private System.Nullable<int> _OutputLimit;
		
		private short _SysState;
		
		private EntityRef<FxLanguages> _FxLanguages;
		
		private EntitySet<TblCompiledQuestionsData> _TblCompiledQuestionsData;
		
		private EntitySet<TblQuestions> _TblQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnLanguageRefChanging(int value);
    partial void OnLanguageRefChanged();
    partial void OnTimeLimitChanging(System.Nullable<int> value);
    partial void OnTimeLimitChanged();
    partial void OnMemoryLimitChanging(System.Nullable<int> value);
    partial void OnMemoryLimitChanged();
    partial void OnOutputLimitChanging(System.Nullable<int> value);
    partial void OnOutputLimitChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblCompiledQuestions()
		{
			this._FxLanguages = default(EntityRef<FxLanguages>);
			this._TblCompiledQuestionsData = new EntitySet<TblCompiledQuestionsData>(new Action<TblCompiledQuestionsData>(this.attach_TblCompiledQuestionsData), new Action<TblCompiledQuestionsData>(this.detach_TblCompiledQuestionsData));
			this._TblQuestions = new EntitySet<TblQuestions>(new Action<TblQuestions>(this.attach_TblQuestions), new Action<TblQuestions>(this.detach_TblQuestions));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_LanguageRef", DbType="Int NOT NULL")]
		public int LanguageRef
		{
			get
			{
				return this._LanguageRef;
			}
			set
			{
				if ((this._LanguageRef != value))
				{
					if (this._FxLanguages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLanguageRefChanging(value);
					this.SendPropertyChanging();
					this._LanguageRef = value;
					this.SendPropertyChanged("LanguageRef");
					this.OnLanguageRefChanged();
				}
			}
		}
		
		[Column(Storage="_TimeLimit", DbType="Int")]
		public System.Nullable<int> TimeLimit
		{
			get
			{
				return this._TimeLimit;
			}
			set
			{
				if ((this._TimeLimit != value))
				{
					this.OnTimeLimitChanging(value);
					this.SendPropertyChanging();
					this._TimeLimit = value;
					this.SendPropertyChanged("TimeLimit");
					this.OnTimeLimitChanged();
				}
			}
		}
		
		[Column(Storage="_MemoryLimit", DbType="Int")]
		public System.Nullable<int> MemoryLimit
		{
			get
			{
				return this._MemoryLimit;
			}
			set
			{
				if ((this._MemoryLimit != value))
				{
					this.OnMemoryLimitChanging(value);
					this.SendPropertyChanging();
					this._MemoryLimit = value;
					this.SendPropertyChanged("MemoryLimit");
					this.OnMemoryLimitChanged();
				}
			}
		}
		
		[Column(Storage="_OutputLimit", DbType="Int")]
		public System.Nullable<int> OutputLimit
		{
			get
			{
				return this._OutputLimit;
			}
			set
			{
				if ((this._OutputLimit != value))
				{
					this.OnOutputLimitChanging(value);
					this.SendPropertyChanging();
					this._OutputLimit = value;
					this.SendPropertyChanged("OutputLimit");
					this.OnOutputLimitChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblCompiledQuestions_fxdLanguages", Storage="_FxLanguages", ThisKey="LanguageRef", IsForeignKey=true)]
		public FxLanguages FxLanguages
		{
			get
			{
				return this._FxLanguages.Entity;
			}
			set
			{
				FxLanguages previousValue = this._FxLanguages.Entity;
				if (((previousValue != value) 
							|| (this._FxLanguages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxLanguages.Entity = null;
						previousValue.TblCompiledQuestions.Remove(this);
					}
					this._FxLanguages.Entity = value;
					if ((value != null))
					{
						value.TblCompiledQuestions.Add(this);
						this._LanguageRef = value.ID;
					}
					else
					{
						this._LanguageRef = default(int);
					}
					this.SendPropertyChanged("FxLanguages");
				}
			}
		}
		
		[Association(Name="FK_tblCompiledQuestionsData_tblCompiledQuestions", Storage="_TblCompiledQuestionsData", OtherKey="CompiledQuestionRef", DeleteRule="NO ACTION")]
		public EntitySet<TblCompiledQuestionsData> TblCompiledQuestionsData
		{
			get
			{
				return this._TblCompiledQuestionsData;
			}
			set
			{
				this._TblCompiledQuestionsData.Assign(value);
			}
		}
		
		[Association(Name="FK_tblQuestions_tblCompiledQuestions", Storage="_TblQuestions", OtherKey="CompiledQuestionRef", DeleteRule="NO ACTION")]
		public EntitySet<TblQuestions> TblQuestions
		{
			get
			{
				return this._TblQuestions;
			}
			set
			{
				this._TblQuestions.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblCompiledQuestionsData(TblCompiledQuestionsData entity)
		{
			this.SendPropertyChanging();
			entity.TblCompiledQuestions = this;
		}
		
		private void detach_TblCompiledQuestionsData(TblCompiledQuestionsData entity)
		{
			this.SendPropertyChanging();
			entity.TblCompiledQuestions = null;
		}
		
		private void attach_TblQuestions(TblQuestions entity)
		{
			this.SendPropertyChanging();
			entity.TblCompiledQuestions = this;
		}
		
		private void detach_TblQuestions(TblQuestions entity)
		{
			this.SendPropertyChanging();
			entity.TblCompiledQuestions = null;
		}
	}
	
	[Table(Name="dbo.tblCompiledQuestionsData")]
	public partial class TblCompiledQuestionsData : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CompiledQuestionRef;
		
		private string _Input;
		
		private string _Output;
		
		private short _SysState;
		
		private EntitySet<TblCompiledAnswers> _TblCompiledAnswers;
		
		private EntityRef<TblCompiledQuestions> _TblCompiledQuestions;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCompiledQuestionRefChanging(int value);
    partial void OnCompiledQuestionRefChanged();
    partial void OnInputChanging(string value);
    partial void OnInputChanged();
    partial void OnOutputChanging(string value);
    partial void OnOutputChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblCompiledQuestionsData()
		{
			this._TblCompiledAnswers = new EntitySet<TblCompiledAnswers>(new Action<TblCompiledAnswers>(this.attach_TblCompiledAnswers), new Action<TblCompiledAnswers>(this.detach_TblCompiledAnswers));
			this._TblCompiledQuestions = default(EntityRef<TblCompiledQuestions>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CompiledQuestionRef", DbType="Int NOT NULL")]
		public int CompiledQuestionRef
		{
			get
			{
				return this._CompiledQuestionRef;
			}
			set
			{
				if ((this._CompiledQuestionRef != value))
				{
					if (this._TblCompiledQuestions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompiledQuestionRefChanging(value);
					this.SendPropertyChanging();
					this._CompiledQuestionRef = value;
					this.SendPropertyChanged("CompiledQuestionRef");
					this.OnCompiledQuestionRefChanged();
				}
			}
		}
		
		[Column(Storage="_Input", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Input
		{
			get
			{
				return this._Input;
			}
			set
			{
				if ((this._Input != value))
				{
					this.OnInputChanging(value);
					this.SendPropertyChanging();
					this._Input = value;
					this.SendPropertyChanged("Input");
					this.OnInputChanged();
				}
			}
		}
		
		[Column(Storage="_Output", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Output
		{
			get
			{
				return this._Output;
			}
			set
			{
				if ((this._Output != value))
				{
					this.OnOutputChanging(value);
					this.SendPropertyChanging();
					this._Output = value;
					this.SendPropertyChanged("Output");
					this.OnOutputChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblCompiledAnswers_tblCompiledQuestionsData", Storage="_TblCompiledAnswers", OtherKey="CompiledQuestionsDataRef", DeleteRule="NO ACTION")]
		public EntitySet<TblCompiledAnswers> TblCompiledAnswers
		{
			get
			{
				return this._TblCompiledAnswers;
			}
			set
			{
				this._TblCompiledAnswers.Assign(value);
			}
		}
		
		[Association(Name="FK_tblCompiledQuestionsData_tblCompiledQuestions", Storage="_TblCompiledQuestions", ThisKey="CompiledQuestionRef", IsForeignKey=true)]
		public TblCompiledQuestions TblCompiledQuestions
		{
			get
			{
				return this._TblCompiledQuestions.Entity;
			}
			set
			{
				TblCompiledQuestions previousValue = this._TblCompiledQuestions.Entity;
				if (((previousValue != value) 
							|| (this._TblCompiledQuestions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCompiledQuestions.Entity = null;
						previousValue.TblCompiledQuestionsData.Remove(this);
					}
					this._TblCompiledQuestions.Entity = value;
					if ((value != null))
					{
						value.TblCompiledQuestionsData.Add(this);
						this._CompiledQuestionRef = value.ID;
					}
					else
					{
						this._CompiledQuestionRef = default(int);
					}
					this.SendPropertyChanged("TblCompiledQuestions");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblCompiledAnswers(TblCompiledAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblCompiledQuestionsData = this;
		}
		
		private void detach_TblCompiledAnswers(TblCompiledAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblCompiledQuestionsData = null;
		}
	}
	
	[Table(Name="dbo.tblCourses")]
	public partial class TblCourses : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _UploadDate;
		
		private System.Nullable<int> _Version;
		
		private short _SysState;
		
		private EntitySet<TblThemes> _TblThemes;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<TblOrganizations> _TblOrganizations;
		
		private EntitySet<TblResources> _TblResources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnUploadDateChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateChanged();
    partial void OnVersionChanging(System.Nullable<int> value);
    partial void OnVersionChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblCourses()
		{
			this._TblThemes = new EntitySet<TblThemes>(new Action<TblThemes>(this.attach_TblThemes), new Action<TblThemes>(this.detach_TblThemes));
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._TblOrganizations = new EntitySet<TblOrganizations>(new Action<TblOrganizations>(this.attach_TblOrganizations), new Action<TblOrganizations>(this.detach_TblOrganizations));
			this._TblResources = new EntitySet<TblResources>(new Action<TblResources>(this.attach_TblResources), new Action<TblResources>(this.detach_TblResources));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_UploadDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> UploadDate
		{
			get
			{
				return this._UploadDate;
			}
			set
			{
				if ((this._UploadDate != value))
				{
					this.OnUploadDateChanging(value);
					this.SendPropertyChanging();
					this._UploadDate = value;
					this.SendPropertyChanged("UploadDate");
					this.OnUploadDateChanged();
				}
			}
		}
		
		[Column(Storage="_Version", DbType="Int")]
		public System.Nullable<int> Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Chapter_Course", Storage="_TblThemes", OtherKey="CourseRef", DeleteRule="NO ACTION")]
		public EntitySet<TblThemes> TblThemes
		{
			get
			{
				return this._TblThemes;
			}
			set
			{
				this._TblThemes.Assign(value);
			}
		}
		
		[Association(Name="FK_Permissions_Courses", Storage="_TblPermissions", OtherKey="CourseRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_tblOrganizations_tblCourses", Storage="_TblOrganizations", OtherKey="CourseRef", DeleteRule="NO ACTION")]
		public EntitySet<TblOrganizations> TblOrganizations
		{
			get
			{
				return this._TblOrganizations;
			}
			set
			{
				this._TblOrganizations.Assign(value);
			}
		}
		
		[Association(Name="FK_tblResources_tblCourses", Storage="_TblResources", OtherKey="CourseRef", DeleteRule="NO ACTION")]
		public EntitySet<TblResources> TblResources
		{
			get
			{
				return this._TblResources;
			}
			set
			{
				this._TblResources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = this;
		}
		
		private void detach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = null;
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = null;
		}
		
		private void attach_TblOrganizations(TblOrganizations entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = this;
		}
		
		private void detach_TblOrganizations(TblOrganizations entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = null;
		}
		
		private void attach_TblResources(TblResources entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = this;
		}
		
		private void detach_TblResources(TblResources entity)
		{
			this.SendPropertyChanging();
			entity.TblCourses = null;
		}
	}
	
	[Table(Name="dbo.tblCurriculums")]
	public partial class TblCurriculums : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<TblStages> _TblStages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblCurriculums()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._TblStages = new EntitySet<TblStages>(new Action<TblStages>(this.attach_TblStages), new Action<TblStages>(this.detach_TblStages));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_Curriculums", Storage="_TblPermissions", OtherKey="CurriculumRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_tblStages_tblCurriculums", Storage="_TblStages", OtherKey="CurriculumRef", DeleteRule="NO ACTION")]
		public EntitySet<TblStages> TblStages
		{
			get
			{
				return this._TblStages;
			}
			set
			{
				this._TblStages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblCurriculums = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblCurriculums = null;
		}
		
		private void attach_TblStages(TblStages entity)
		{
			this.SendPropertyChanging();
			entity.TblCurriculums = this;
		}
		
		private void detach_TblStages(TblStages entity)
		{
			this.SendPropertyChanging();
			entity.TblCurriculums = null;
		}
	}
	
	[Table(Name="dbo.tblFiles")]
	public partial class TblFiles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Path;
		
		private int _SysState;
		
		private EntitySet<RelResourcesFiles> _RelResourcesFiles;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPathChanging(string value);
    partial void OnPathChanged();
    partial void OnSysStateChanging(int value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblFiles()
		{
			this._RelResourcesFiles = new EntitySet<RelResourcesFiles>(new Action<RelResourcesFiles>(this.attach_RelResourcesFiles), new Action<RelResourcesFiles>(this.detach_RelResourcesFiles));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Path", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Path
		{
			get
			{
				return this._Path;
			}
			set
			{
				if ((this._Path != value))
				{
					this.OnPathChanging(value);
					this.SendPropertyChanging();
					this._Path = value;
					this.SendPropertyChanged("Path");
					this.OnPathChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="Int NOT NULL")]
		public int SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_relResourcesFiles_tblFiles", Storage="_RelResourcesFiles", OtherKey="FileRef", DeleteRule="NO ACTION")]
		public EntitySet<RelResourcesFiles> RelResourcesFiles
		{
			get
			{
				return this._RelResourcesFiles;
			}
			set
			{
				this._RelResourcesFiles.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelResourcesFiles(RelResourcesFiles entity)
		{
			this.SendPropertyChanging();
			entity.TblFiles = this;
		}
		
		private void detach_RelResourcesFiles(RelResourcesFiles entity)
		{
			this.SendPropertyChanging();
			entity.TblFiles = null;
		}
	}
	
	[Table(Name="dbo.tblGroups")]
	public partial class TblGroups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private short _SysState;
		
		private EntitySet<RelUserGroups> _RelUserGroups;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<TblPermissions> _Permissions_Groups;
		
		private EntitySet<TblPermissions> _Permissions_OwnerGroup;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblGroups()
		{
			this._RelUserGroups = new EntitySet<RelUserGroups>(new Action<RelUserGroups>(this.attach_RelUserGroups), new Action<RelUserGroups>(this.detach_RelUserGroups));
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._Permissions_Groups = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_Permissions_Groups), new Action<TblPermissions>(this.detach_Permissions_Groups));
			this._Permissions_OwnerGroup = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_Permissions_OwnerGroup), new Action<TblPermissions>(this.detach_Permissions_OwnerGroup));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_GROUP", Storage="_RelUserGroups", OtherKey="GroupRef", DeleteRule="NO ACTION")]
		public EntitySet<RelUserGroups> RelUserGroups
		{
			get
			{
				return this._RelUserGroups;
			}
			set
			{
				this._RelUserGroups.Assign(value);
			}
		}
		
		[Association(Name="FK_Permissions_GroupObjects", Storage="_TblPermissions", OtherKey="GroupObjectRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_Permissions_Groups", Storage="_Permissions_Groups", OtherKey="GroupRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> Permissions_Groups
		{
			get
			{
				return this._Permissions_Groups;
			}
			set
			{
				this._Permissions_Groups.Assign(value);
			}
		}
		
		[Association(Name="FK_Permissions_OwnerGroup", Storage="_Permissions_OwnerGroup", OtherKey="OwnerGroupRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> Permissions_OwnerGroup
		{
			get
			{
				return this._Permissions_OwnerGroup;
			}
			set
			{
				this._Permissions_OwnerGroup.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelUserGroups(RelUserGroups entity)
		{
			this.SendPropertyChanging();
			entity.TblGroups = this;
		}
		
		private void detach_RelUserGroups(RelUserGroups entity)
		{
			this.SendPropertyChanging();
			entity.TblGroups = null;
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblGroups = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblGroups = null;
		}
		
		private void attach_Permissions_Groups(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.GroupRefTblGroups = this;
		}
		
		private void detach_Permissions_Groups(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.GroupRefTblGroups = null;
		}
		
		private void attach_Permissions_OwnerGroup(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.OwnerGroupRefTblGroups = this;
		}
		
		private void detach_Permissions_OwnerGroup(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.OwnerGroupRefTblGroups = null;
		}
	}
	
	[Table(Name="dbo.tblItems")]
	public partial class TblItems : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PID;
		
		private int _OrganizationRef;
		
		private System.Nullable<int> _ResourceRef;
		
		private string _Title;
		
		private bool _IsLeaf;
		
		private int _SysState;
		
		private EntityRef<TblItems> _TblItems_tblItems;
		
		private EntitySet<TblItems> _TblItems_tblItems1;
		
		private EntityRef<TblOrganizations> _TblOrganizations;
		
		private EntityRef<TblResources> _TblResources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPIDChanging(System.Nullable<int> value);
    partial void OnPIDChanged();
    partial void OnOrganizationRefChanging(int value);
    partial void OnOrganizationRefChanged();
    partial void OnResourceRefChanging(System.Nullable<int> value);
    partial void OnResourceRefChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnIsLeafChanging(bool value);
    partial void OnIsLeafChanged();
    partial void OnSysStateChanging(int value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblItems()
		{
			this._TblItems_tblItems = default(EntityRef<TblItems>);
			this._TblItems_tblItems1 = new EntitySet<TblItems>(new Action<TblItems>(this.attach_TblItems_tblItems1), new Action<TblItems>(this.detach_TblItems_tblItems1));
			this._TblOrganizations = default(EntityRef<TblOrganizations>);
			this._TblResources = default(EntityRef<TblResources>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PID", DbType="Int")]
		public System.Nullable<int> PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					if (this._TblItems_tblItems.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[Column(Storage="_OrganizationRef", DbType="Int NOT NULL")]
		public int OrganizationRef
		{
			get
			{
				return this._OrganizationRef;
			}
			set
			{
				if ((this._OrganizationRef != value))
				{
					if (this._TblOrganizations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationRefChanging(value);
					this.SendPropertyChanging();
					this._OrganizationRef = value;
					this.SendPropertyChanged("OrganizationRef");
					this.OnOrganizationRefChanged();
				}
			}
		}
		
		[Column(Storage="_ResourceRef", DbType="Int")]
		public System.Nullable<int> ResourceRef
		{
			get
			{
				return this._ResourceRef;
			}
			set
			{
				if ((this._ResourceRef != value))
				{
					if (this._TblResources.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceRefChanging(value);
					this.SendPropertyChanging();
					this._ResourceRef = value;
					this.SendPropertyChanged("ResourceRef");
					this.OnResourceRefChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Storage="_IsLeaf", DbType="Bit NOT NULL")]
		public bool IsLeaf
		{
			get
			{
				return this._IsLeaf;
			}
			set
			{
				if ((this._IsLeaf != value))
				{
					this.OnIsLeafChanging(value);
					this.SendPropertyChanging();
					this._IsLeaf = value;
					this.SendPropertyChanged("IsLeaf");
					this.OnIsLeafChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="Int NOT NULL")]
		public int SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblItems_tblItems", Storage="_TblItems_tblItems", ThisKey="PID", IsForeignKey=true)]
		public TblItems TblItems_tblItems
		{
			get
			{
				return this._TblItems_tblItems.Entity;
			}
			set
			{
				TblItems previousValue = this._TblItems_tblItems.Entity;
				if (((previousValue != value) 
							|| (this._TblItems_tblItems.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblItems_tblItems.Entity = null;
						previousValue.TblItems_tblItems1.Remove(this);
					}
					this._TblItems_tblItems.Entity = value;
					if ((value != null))
					{
						value.TblItems_tblItems1.Add(this);
						this._PID = value.ID;
					}
					else
					{
						this._PID = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblItems_tblItems");
				}
			}
		}
		
		[Association(Name="FK_tblItems_tblItems", Storage="_TblItems_tblItems1", OtherKey="PID", DeleteRule="NO ACTION")]
		public EntitySet<TblItems> TblItems_tblItems1
		{
			get
			{
				return this._TblItems_tblItems1;
			}
			set
			{
				this._TblItems_tblItems1.Assign(value);
			}
		}
		
		[Association(Name="FK_tblItems_tblOrganizations", Storage="_TblOrganizations", ThisKey="OrganizationRef", IsForeignKey=true)]
		public TblOrganizations TblOrganizations
		{
			get
			{
				return this._TblOrganizations.Entity;
			}
			set
			{
				TblOrganizations previousValue = this._TblOrganizations.Entity;
				if (((previousValue != value) 
							|| (this._TblOrganizations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblOrganizations.Entity = null;
						previousValue.TblItems.Remove(this);
					}
					this._TblOrganizations.Entity = value;
					if ((value != null))
					{
						value.TblItems.Add(this);
						this._OrganizationRef = value.ID;
					}
					else
					{
						this._OrganizationRef = default(int);
					}
					this.SendPropertyChanged("TblOrganizations");
				}
			}
		}
		
		[Association(Name="FK_tblItems_tblResources", Storage="_TblResources", ThisKey="ResourceRef", IsForeignKey=true)]
		public TblResources TblResources
		{
			get
			{
				return this._TblResources.Entity;
			}
			set
			{
				TblResources previousValue = this._TblResources.Entity;
				if (((previousValue != value) 
							|| (this._TblResources.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblResources.Entity = null;
						previousValue.TblItems.Remove(this);
					}
					this._TblResources.Entity = value;
					if ((value != null))
					{
						value.TblItems.Add(this);
						this._ResourceRef = value.ID;
					}
					else
					{
						this._ResourceRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblResources");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblItems_tblItems1(TblItems entity)
		{
			this.SendPropertyChanging();
			entity.TblItems_tblItems = this;
		}
		
		private void detach_TblItems_tblItems1(TblItems entity)
		{
			this.SendPropertyChanging();
			entity.TblItems_tblItems = null;
		}
	}
	
	[Table(Name="dbo.tblOrganizations")]
	public partial class TblOrganizations : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CourseRef;
		
		private string _Title;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<TblItems> _TblItems;
		
		private EntityRef<TblCourses> _TblCourses;
		
		private EntitySet<TblThemes> _TblThemes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCourseRefChanging(int value);
    partial void OnCourseRefChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblOrganizations()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._TblItems = new EntitySet<TblItems>(new Action<TblItems>(this.attach_TblItems), new Action<TblItems>(this.detach_TblItems));
			this._TblCourses = default(EntityRef<TblCourses>);
			this._TblThemes = new EntitySet<TblThemes>(new Action<TblThemes>(this.attach_TblThemes), new Action<TblThemes>(this.detach_TblThemes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseRef", DbType="Int NOT NULL")]
		public int CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._TblCourses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[Column(Storage="_Title", DbType="NVarChar(200)")]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_Organizations", Storage="_TblPermissions", OtherKey="OrganizationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_tblItems_tblOrganizations", Storage="_TblItems", OtherKey="OrganizationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblItems> TblItems
		{
			get
			{
				return this._TblItems;
			}
			set
			{
				this._TblItems.Assign(value);
			}
		}
		
		[Association(Name="FK_tblOrganizations_tblCourses", Storage="_TblCourses", ThisKey="CourseRef", IsForeignKey=true)]
		public TblCourses TblCourses
		{
			get
			{
				return this._TblCourses.Entity;
			}
			set
			{
				TblCourses previousValue = this._TblCourses.Entity;
				if (((previousValue != value) 
							|| (this._TblCourses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCourses.Entity = null;
						previousValue.TblOrganizations.Remove(this);
					}
					this._TblCourses.Entity = value;
					if ((value != null))
					{
						value.TblOrganizations.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(int);
					}
					this.SendPropertyChanged("TblCourses");
				}
			}
		}
		
		[Association(Name="FK_tblThemes_tblOrganizations", Storage="_TblThemes", OtherKey="OrganizationRef", DeleteRule="NO ACTION")]
		public EntitySet<TblThemes> TblThemes
		{
			get
			{
				return this._TblThemes;
			}
			set
			{
				this._TblThemes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblOrganizations = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblOrganizations = null;
		}
		
		private void attach_TblItems(TblItems entity)
		{
			this.SendPropertyChanging();
			entity.TblOrganizations = this;
		}
		
		private void detach_TblItems(TblItems entity)
		{
			this.SendPropertyChanging();
			entity.TblOrganizations = null;
		}
		
		private void attach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblOrganizations = this;
		}
		
		private void detach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblOrganizations = null;
		}
	}
	
	[Table(Name="dbo.tblPermissions")]
	public partial class TblPermissions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private bool _CanBeDelagated;
		
		private System.Nullable<int> _CourseRef;
		
		private System.Nullable<int> _CourseOperationRef;
		
		private System.Nullable<int> _CurriculumRef;
		
		private System.Nullable<int> _CurriculumOperationRef;
		
		private System.Nullable<int> _StageRef;
		
		private System.Nullable<int> _StageOperationRef;
		
		private System.Nullable<int> _ThemeRef;
		
		private System.Nullable<int> _ThemeOperationRef;
		
		private System.Nullable<int> _PageRef;
		
		private System.Nullable<int> _PageOperationRef;
		
		private System.Nullable<int> _UserObjectRef;
		
		private System.Nullable<int> _GroupObjectRef;
		
		private System.Nullable<int> _GroupRef;
		
		private System.Nullable<int> _GroupOperationRef;
		
		private System.Nullable<int> _OrganizationRef;
		
		private short _SysState;
		
		private EntityRef<TblPermissions> _ParentPermitionRefTblPermissions;
		
		private EntitySet<TblPermissions> _PARENT_PERMITION;
		
		private EntityRef<FxCourseOperations> _FxCourseOperations;
		
		private EntityRef<TblCourses> _TblCourses;
		
		private EntityRef<FxCurriculumOperations> _FxCurriculumOperations;
		
		private EntityRef<TblCurriculums> _TblCurriculums;
		
		private EntityRef<TblGroups> _TblGroups;
		
		private EntityRef<FxGroupOperations> _FxGroupOperations;
		
		private EntityRef<TblGroups> _GroupRefTblGroups;
		
		private EntityRef<TblOrganizations> _TblOrganizations;
		
		private EntityRef<TblGroups> _OwnerGroupRefTblGroups;
		
		private EntityRef<TblUsers> _TblUsers;
		
		private EntityRef<FxPageOperations> _FxPageOperations;
		
		private EntityRef<FxStageOperations> _FxStageOperations;
		
		private EntityRef<TblStages> _TblStages;
		
		private EntityRef<FxThemeOperations> _FxThemeOperations;
		
		private EntityRef<TblThemes> _TblThemes;
		
		private EntityRef<TblUsers> _UserObjectRefTblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnParentPermitionRefChanging(System.Nullable<int> value);
    partial void OnParentPermitionRefChanged();
    partial void OnDateSinceChanging(System.Nullable<System.DateTime> value);
    partial void OnDateSinceChanged();
    partial void OnDateTillChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTillChanged();
    partial void OnOwnerUserRefChanging(System.Nullable<int> value);
    partial void OnOwnerUserRefChanged();
    partial void OnOwnerGroupRefChanging(System.Nullable<int> value);
    partial void OnOwnerGroupRefChanged();
    partial void OnCanBeDelagatedChanging(bool value);
    partial void OnCanBeDelagatedChanged();
    partial void OnCourseRefChanging(System.Nullable<int> value);
    partial void OnCourseRefChanged();
    partial void OnCourseOperationRefChanging(System.Nullable<int> value);
    partial void OnCourseOperationRefChanged();
    partial void OnCurriculumRefChanging(System.Nullable<int> value);
    partial void OnCurriculumRefChanged();
    partial void OnCurriculumOperationRefChanging(System.Nullable<int> value);
    partial void OnCurriculumOperationRefChanged();
    partial void OnStageRefChanging(System.Nullable<int> value);
    partial void OnStageRefChanged();
    partial void OnStageOperationRefChanging(System.Nullable<int> value);
    partial void OnStageOperationRefChanged();
    partial void OnThemeRefChanging(System.Nullable<int> value);
    partial void OnThemeRefChanged();
    partial void OnThemeOperationRefChanging(System.Nullable<int> value);
    partial void OnThemeOperationRefChanged();
    partial void OnPageRefChanging(System.Nullable<int> value);
    partial void OnPageRefChanged();
    partial void OnPageOperationRefChanging(System.Nullable<int> value);
    partial void OnPageOperationRefChanged();
    partial void OnUserObjectRefChanging(System.Nullable<int> value);
    partial void OnUserObjectRefChanged();
    partial void OnGroupObjectRefChanging(System.Nullable<int> value);
    partial void OnGroupObjectRefChanged();
    partial void OnGroupRefChanging(System.Nullable<int> value);
    partial void OnGroupRefChanged();
    partial void OnGroupOperationRefChanging(System.Nullable<int> value);
    partial void OnGroupOperationRefChanged();
    partial void OnOrganizationRefChanging(System.Nullable<int> value);
    partial void OnOrganizationRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblPermissions()
		{
			this._ParentPermitionRefTblPermissions = default(EntityRef<TblPermissions>);
			this._PARENT_PERMITION = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_PARENT_PERMITION), new Action<TblPermissions>(this.detach_PARENT_PERMITION));
			this._FxCourseOperations = default(EntityRef<FxCourseOperations>);
			this._TblCourses = default(EntityRef<TblCourses>);
			this._FxCurriculumOperations = default(EntityRef<FxCurriculumOperations>);
			this._TblCurriculums = default(EntityRef<TblCurriculums>);
			this._TblGroups = default(EntityRef<TblGroups>);
			this._FxGroupOperations = default(EntityRef<FxGroupOperations>);
			this._GroupRefTblGroups = default(EntityRef<TblGroups>);
			this._TblOrganizations = default(EntityRef<TblOrganizations>);
			this._OwnerGroupRefTblGroups = default(EntityRef<TblGroups>);
			this._TblUsers = default(EntityRef<TblUsers>);
			this._FxPageOperations = default(EntityRef<FxPageOperations>);
			this._FxStageOperations = default(EntityRef<FxStageOperations>);
			this._TblStages = default(EntityRef<TblStages>);
			this._FxThemeOperations = default(EntityRef<FxThemeOperations>);
			this._TblThemes = default(EntityRef<TblThemes>);
			this._UserObjectRefTblUsers = default(EntityRef<TblUsers>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					if (this._ParentPermitionRefTblPermissions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentPermitionRefChanging(value);
					this.SendPropertyChanging();
					this._ParentPermitionRef = value;
					this.SendPropertyChanged("ParentPermitionRef");
					this.OnParentPermitionRefChanged();
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this.OnDateSinceChanging(value);
					this.SendPropertyChanging();
					this._DateSince = value;
					this.SendPropertyChanged("DateSince");
					this.OnDateSinceChanged();
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this.OnDateTillChanging(value);
					this.SendPropertyChanging();
					this._DateTill = value;
					this.SendPropertyChanged("DateTill");
					this.OnDateTillChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					if (this._TblUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerUserRefChanging(value);
					this.SendPropertyChanging();
					this._OwnerUserRef = value;
					this.SendPropertyChanged("OwnerUserRef");
					this.OnOwnerUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					if (this._OwnerGroupRefTblGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerGroupRefChanging(value);
					this.SendPropertyChanging();
					this._OwnerGroupRef = value;
					this.SendPropertyChanged("OwnerGroupRef");
					this.OnOwnerGroupRefChanged();
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit NOT NULL")]
		public bool CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this.OnCanBeDelagatedChanging(value);
					this.SendPropertyChanging();
					this._CanBeDelagated = value;
					this.SendPropertyChanged("CanBeDelagated");
					this.OnCanBeDelagatedChanged();
				}
			}
		}
		
		[Column(Storage="_CourseRef", DbType="Int")]
		public System.Nullable<int> CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._TblCourses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[Column(Storage="_CourseOperationRef", DbType="Int")]
		public System.Nullable<int> CourseOperationRef
		{
			get
			{
				return this._CourseOperationRef;
			}
			set
			{
				if ((this._CourseOperationRef != value))
				{
					if (this._FxCourseOperations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseOperationRefChanging(value);
					this.SendPropertyChanging();
					this._CourseOperationRef = value;
					this.SendPropertyChanged("CourseOperationRef");
					this.OnCourseOperationRefChanged();
				}
			}
		}
		
		[Column(Storage="_CurriculumRef", DbType="Int")]
		public System.Nullable<int> CurriculumRef
		{
			get
			{
				return this._CurriculumRef;
			}
			set
			{
				if ((this._CurriculumRef != value))
				{
					if (this._TblCurriculums.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumRefChanging(value);
					this.SendPropertyChanging();
					this._CurriculumRef = value;
					this.SendPropertyChanged("CurriculumRef");
					this.OnCurriculumRefChanged();
				}
			}
		}
		
		[Column(Storage="_CurriculumOperationRef", DbType="Int")]
		public System.Nullable<int> CurriculumOperationRef
		{
			get
			{
				return this._CurriculumOperationRef;
			}
			set
			{
				if ((this._CurriculumOperationRef != value))
				{
					if (this._FxCurriculumOperations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumOperationRefChanging(value);
					this.SendPropertyChanging();
					this._CurriculumOperationRef = value;
					this.SendPropertyChanged("CurriculumOperationRef");
					this.OnCurriculumOperationRefChanged();
				}
			}
		}
		
		[Column(Storage="_StageRef", DbType="Int")]
		public System.Nullable<int> StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					if (this._TblStages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStageRefChanging(value);
					this.SendPropertyChanging();
					this._StageRef = value;
					this.SendPropertyChanged("StageRef");
					this.OnStageRefChanged();
				}
			}
		}
		
		[Column(Storage="_StageOperationRef", DbType="Int")]
		public System.Nullable<int> StageOperationRef
		{
			get
			{
				return this._StageOperationRef;
			}
			set
			{
				if ((this._StageOperationRef != value))
				{
					if (this._FxStageOperations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStageOperationRefChanging(value);
					this.SendPropertyChanging();
					this._StageOperationRef = value;
					this.SendPropertyChanged("StageOperationRef");
					this.OnStageOperationRefChanged();
				}
			}
		}
		
		[Column(Storage="_ThemeRef", DbType="Int")]
		public System.Nullable<int> ThemeRef
		{
			get
			{
				return this._ThemeRef;
			}
			set
			{
				if ((this._ThemeRef != value))
				{
					if (this._TblThemes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeRefChanging(value);
					this.SendPropertyChanging();
					this._ThemeRef = value;
					this.SendPropertyChanged("ThemeRef");
					this.OnThemeRefChanged();
				}
			}
		}
		
		[Column(Storage="_ThemeOperationRef", DbType="Int")]
		public System.Nullable<int> ThemeOperationRef
		{
			get
			{
				return this._ThemeOperationRef;
			}
			set
			{
				if ((this._ThemeOperationRef != value))
				{
					if (this._FxThemeOperations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnThemeOperationRefChanging(value);
					this.SendPropertyChanging();
					this._ThemeOperationRef = value;
					this.SendPropertyChanged("ThemeOperationRef");
					this.OnThemeOperationRefChanged();
				}
			}
		}
		
		[Column(Storage="_PageRef", DbType="Int")]
		public System.Nullable<int> PageRef
		{
			get
			{
				return this._PageRef;
			}
			set
			{
				if ((this._PageRef != value))
				{
					this.OnPageRefChanging(value);
					this.SendPropertyChanging();
					this._PageRef = value;
					this.SendPropertyChanged("PageRef");
					this.OnPageRefChanged();
				}
			}
		}
		
		[Column(Storage="_PageOperationRef", DbType="Int")]
		public System.Nullable<int> PageOperationRef
		{
			get
			{
				return this._PageOperationRef;
			}
			set
			{
				if ((this._PageOperationRef != value))
				{
					if (this._FxPageOperations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageOperationRefChanging(value);
					this.SendPropertyChanging();
					this._PageOperationRef = value;
					this.SendPropertyChanged("PageOperationRef");
					this.OnPageOperationRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserObjectRef", DbType="Int")]
		public System.Nullable<int> UserObjectRef
		{
			get
			{
				return this._UserObjectRef;
			}
			set
			{
				if ((this._UserObjectRef != value))
				{
					if (this._UserObjectRefTblUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserObjectRefChanging(value);
					this.SendPropertyChanging();
					this._UserObjectRef = value;
					this.SendPropertyChanged("UserObjectRef");
					this.OnUserObjectRefChanged();
				}
			}
		}
		
		[Column(Storage="_GroupObjectRef", DbType="Int")]
		public System.Nullable<int> GroupObjectRef
		{
			get
			{
				return this._GroupObjectRef;
			}
			set
			{
				if ((this._GroupObjectRef != value))
				{
					if (this._TblGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupObjectRefChanging(value);
					this.SendPropertyChanging();
					this._GroupObjectRef = value;
					this.SendPropertyChanged("GroupObjectRef");
					this.OnGroupObjectRefChanged();
				}
			}
		}
		
		[Column(Storage="_GroupRef", DbType="Int")]
		public System.Nullable<int> GroupRef
		{
			get
			{
				return this._GroupRef;
			}
			set
			{
				if ((this._GroupRef != value))
				{
					if (this._GroupRefTblGroups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupRefChanging(value);
					this.SendPropertyChanging();
					this._GroupRef = value;
					this.SendPropertyChanged("GroupRef");
					this.OnGroupRefChanged();
				}
			}
		}
		
		[Column(Storage="_GroupOperationRef", DbType="Int")]
		public System.Nullable<int> GroupOperationRef
		{
			get
			{
				return this._GroupOperationRef;
			}
			set
			{
				if ((this._GroupOperationRef != value))
				{
					if (this._FxGroupOperations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupOperationRefChanging(value);
					this.SendPropertyChanging();
					this._GroupOperationRef = value;
					this.SendPropertyChanged("GroupOperationRef");
					this.OnGroupOperationRefChanged();
				}
			}
		}
		
		[Column(Storage="_OrganizationRef", DbType="Int")]
		public System.Nullable<int> OrganizationRef
		{
			get
			{
				return this._OrganizationRef;
			}
			set
			{
				if ((this._OrganizationRef != value))
				{
					if (this._TblOrganizations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationRefChanging(value);
					this.SendPropertyChanging();
					this._OrganizationRef = value;
					this.SendPropertyChanged("OrganizationRef");
					this.OnOrganizationRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_PARENT_PERMITION", Storage="_ParentPermitionRefTblPermissions", ThisKey="ParentPermitionRef", IsForeignKey=true)]
		public TblPermissions ParentPermitionRefTblPermissions
		{
			get
			{
				return this._ParentPermitionRefTblPermissions.Entity;
			}
			set
			{
				TblPermissions previousValue = this._ParentPermitionRefTblPermissions.Entity;
				if (((previousValue != value) 
							|| (this._ParentPermitionRefTblPermissions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ParentPermitionRefTblPermissions.Entity = null;
						previousValue.PARENT_PERMITION.Remove(this);
					}
					this._ParentPermitionRefTblPermissions.Entity = value;
					if ((value != null))
					{
						value.PARENT_PERMITION.Add(this);
						this._ParentPermitionRef = value.ID;
					}
					else
					{
						this._ParentPermitionRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("ParentPermitionRefTblPermissions");
				}
			}
		}
		
		[Association(Name="FK_PARENT_PERMITION", Storage="_PARENT_PERMITION", OtherKey="ParentPermitionRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> PARENT_PERMITION
		{
			get
			{
				return this._PARENT_PERMITION;
			}
			set
			{
				this._PARENT_PERMITION.Assign(value);
			}
		}
		
		[Association(Name="FK_Permissions_CourseOperations", Storage="_FxCourseOperations", ThisKey="CourseOperationRef", IsForeignKey=true)]
		public FxCourseOperations FxCourseOperations
		{
			get
			{
				return this._FxCourseOperations.Entity;
			}
			set
			{
				FxCourseOperations previousValue = this._FxCourseOperations.Entity;
				if (((previousValue != value) 
							|| (this._FxCourseOperations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxCourseOperations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._FxCourseOperations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._CourseOperationRef = value.ID;
					}
					else
					{
						this._CourseOperationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxCourseOperations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Courses", Storage="_TblCourses", ThisKey="CourseRef", IsForeignKey=true)]
		public TblCourses TblCourses
		{
			get
			{
				return this._TblCourses.Entity;
			}
			set
			{
				TblCourses previousValue = this._TblCourses.Entity;
				if (((previousValue != value) 
							|| (this._TblCourses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCourses.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblCourses.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCourses");
				}
			}
		}
		
		[Association(Name="FK_Permissions_CurriculumOperations", Storage="_FxCurriculumOperations", ThisKey="CurriculumOperationRef", IsForeignKey=true)]
		public FxCurriculumOperations FxCurriculumOperations
		{
			get
			{
				return this._FxCurriculumOperations.Entity;
			}
			set
			{
				FxCurriculumOperations previousValue = this._FxCurriculumOperations.Entity;
				if (((previousValue != value) 
							|| (this._FxCurriculumOperations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxCurriculumOperations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._FxCurriculumOperations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._CurriculumOperationRef = value.ID;
					}
					else
					{
						this._CurriculumOperationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxCurriculumOperations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Curriculums", Storage="_TblCurriculums", ThisKey="CurriculumRef", IsForeignKey=true)]
		public TblCurriculums TblCurriculums
		{
			get
			{
				return this._TblCurriculums.Entity;
			}
			set
			{
				TblCurriculums previousValue = this._TblCurriculums.Entity;
				if (((previousValue != value) 
							|| (this._TblCurriculums.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCurriculums.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblCurriculums.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._CurriculumRef = value.ID;
					}
					else
					{
						this._CurriculumRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCurriculums");
				}
			}
		}
		
		[Association(Name="FK_Permissions_GroupObjects", Storage="_TblGroups", ThisKey="GroupObjectRef", IsForeignKey=true)]
		public TblGroups TblGroups
		{
			get
			{
				return this._TblGroups.Entity;
			}
			set
			{
				TblGroups previousValue = this._TblGroups.Entity;
				if (((previousValue != value) 
							|| (this._TblGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblGroups.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblGroups.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._GroupObjectRef = value.ID;
					}
					else
					{
						this._GroupObjectRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblGroups");
				}
			}
		}
		
		[Association(Name="FK_Permissions_GroupOperations", Storage="_FxGroupOperations", ThisKey="GroupOperationRef", IsForeignKey=true)]
		public FxGroupOperations FxGroupOperations
		{
			get
			{
				return this._FxGroupOperations.Entity;
			}
			set
			{
				FxGroupOperations previousValue = this._FxGroupOperations.Entity;
				if (((previousValue != value) 
							|| (this._FxGroupOperations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxGroupOperations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._FxGroupOperations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._GroupOperationRef = value.ID;
					}
					else
					{
						this._GroupOperationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxGroupOperations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Groups", Storage="_GroupRefTblGroups", ThisKey="GroupRef", IsForeignKey=true)]
		public TblGroups GroupRefTblGroups
		{
			get
			{
				return this._GroupRefTblGroups.Entity;
			}
			set
			{
				TblGroups previousValue = this._GroupRefTblGroups.Entity;
				if (((previousValue != value) 
							|| (this._GroupRefTblGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GroupRefTblGroups.Entity = null;
						previousValue.Permissions_Groups.Remove(this);
					}
					this._GroupRefTblGroups.Entity = value;
					if ((value != null))
					{
						value.Permissions_Groups.Add(this);
						this._GroupRef = value.ID;
					}
					else
					{
						this._GroupRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("GroupRefTblGroups");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Organizations", Storage="_TblOrganizations", ThisKey="OrganizationRef", IsForeignKey=true)]
		public TblOrganizations TblOrganizations
		{
			get
			{
				return this._TblOrganizations.Entity;
			}
			set
			{
				TblOrganizations previousValue = this._TblOrganizations.Entity;
				if (((previousValue != value) 
							|| (this._TblOrganizations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblOrganizations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblOrganizations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._OrganizationRef = value.ID;
					}
					else
					{
						this._OrganizationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblOrganizations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_OwnerGroup", Storage="_OwnerGroupRefTblGroups", ThisKey="OwnerGroupRef", IsForeignKey=true)]
		public TblGroups OwnerGroupRefTblGroups
		{
			get
			{
				return this._OwnerGroupRefTblGroups.Entity;
			}
			set
			{
				TblGroups previousValue = this._OwnerGroupRefTblGroups.Entity;
				if (((previousValue != value) 
							|| (this._OwnerGroupRefTblGroups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._OwnerGroupRefTblGroups.Entity = null;
						previousValue.Permissions_OwnerGroup.Remove(this);
					}
					this._OwnerGroupRefTblGroups.Entity = value;
					if ((value != null))
					{
						value.Permissions_OwnerGroup.Add(this);
						this._OwnerGroupRef = value.ID;
					}
					else
					{
						this._OwnerGroupRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("OwnerGroupRefTblGroups");
				}
			}
		}
		
		[Association(Name="FK_Permissions_OwnerUser", Storage="_TblUsers", ThisKey="OwnerUserRef", IsForeignKey=true)]
		public TblUsers TblUsers
		{
			get
			{
				return this._TblUsers.Entity;
			}
			set
			{
				TblUsers previousValue = this._TblUsers.Entity;
				if (((previousValue != value) 
							|| (this._TblUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUsers.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblUsers.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._OwnerUserRef = value.ID;
					}
					else
					{
						this._OwnerUserRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblUsers");
				}
			}
		}
		
		[Association(Name="FK_Permissions_PageOperations", Storage="_FxPageOperations", ThisKey="PageOperationRef", IsForeignKey=true)]
		public FxPageOperations FxPageOperations
		{
			get
			{
				return this._FxPageOperations.Entity;
			}
			set
			{
				FxPageOperations previousValue = this._FxPageOperations.Entity;
				if (((previousValue != value) 
							|| (this._FxPageOperations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxPageOperations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._FxPageOperations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._PageOperationRef = value.ID;
					}
					else
					{
						this._PageOperationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxPageOperations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_StageOperations", Storage="_FxStageOperations", ThisKey="StageOperationRef", IsForeignKey=true)]
		public FxStageOperations FxStageOperations
		{
			get
			{
				return this._FxStageOperations.Entity;
			}
			set
			{
				FxStageOperations previousValue = this._FxStageOperations.Entity;
				if (((previousValue != value) 
							|| (this._FxStageOperations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxStageOperations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._FxStageOperations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._StageOperationRef = value.ID;
					}
					else
					{
						this._StageOperationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxStageOperations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Stages", Storage="_TblStages", ThisKey="StageRef", IsForeignKey=true)]
		public TblStages TblStages
		{
			get
			{
				return this._TblStages.Entity;
			}
			set
			{
				TblStages previousValue = this._TblStages.Entity;
				if (((previousValue != value) 
							|| (this._TblStages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblStages.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblStages.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._StageRef = value.ID;
					}
					else
					{
						this._StageRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblStages");
				}
			}
		}
		
		[Association(Name="FK_Permissions_ThemeOperations", Storage="_FxThemeOperations", ThisKey="ThemeOperationRef", IsForeignKey=true)]
		public FxThemeOperations FxThemeOperations
		{
			get
			{
				return this._FxThemeOperations.Entity;
			}
			set
			{
				FxThemeOperations previousValue = this._FxThemeOperations.Entity;
				if (((previousValue != value) 
							|| (this._FxThemeOperations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxThemeOperations.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._FxThemeOperations.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._ThemeOperationRef = value.ID;
					}
					else
					{
						this._ThemeOperationRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxThemeOperations");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Themes", Storage="_TblThemes", ThisKey="ThemeRef", IsForeignKey=true)]
		public TblThemes TblThemes
		{
			get
			{
				return this._TblThemes.Entity;
			}
			set
			{
				TblThemes previousValue = this._TblThemes.Entity;
				if (((previousValue != value) 
							|| (this._TblThemes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblThemes.Entity = null;
						previousValue.TblPermissions.Remove(this);
					}
					this._TblThemes.Entity = value;
					if ((value != null))
					{
						value.TblPermissions.Add(this);
						this._ThemeRef = value.ID;
					}
					else
					{
						this._ThemeRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblThemes");
				}
			}
		}
		
		[Association(Name="FK_Permissions_UserObjects", Storage="_UserObjectRefTblUsers", ThisKey="UserObjectRef", IsForeignKey=true)]
		public TblUsers UserObjectRefTblUsers
		{
			get
			{
				return this._UserObjectRefTblUsers.Entity;
			}
			set
			{
				TblUsers previousValue = this._UserObjectRefTblUsers.Entity;
				if (((previousValue != value) 
							|| (this._UserObjectRefTblUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserObjectRefTblUsers.Entity = null;
						previousValue.Permissions_UserObjects.Remove(this);
					}
					this._UserObjectRefTblUsers.Entity = value;
					if ((value != null))
					{
						value.Permissions_UserObjects.Add(this);
						this._UserObjectRef = value.ID;
					}
					else
					{
						this._UserObjectRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("UserObjectRefTblUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PARENT_PERMITION(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.ParentPermitionRefTblPermissions = this;
		}
		
		private void detach_PARENT_PERMITION(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.ParentPermitionRefTblPermissions = null;
		}
	}
	
	[Table(Name="dbo.tblQuestions")]
	public partial class TblQuestions : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _PageRef;
		
		private string _TestName;
		
		private string _CorrectAnswer;
		
		private System.Nullable<int> _Rank;
		
		private bool _IsCompiled;
		
		private System.Nullable<int> _CompiledQuestionRef;
		
		private short _SysState;
		
		private EntityRef<TblCompiledQuestions> _TblCompiledQuestions;
		
		private EntitySet<TblUserAnswers> _TblUserAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnPageRefChanging(System.Nullable<int> value);
    partial void OnPageRefChanged();
    partial void OnTestNameChanging(string value);
    partial void OnTestNameChanged();
    partial void OnCorrectAnswerChanging(string value);
    partial void OnCorrectAnswerChanged();
    partial void OnRankChanging(System.Nullable<int> value);
    partial void OnRankChanged();
    partial void OnIsCompiledChanging(bool value);
    partial void OnIsCompiledChanged();
    partial void OnCompiledQuestionRefChanging(System.Nullable<int> value);
    partial void OnCompiledQuestionRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblQuestions()
		{
			this._TblCompiledQuestions = default(EntityRef<TblCompiledQuestions>);
			this._TblUserAnswers = new EntitySet<TblUserAnswers>(new Action<TblUserAnswers>(this.attach_TblUserAnswers), new Action<TblUserAnswers>(this.detach_TblUserAnswers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_PageRef", DbType="Int")]
		public System.Nullable<int> PageRef
		{
			get
			{
				return this._PageRef;
			}
			set
			{
				if ((this._PageRef != value))
				{
					this.OnPageRefChanging(value);
					this.SendPropertyChanging();
					this._PageRef = value;
					this.SendPropertyChanged("PageRef");
					this.OnPageRefChanged();
				}
			}
		}
		
		[Column(Storage="_TestName", DbType="NVarChar(50)")]
		public string TestName
		{
			get
			{
				return this._TestName;
			}
			set
			{
				if ((this._TestName != value))
				{
					this.OnTestNameChanging(value);
					this.SendPropertyChanging();
					this._TestName = value;
					this.SendPropertyChanged("TestName");
					this.OnTestNameChanged();
				}
			}
		}
		
		[Column(Storage="_CorrectAnswer", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string CorrectAnswer
		{
			get
			{
				return this._CorrectAnswer;
			}
			set
			{
				if ((this._CorrectAnswer != value))
				{
					this.OnCorrectAnswerChanging(value);
					this.SendPropertyChanging();
					this._CorrectAnswer = value;
					this.SendPropertyChanged("CorrectAnswer");
					this.OnCorrectAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Rank", DbType="Int")]
		public System.Nullable<int> Rank
		{
			get
			{
				return this._Rank;
			}
			set
			{
				if ((this._Rank != value))
				{
					this.OnRankChanging(value);
					this.SendPropertyChanging();
					this._Rank = value;
					this.SendPropertyChanged("Rank");
					this.OnRankChanged();
				}
			}
		}
		
		[Column(Storage="_IsCompiled", DbType="Bit NOT NULL")]
		public bool IsCompiled
		{
			get
			{
				return this._IsCompiled;
			}
			set
			{
				if ((this._IsCompiled != value))
				{
					this.OnIsCompiledChanging(value);
					this.SendPropertyChanging();
					this._IsCompiled = value;
					this.SendPropertyChanged("IsCompiled");
					this.OnIsCompiledChanged();
				}
			}
		}
		
		[Column(Storage="_CompiledQuestionRef", DbType="Int")]
		public System.Nullable<int> CompiledQuestionRef
		{
			get
			{
				return this._CompiledQuestionRef;
			}
			set
			{
				if ((this._CompiledQuestionRef != value))
				{
					if (this._TblCompiledQuestions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompiledQuestionRefChanging(value);
					this.SendPropertyChanging();
					this._CompiledQuestionRef = value;
					this.SendPropertyChanged("CompiledQuestionRef");
					this.OnCompiledQuestionRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_tblQuestions_tblCompiledQuestions", Storage="_TblCompiledQuestions", ThisKey="CompiledQuestionRef", IsForeignKey=true)]
		public TblCompiledQuestions TblCompiledQuestions
		{
			get
			{
				return this._TblCompiledQuestions.Entity;
			}
			set
			{
				TblCompiledQuestions previousValue = this._TblCompiledQuestions.Entity;
				if (((previousValue != value) 
							|| (this._TblCompiledQuestions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCompiledQuestions.Entity = null;
						previousValue.TblQuestions.Remove(this);
					}
					this._TblCompiledQuestions.Entity = value;
					if ((value != null))
					{
						value.TblQuestions.Add(this);
						this._CompiledQuestionRef = value.ID;
					}
					else
					{
						this._CompiledQuestionRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblCompiledQuestions");
				}
			}
		}
		
		[Association(Name="FK_UserAnswer_CorrectAnswer", Storage="_TblUserAnswers", OtherKey="QuestionRef", DeleteRule="NO ACTION")]
		public EntitySet<TblUserAnswers> TblUserAnswers
		{
			get
			{
				return this._TblUserAnswers;
			}
			set
			{
				this._TblUserAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblUserAnswers(TblUserAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblQuestions = this;
		}
		
		private void detach_TblUserAnswers(TblUserAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblQuestions = null;
		}
	}
	
	[Table(Name="dbo.tblResources")]
	public partial class TblResources : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private int _CourseRef;
		
		private string _Identifier;
		
		private string _Type;
		
		private string _Href;
		
		private short _SysState;
		
		private EntitySet<RelResourcesDependency> _RelResourcesDependency;
		
		private EntitySet<RelResourcesDependency> _RelResourcesDependency_tblResources_Dependency;
		
		private EntitySet<RelResourcesFiles> _RelResourcesFiles;
		
		private EntitySet<TblItems> _TblItems;
		
		private EntityRef<TblCourses> _TblCourses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnCourseRefChanging(int value);
    partial void OnCourseRefChanged();
    partial void OnIdentifierChanging(string value);
    partial void OnIdentifierChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    partial void OnHrefChanging(string value);
    partial void OnHrefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblResources()
		{
			this._RelResourcesDependency = new EntitySet<RelResourcesDependency>(new Action<RelResourcesDependency>(this.attach_RelResourcesDependency), new Action<RelResourcesDependency>(this.detach_RelResourcesDependency));
			this._RelResourcesDependency_tblResources_Dependency = new EntitySet<RelResourcesDependency>(new Action<RelResourcesDependency>(this.attach_RelResourcesDependency_tblResources_Dependency), new Action<RelResourcesDependency>(this.detach_RelResourcesDependency_tblResources_Dependency));
			this._RelResourcesFiles = new EntitySet<RelResourcesFiles>(new Action<RelResourcesFiles>(this.attach_RelResourcesFiles), new Action<RelResourcesFiles>(this.detach_RelResourcesFiles));
			this._TblItems = new EntitySet<TblItems>(new Action<TblItems>(this.attach_TblItems), new Action<TblItems>(this.detach_TblItems));
			this._TblCourses = default(EntityRef<TblCourses>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_CourseRef", DbType="Int NOT NULL")]
		public int CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._TblCourses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[Column(Storage="_Identifier", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
		public string Identifier
		{
			get
			{
				return this._Identifier;
			}
			set
			{
				if ((this._Identifier != value))
				{
					this.OnIdentifierChanging(value);
					this.SendPropertyChanging();
					this._Identifier = value;
					this.SendPropertyChanged("Identifier");
					this.OnIdentifierChanged();
				}
			}
		}
		
		[Column(Storage="_Type", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[Column(Storage="_Href", DbType="NVarChar(200)")]
		public string Href
		{
			get
			{
				return this._Href;
			}
			set
			{
				if ((this._Href != value))
				{
					this.OnHrefChanging(value);
					this.SendPropertyChanging();
					this._Href = value;
					this.SendPropertyChanged("Href");
					this.OnHrefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_relResourcesDependency_tblResources_Dependant", Storage="_RelResourcesDependency", OtherKey="DependantRef", DeleteRule="NO ACTION")]
		public EntitySet<RelResourcesDependency> RelResourcesDependency
		{
			get
			{
				return this._RelResourcesDependency;
			}
			set
			{
				this._RelResourcesDependency.Assign(value);
			}
		}
		
		[Association(Name="FK_relResourcesDependency_tblResources_Dependency", Storage="_RelResourcesDependency_tblResources_Dependency", OtherKey="DependencyRef", DeleteRule="NO ACTION")]
		public EntitySet<RelResourcesDependency> RelResourcesDependency_tblResources_Dependency
		{
			get
			{
				return this._RelResourcesDependency_tblResources_Dependency;
			}
			set
			{
				this._RelResourcesDependency_tblResources_Dependency.Assign(value);
			}
		}
		
		[Association(Name="FK_relResourcesFiles_tblResources", Storage="_RelResourcesFiles", OtherKey="ResourceRef", DeleteRule="NO ACTION")]
		public EntitySet<RelResourcesFiles> RelResourcesFiles
		{
			get
			{
				return this._RelResourcesFiles;
			}
			set
			{
				this._RelResourcesFiles.Assign(value);
			}
		}
		
		[Association(Name="FK_tblItems_tblResources", Storage="_TblItems", OtherKey="ResourceRef", DeleteRule="NO ACTION")]
		public EntitySet<TblItems> TblItems
		{
			get
			{
				return this._TblItems;
			}
			set
			{
				this._TblItems.Assign(value);
			}
		}
		
		[Association(Name="FK_tblResources_tblCourses", Storage="_TblCourses", ThisKey="CourseRef", IsForeignKey=true)]
		public TblCourses TblCourses
		{
			get
			{
				return this._TblCourses.Entity;
			}
			set
			{
				TblCourses previousValue = this._TblCourses.Entity;
				if (((previousValue != value) 
							|| (this._TblCourses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCourses.Entity = null;
						previousValue.TblResources.Remove(this);
					}
					this._TblCourses.Entity = value;
					if ((value != null))
					{
						value.TblResources.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(int);
					}
					this.SendPropertyChanged("TblCourses");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RelResourcesDependency(RelResourcesDependency entity)
		{
			this.SendPropertyChanging();
			entity.TblResources = this;
		}
		
		private void detach_RelResourcesDependency(RelResourcesDependency entity)
		{
			this.SendPropertyChanging();
			entity.TblResources = null;
		}
		
		private void attach_RelResourcesDependency_tblResources_Dependency(RelResourcesDependency entity)
		{
			this.SendPropertyChanging();
			entity.DependencyRefTblResources = this;
		}
		
		private void detach_RelResourcesDependency_tblResources_Dependency(RelResourcesDependency entity)
		{
			this.SendPropertyChanging();
			entity.DependencyRefTblResources = null;
		}
		
		private void attach_RelResourcesFiles(RelResourcesFiles entity)
		{
			this.SendPropertyChanging();
			entity.TblResources = this;
		}
		
		private void detach_RelResourcesFiles(RelResourcesFiles entity)
		{
			this.SendPropertyChanging();
			entity.TblResources = null;
		}
		
		private void attach_TblItems(TblItems entity)
		{
			this.SendPropertyChanging();
			entity.TblResources = this;
		}
		
		private void detach_TblItems(TblItems entity)
		{
			this.SendPropertyChanging();
			entity.TblResources = null;
		}
	}
	
	[Table(Name="dbo.tblSampleBusinesObject")]
	public partial class TblSampleBusinesObject
	{
		
		private int _ID;
		
		private string _Name;
		
		private short _SysState;
		
		public TblSampleBusinesObject()
		{
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.Always, DbType="Int NOT NULL IDENTITY", IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this._Name = value;
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this._SysState = value;
				}
			}
		}
	}
	
	[Table(Name="dbo.tblStages")]
	public partial class TblStages : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Description;
		
		private int _CurriculumRef;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<RelStagesThemes> _RelStagesThemes;
		
		private EntityRef<TblCurriculums> _TblCurriculums;
		
		private EntitySet<TblThemes> _TblThemes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCurriculumRefChanging(int value);
    partial void OnCurriculumRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblStages()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._RelStagesThemes = new EntitySet<RelStagesThemes>(new Action<RelStagesThemes>(this.attach_RelStagesThemes), new Action<RelStagesThemes>(this.detach_RelStagesThemes));
			this._TblCurriculums = default(EntityRef<TblCurriculums>);
			this._TblThemes = new EntitySet<TblThemes>(new Action<TblThemes>(this.attach_TblThemes), new Action<TblThemes>(this.detach_TblThemes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_CurriculumRef", DbType="Int NOT NULL")]
		public int CurriculumRef
		{
			get
			{
				return this._CurriculumRef;
			}
			set
			{
				if ((this._CurriculumRef != value))
				{
					if (this._TblCurriculums.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumRefChanging(value);
					this.SendPropertyChanging();
					this._CurriculumRef = value;
					this.SendPropertyChanged("CurriculumRef");
					this.OnCurriculumRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_Stages", Storage="_TblPermissions", OtherKey="StageRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_Stage", Storage="_RelStagesThemes", OtherKey="StageRef", DeleteRule="NO ACTION")]
		public EntitySet<RelStagesThemes> RelStagesThemes
		{
			get
			{
				return this._RelStagesThemes;
			}
			set
			{
				this._RelStagesThemes.Assign(value);
			}
		}
		
		[Association(Name="FK_tblStages_tblCurriculums", Storage="_TblCurriculums", ThisKey="CurriculumRef", IsForeignKey=true)]
		public TblCurriculums TblCurriculums
		{
			get
			{
				return this._TblCurriculums.Entity;
			}
			set
			{
				TblCurriculums previousValue = this._TblCurriculums.Entity;
				if (((previousValue != value) 
							|| (this._TblCurriculums.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCurriculums.Entity = null;
						previousValue.TblStages.Remove(this);
					}
					this._TblCurriculums.Entity = value;
					if ((value != null))
					{
						value.TblStages.Add(this);
						this._CurriculumRef = value.ID;
					}
					else
					{
						this._CurriculumRef = default(int);
					}
					this.SendPropertyChanged("TblCurriculums");
				}
			}
		}
		
		[Association(Name="FK_tblThemes_tblStages", Storage="_TblThemes", OtherKey="StageRef", DeleteRule="NO ACTION")]
		public EntitySet<TblThemes> TblThemes
		{
			get
			{
				return this._TblThemes;
			}
			set
			{
				this._TblThemes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblStages = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblStages = null;
		}
		
		private void attach_RelStagesThemes(RelStagesThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblStages = this;
		}
		
		private void detach_RelStagesThemes(RelStagesThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblStages = null;
		}
		
		private void attach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblStages = this;
		}
		
		private void detach_TblThemes(TblThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblStages = null;
		}
	}
	
	[Table(Name="dbo.tblThemes")]
	public partial class TblThemes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private int _CourseRef;
		
		private int _OrganizationRef;
		
		private int _StageRef;
		
		private bool _IsControl;
		
		private System.Nullable<int> _PageOrderRef;
		
		private short _SysState;
		
		private System.Nullable<int> _PageCountToShow;
		
		private System.Nullable<int> _MaxCountToSubmit;
		
		private EntityRef<TblCourses> _TblCourses;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<TblAttempts> _TblAttempts;
		
		private EntityRef<FxPageOrders> _FxPageOrders;
		
		private EntityRef<TblOrganizations> _TblOrganizations;
		
		private EntityRef<TblStages> _TblStages;
		
		private EntitySet<RelStagesThemes> _RelStagesThemes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCourseRefChanging(int value);
    partial void OnCourseRefChanged();
    partial void OnOrganizationRefChanging(int value);
    partial void OnOrganizationRefChanged();
    partial void OnStageRefChanging(int value);
    partial void OnStageRefChanged();
    partial void OnIsControlChanging(bool value);
    partial void OnIsControlChanged();
    partial void OnPageOrderRefChanging(System.Nullable<int> value);
    partial void OnPageOrderRefChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    partial void OnPageCountToShowChanging(System.Nullable<int> value);
    partial void OnPageCountToShowChanged();
    partial void OnMaxCountToSubmitChanging(System.Nullable<int> value);
    partial void OnMaxCountToSubmitChanged();
    #endregion
		
		public TblThemes()
		{
			this._TblCourses = default(EntityRef<TblCourses>);
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._TblAttempts = new EntitySet<TblAttempts>(new Action<TblAttempts>(this.attach_TblAttempts), new Action<TblAttempts>(this.detach_TblAttempts));
			this._FxPageOrders = default(EntityRef<FxPageOrders>);
			this._TblOrganizations = default(EntityRef<TblOrganizations>);
			this._TblStages = default(EntityRef<TblStages>);
			this._RelStagesThemes = new EntitySet<RelStagesThemes>(new Action<RelStagesThemes>(this.attach_RelStagesThemes), new Action<RelStagesThemes>(this.detach_RelStagesThemes));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_CourseRef", DbType="Int NOT NULL")]
		public int CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					if (this._TblCourses.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[Column(Storage="_OrganizationRef", DbType="Int NOT NULL")]
		public int OrganizationRef
		{
			get
			{
				return this._OrganizationRef;
			}
			set
			{
				if ((this._OrganizationRef != value))
				{
					if (this._TblOrganizations.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationRefChanging(value);
					this.SendPropertyChanging();
					this._OrganizationRef = value;
					this.SendPropertyChanged("OrganizationRef");
					this.OnOrganizationRefChanged();
				}
			}
		}
		
		[Column(Storage="_StageRef", DbType="Int NOT NULL")]
		public int StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					if (this._TblStages.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStageRefChanging(value);
					this.SendPropertyChanging();
					this._StageRef = value;
					this.SendPropertyChanged("StageRef");
					this.OnStageRefChanged();
				}
			}
		}
		
		[Column(Storage="_IsControl", DbType="Bit NOT NULL")]
		public bool IsControl
		{
			get
			{
				return this._IsControl;
			}
			set
			{
				if ((this._IsControl != value))
				{
					this.OnIsControlChanging(value);
					this.SendPropertyChanging();
					this._IsControl = value;
					this.SendPropertyChanged("IsControl");
					this.OnIsControlChanged();
				}
			}
		}
		
		[Column(Storage="_PageOrderRef", DbType="Int")]
		public System.Nullable<int> PageOrderRef
		{
			get
			{
				return this._PageOrderRef;
			}
			set
			{
				if ((this._PageOrderRef != value))
				{
					if (this._FxPageOrders.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPageOrderRefChanging(value);
					this.SendPropertyChanging();
					this._PageOrderRef = value;
					this.SendPropertyChanged("PageOrderRef");
					this.OnPageOrderRefChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Column(Storage="_PageCountToShow", DbType="Int")]
		public System.Nullable<int> PageCountToShow
		{
			get
			{
				return this._PageCountToShow;
			}
			set
			{
				if ((this._PageCountToShow != value))
				{
					this.OnPageCountToShowChanging(value);
					this.SendPropertyChanging();
					this._PageCountToShow = value;
					this.SendPropertyChanged("PageCountToShow");
					this.OnPageCountToShowChanged();
				}
			}
		}
		
		[Column(Storage="_MaxCountToSubmit", DbType="Int")]
		public System.Nullable<int> MaxCountToSubmit
		{
			get
			{
				return this._MaxCountToSubmit;
			}
			set
			{
				if ((this._MaxCountToSubmit != value))
				{
					this.OnMaxCountToSubmitChanging(value);
					this.SendPropertyChanging();
					this._MaxCountToSubmit = value;
					this.SendPropertyChanged("MaxCountToSubmit");
					this.OnMaxCountToSubmitChanged();
				}
			}
		}
		
		[Association(Name="FK_Chapter_Course", Storage="_TblCourses", ThisKey="CourseRef", IsForeignKey=true)]
		public TblCourses TblCourses
		{
			get
			{
				return this._TblCourses.Entity;
			}
			set
			{
				TblCourses previousValue = this._TblCourses.Entity;
				if (((previousValue != value) 
							|| (this._TblCourses.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblCourses.Entity = null;
						previousValue.TblThemes.Remove(this);
					}
					this._TblCourses.Entity = value;
					if ((value != null))
					{
						value.TblThemes.Add(this);
						this._CourseRef = value.ID;
					}
					else
					{
						this._CourseRef = default(int);
					}
					this.SendPropertyChanged("TblCourses");
				}
			}
		}
		
		[Association(Name="FK_Permissions_Themes", Storage="_TblPermissions", OtherKey="ThemeRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_tblAttempts_tblThemes", Storage="_TblAttempts", OtherKey="ThemeRef", DeleteRule="NO ACTION")]
		public EntitySet<TblAttempts> TblAttempts
		{
			get
			{
				return this._TblAttempts;
			}
			set
			{
				this._TblAttempts.Assign(value);
			}
		}
		
		[Association(Name="FK_tblThemes_fxdPageOrders", Storage="_FxPageOrders", ThisKey="PageOrderRef", IsForeignKey=true)]
		public FxPageOrders FxPageOrders
		{
			get
			{
				return this._FxPageOrders.Entity;
			}
			set
			{
				FxPageOrders previousValue = this._FxPageOrders.Entity;
				if (((previousValue != value) 
							|| (this._FxPageOrders.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxPageOrders.Entity = null;
						previousValue.TblThemes.Remove(this);
					}
					this._FxPageOrders.Entity = value;
					if ((value != null))
					{
						value.TblThemes.Add(this);
						this._PageOrderRef = value.ID;
					}
					else
					{
						this._PageOrderRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("FxPageOrders");
				}
			}
		}
		
		[Association(Name="FK_tblThemes_tblOrganizations", Storage="_TblOrganizations", ThisKey="OrganizationRef", IsForeignKey=true)]
		public TblOrganizations TblOrganizations
		{
			get
			{
				return this._TblOrganizations.Entity;
			}
			set
			{
				TblOrganizations previousValue = this._TblOrganizations.Entity;
				if (((previousValue != value) 
							|| (this._TblOrganizations.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblOrganizations.Entity = null;
						previousValue.TblThemes.Remove(this);
					}
					this._TblOrganizations.Entity = value;
					if ((value != null))
					{
						value.TblThemes.Add(this);
						this._OrganizationRef = value.ID;
					}
					else
					{
						this._OrganizationRef = default(int);
					}
					this.SendPropertyChanged("TblOrganizations");
				}
			}
		}
		
		[Association(Name="FK_tblThemes_tblStages", Storage="_TblStages", ThisKey="StageRef", IsForeignKey=true)]
		public TblStages TblStages
		{
			get
			{
				return this._TblStages.Entity;
			}
			set
			{
				TblStages previousValue = this._TblStages.Entity;
				if (((previousValue != value) 
							|| (this._TblStages.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblStages.Entity = null;
						previousValue.TblThemes.Remove(this);
					}
					this._TblStages.Entity = value;
					if ((value != null))
					{
						value.TblThemes.Add(this);
						this._StageRef = value.ID;
					}
					else
					{
						this._StageRef = default(int);
					}
					this.SendPropertyChanged("TblStages");
				}
			}
		}
		
		[Association(Name="FK_Theme", Storage="_RelStagesThemes", OtherKey="ThemeRef", DeleteRule="NO ACTION")]
		public EntitySet<RelStagesThemes> RelStagesThemes
		{
			get
			{
				return this._RelStagesThemes;
			}
			set
			{
				this._RelStagesThemes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblThemes = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblThemes = null;
		}
		
		private void attach_TblAttempts(TblAttempts entity)
		{
			this.SendPropertyChanging();
			entity.TblThemes = this;
		}
		
		private void detach_TblAttempts(TblAttempts entity)
		{
			this.SendPropertyChanging();
			entity.TblThemes = null;
		}
		
		private void attach_RelStagesThemes(RelStagesThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblThemes = this;
		}
		
		private void detach_RelStagesThemes(RelStagesThemes entity)
		{
			this.SendPropertyChanging();
			entity.TblThemes = null;
		}
	}
	
	[Table(Name="dbo.tblUserAnswers")]
	public partial class TblUserAnswers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _UserRef;
		
		private System.Nullable<int> _QuestionRef;
		
		private string _UserAnswer;
		
		private System.Nullable<System.DateTime> _Date;
		
		private bool _IsCompiledAnswer;
		
		private short _SysState;
		
		private int _AnswerTypeRef;
		
		private EntitySet<TblCompiledAnswers> _TblCompiledAnswers;
		
		private EntityRef<FxAnswerType> _FxAnswerType;
		
		private EntityRef<TblQuestions> _TblQuestions;
		
		private EntityRef<TblUsers> _TblUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnUserRefChanging(System.Nullable<int> value);
    partial void OnUserRefChanged();
    partial void OnQuestionRefChanging(System.Nullable<int> value);
    partial void OnQuestionRefChanged();
    partial void OnUserAnswerChanging(string value);
    partial void OnUserAnswerChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnIsCompiledAnswerChanging(bool value);
    partial void OnIsCompiledAnswerChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    partial void OnAnswerTypeRefChanging(int value);
    partial void OnAnswerTypeRefChanged();
    #endregion
		
		public TblUserAnswers()
		{
			this._TblCompiledAnswers = new EntitySet<TblCompiledAnswers>(new Action<TblCompiledAnswers>(this.attach_TblCompiledAnswers), new Action<TblCompiledAnswers>(this.detach_TblCompiledAnswers));
			this._FxAnswerType = default(EntityRef<FxAnswerType>);
			this._TblQuestions = default(EntityRef<TblQuestions>);
			this._TblUsers = default(EntityRef<TblUsers>);
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_UserRef", DbType="Int")]
		public System.Nullable<int> UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._TblUsers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[Column(Storage="_QuestionRef", DbType="Int")]
		public System.Nullable<int> QuestionRef
		{
			get
			{
				return this._QuestionRef;
			}
			set
			{
				if ((this._QuestionRef != value))
				{
					if (this._TblQuestions.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnQuestionRefChanging(value);
					this.SendPropertyChanging();
					this._QuestionRef = value;
					this.SendPropertyChanged("QuestionRef");
					this.OnQuestionRefChanged();
				}
			}
		}
		
		[Column(Storage="_UserAnswer", DbType="NVarChar(MAX)", UpdateCheck=UpdateCheck.Never)]
		public string UserAnswer
		{
			get
			{
				return this._UserAnswer;
			}
			set
			{
				if ((this._UserAnswer != value))
				{
					this.OnUserAnswerChanging(value);
					this.SendPropertyChanging();
					this._UserAnswer = value;
					this.SendPropertyChanged("UserAnswer");
					this.OnUserAnswerChanged();
				}
			}
		}
		
		[Column(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[Column(Storage="_IsCompiledAnswer", DbType="Bit NOT NULL")]
		public bool IsCompiledAnswer
		{
			get
			{
				return this._IsCompiledAnswer;
			}
			set
			{
				if ((this._IsCompiledAnswer != value))
				{
					this.OnIsCompiledAnswerChanging(value);
					this.SendPropertyChanging();
					this._IsCompiledAnswer = value;
					this.SendPropertyChanged("IsCompiledAnswer");
					this.OnIsCompiledAnswerChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Column(Storage="_AnswerTypeRef", DbType="Int NOT NULL")]
		public int AnswerTypeRef
		{
			get
			{
				return this._AnswerTypeRef;
			}
			set
			{
				if ((this._AnswerTypeRef != value))
				{
					if (this._FxAnswerType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAnswerTypeRefChanging(value);
					this.SendPropertyChanging();
					this._AnswerTypeRef = value;
					this.SendPropertyChanged("AnswerTypeRef");
					this.OnAnswerTypeRefChanged();
				}
			}
		}
		
		[Association(Name="FK_tblCompiledAnswers_tblUserAnswers", Storage="_TblCompiledAnswers", OtherKey="UserAnswerRef", DeleteRule="NO ACTION")]
		public EntitySet<TblCompiledAnswers> TblCompiledAnswers
		{
			get
			{
				return this._TblCompiledAnswers;
			}
			set
			{
				this._TblCompiledAnswers.Assign(value);
			}
		}
		
		[Association(Name="FK_tblUserAnswers_AnswerTypeRef", Storage="_FxAnswerType", ThisKey="AnswerTypeRef", IsForeignKey=true)]
		public FxAnswerType FxAnswerType
		{
			get
			{
				return this._FxAnswerType.Entity;
			}
			set
			{
				FxAnswerType previousValue = this._FxAnswerType.Entity;
				if (((previousValue != value) 
							|| (this._FxAnswerType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._FxAnswerType.Entity = null;
						previousValue.TblUserAnswers.Remove(this);
					}
					this._FxAnswerType.Entity = value;
					if ((value != null))
					{
						value.TblUserAnswers.Add(this);
						this._AnswerTypeRef = value.ID;
					}
					else
					{
						this._AnswerTypeRef = default(int);
					}
					this.SendPropertyChanged("FxAnswerType");
				}
			}
		}
		
		[Association(Name="FK_UserAnswer_CorrectAnswer", Storage="_TblQuestions", ThisKey="QuestionRef", IsForeignKey=true)]
		public TblQuestions TblQuestions
		{
			get
			{
				return this._TblQuestions.Entity;
			}
			set
			{
				TblQuestions previousValue = this._TblQuestions.Entity;
				if (((previousValue != value) 
							|| (this._TblQuestions.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblQuestions.Entity = null;
						previousValue.TblUserAnswers.Remove(this);
					}
					this._TblQuestions.Entity = value;
					if ((value != null))
					{
						value.TblUserAnswers.Add(this);
						this._QuestionRef = value.ID;
					}
					else
					{
						this._QuestionRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblQuestions");
				}
			}
		}
		
		[Association(Name="FK_UserAnswers_Users", Storage="_TblUsers", ThisKey="UserRef", IsForeignKey=true)]
		public TblUsers TblUsers
		{
			get
			{
				return this._TblUsers.Entity;
			}
			set
			{
				TblUsers previousValue = this._TblUsers.Entity;
				if (((previousValue != value) 
							|| (this._TblUsers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TblUsers.Entity = null;
						previousValue.TblUserAnswers.Remove(this);
					}
					this._TblUsers.Entity = value;
					if ((value != null))
					{
						value.TblUserAnswers.Add(this);
						this._UserRef = value.ID;
					}
					else
					{
						this._UserRef = default(Nullable<int>);
					}
					this.SendPropertyChanged("TblUsers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblCompiledAnswers(TblCompiledAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblUserAnswers = this;
		}
		
		private void detach_TblCompiledAnswers(TblCompiledAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblUserAnswers = null;
		}
	}
	
	[Table(Name="dbo.tblUsers")]
	public partial class TblUsers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Login;
		
		private string _PasswordHash;
		
		private string _Email;
		
		private short _SysState;
		
		private EntitySet<TblPermissions> _TblPermissions;
		
		private EntitySet<TblPermissions> _Permissions_UserObjects;
		
		private EntitySet<TblAttempts> _TblAttempts;
		
		private EntitySet<RelUserGroups> _RelUserGroups;
		
		private EntitySet<RelUserRoles> _RelUserRoles;
		
		private EntitySet<TblUserAnswers> _TblUserAnswers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnSysStateChanging(short value);
    partial void OnSysStateChanged();
    #endregion
		
		public TblUsers()
		{
			this._TblPermissions = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_TblPermissions), new Action<TblPermissions>(this.detach_TblPermissions));
			this._Permissions_UserObjects = new EntitySet<TblPermissions>(new Action<TblPermissions>(this.attach_Permissions_UserObjects), new Action<TblPermissions>(this.detach_Permissions_UserObjects));
			this._TblAttempts = new EntitySet<TblAttempts>(new Action<TblAttempts>(this.attach_TblAttempts), new Action<TblAttempts>(this.detach_TblAttempts));
			this._RelUserGroups = new EntitySet<RelUserGroups>(new Action<RelUserGroups>(this.attach_RelUserGroups), new Action<RelUserGroups>(this.detach_RelUserGroups));
			this._RelUserRoles = new EntitySet<RelUserRoles>(new Action<RelUserRoles>(this.attach_RelUserRoles), new Action<RelUserRoles>(this.detach_RelUserRoles));
			this._TblUserAnswers = new EntitySet<TblUserAnswers>(new Action<TblUserAnswers>(this.attach_TblUserAnswers), new Action<TblUserAnswers>(this.detach_TblUserAnswers));
			OnCreated();
		}
		
		[Column(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[Column(Storage="_FirstName", DbType="NVarChar(50)")]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[Column(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[Column(Storage="_Login", DbType="NVarChar(32) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		[Column(Storage="_PasswordHash", DbType="Char(32) NOT NULL", CanBeNull=false)]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[Column(Storage="_Email", DbType="Char(50) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[Column(Name="sysState", Storage="_SysState", DbType="SmallInt NOT NULL")]
		public short SysState
		{
			get
			{
				return this._SysState;
			}
			set
			{
				if ((this._SysState != value))
				{
					this.OnSysStateChanging(value);
					this.SendPropertyChanging();
					this._SysState = value;
					this.SendPropertyChanged("SysState");
					this.OnSysStateChanged();
				}
			}
		}
		
		[Association(Name="FK_Permissions_OwnerUser", Storage="_TblPermissions", OtherKey="OwnerUserRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> TblPermissions
		{
			get
			{
				return this._TblPermissions;
			}
			set
			{
				this._TblPermissions.Assign(value);
			}
		}
		
		[Association(Name="FK_Permissions_UserObjects", Storage="_Permissions_UserObjects", OtherKey="UserObjectRef", DeleteRule="NO ACTION")]
		public EntitySet<TblPermissions> Permissions_UserObjects
		{
			get
			{
				return this._Permissions_UserObjects;
			}
			set
			{
				this._Permissions_UserObjects.Assign(value);
			}
		}
		
		[Association(Name="FK_tblAttempts_tblUsers", Storage="_TblAttempts", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<TblAttempts> TblAttempts
		{
			get
			{
				return this._TblAttempts;
			}
			set
			{
				this._TblAttempts.Assign(value);
			}
		}
		
		[Association(Name="FK_USER", Storage="_RelUserGroups", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<RelUserGroups> RelUserGroups
		{
			get
			{
				return this._RelUserGroups;
			}
			set
			{
				this._RelUserGroups.Assign(value);
			}
		}
		
		[Association(Name="FK_USER_ID", Storage="_RelUserRoles", OtherKey="UserID", DeleteRule="NO ACTION")]
		public EntitySet<RelUserRoles> RelUserRoles
		{
			get
			{
				return this._RelUserRoles;
			}
			set
			{
				this._RelUserRoles.Assign(value);
			}
		}
		
		[Association(Name="FK_UserAnswers_Users", Storage="_TblUserAnswers", OtherKey="UserRef", DeleteRule="NO ACTION")]
		public EntitySet<TblUserAnswers> TblUserAnswers
		{
			get
			{
				return this._TblUserAnswers;
			}
			set
			{
				this._TblUserAnswers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = this;
		}
		
		private void detach_TblPermissions(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = null;
		}
		
		private void attach_Permissions_UserObjects(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.UserObjectRefTblUsers = this;
		}
		
		private void detach_Permissions_UserObjects(TblPermissions entity)
		{
			this.SendPropertyChanging();
			entity.UserObjectRefTblUsers = null;
		}
		
		private void attach_TblAttempts(TblAttempts entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = this;
		}
		
		private void detach_TblAttempts(TblAttempts entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = null;
		}
		
		private void attach_RelUserGroups(RelUserGroups entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = this;
		}
		
		private void detach_RelUserGroups(RelUserGroups entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = null;
		}
		
		private void attach_RelUserRoles(RelUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = this;
		}
		
		private void detach_RelUserRoles(RelUserRoles entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = null;
		}
		
		private void attach_TblUserAnswers(TblUserAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = this;
		}
		
		private void detach_TblUserAnswers(TblUserAnswers entity)
		{
			this.SendPropertyChanging();
			entity.TblUsers = null;
		}
	}
	
	public partial class Security_GetGroupPermissionsCourseResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _CourseRef;
		
		private System.Nullable<int> _CourseOperationRef;
		
		public Security_GetGroupPermissionsCourseResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_CourseRef", DbType="Int")]
		public System.Nullable<int> CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					this._CourseRef = value;
				}
			}
		}
		
		[Column(Storage="_CourseOperationRef", DbType="Int")]
		public System.Nullable<int> CourseOperationRef
		{
			get
			{
				return this._CourseOperationRef;
			}
			set
			{
				if ((this._CourseOperationRef != value))
				{
					this._CourseOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetGroupPermissionsCurriculumResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _CurriculumRef;
		
		private System.Nullable<int> _CurriculumOperationRef;
		
		public Security_GetGroupPermissionsCurriculumResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_CurriculumRef", DbType="Int")]
		public System.Nullable<int> CurriculumRef
		{
			get
			{
				return this._CurriculumRef;
			}
			set
			{
				if ((this._CurriculumRef != value))
				{
					this._CurriculumRef = value;
				}
			}
		}
		
		[Column(Storage="_CurriculumOperationRef", DbType="Int")]
		public System.Nullable<int> CurriculumOperationRef
		{
			get
			{
				return this._CurriculumOperationRef;
			}
			set
			{
				if ((this._CurriculumOperationRef != value))
				{
					this._CurriculumOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetGroupPermissionsGroupResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _GroupRef;
		
		private System.Nullable<int> _GroupOperationRef;
		
		public Security_GetGroupPermissionsGroupResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_GroupRef", DbType="Int")]
		public System.Nullable<int> GroupRef
		{
			get
			{
				return this._GroupRef;
			}
			set
			{
				if ((this._GroupRef != value))
				{
					this._GroupRef = value;
				}
			}
		}
		
		[Column(Storage="_GroupOperationRef", DbType="Int")]
		public System.Nullable<int> GroupOperationRef
		{
			get
			{
				return this._GroupOperationRef;
			}
			set
			{
				if ((this._GroupOperationRef != value))
				{
					this._GroupOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetGroupPermissionsStageResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _StageRef;
		
		private System.Nullable<int> _StageOperationRef;
		
		public Security_GetGroupPermissionsStageResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_StageRef", DbType="Int")]
		public System.Nullable<int> StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					this._StageRef = value;
				}
			}
		}
		
		[Column(Storage="_StageOperationRef", DbType="Int")]
		public System.Nullable<int> StageOperationRef
		{
			get
			{
				return this._StageOperationRef;
			}
			set
			{
				if ((this._StageOperationRef != value))
				{
					this._StageOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetGroupPermissionsThemeResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _ThemeRef;
		
		private System.Nullable<int> _ThemeOperationRef;
		
		public Security_GetGroupPermissionsThemeResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_ThemeRef", DbType="Int")]
		public System.Nullable<int> ThemeRef
		{
			get
			{
				return this._ThemeRef;
			}
			set
			{
				if ((this._ThemeRef != value))
				{
					this._ThemeRef = value;
				}
			}
		}
		
		[Column(Storage="_ThemeOperationRef", DbType="Int")]
		public System.Nullable<int> ThemeOperationRef
		{
			get
			{
				return this._ThemeOperationRef;
			}
			set
			{
				if ((this._ThemeOperationRef != value))
				{
					this._ThemeOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetOperationsForCourseResult
	{
		
		private System.Nullable<int> _CourseOperationRef;
		
		public Security_GetOperationsForCourseResult()
		{
		}
		
		[Column(Storage="_CourseOperationRef", DbType="Int")]
		public System.Nullable<int> CourseOperationRef
		{
			get
			{
				return this._CourseOperationRef;
			}
			set
			{
				if ((this._CourseOperationRef != value))
				{
					this._CourseOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetOperationsForCurriculumResult
	{
		
		private System.Nullable<int> _CurriculumOperationRef;
		
		public Security_GetOperationsForCurriculumResult()
		{
		}
		
		[Column(Storage="_CurriculumOperationRef", DbType="Int")]
		public System.Nullable<int> CurriculumOperationRef
		{
			get
			{
				return this._CurriculumOperationRef;
			}
			set
			{
				if ((this._CurriculumOperationRef != value))
				{
					this._CurriculumOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetOperationsForGroupResult
	{
		
		private System.Nullable<int> _GroupOperationRef;
		
		public Security_GetOperationsForGroupResult()
		{
		}
		
		[Column(Storage="_GroupOperationRef", DbType="Int")]
		public System.Nullable<int> GroupOperationRef
		{
			get
			{
				return this._GroupOperationRef;
			}
			set
			{
				if ((this._GroupOperationRef != value))
				{
					this._GroupOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetOperationsForStageResult
	{
		
		private System.Nullable<int> _StageOperationRef;
		
		public Security_GetOperationsForStageResult()
		{
		}
		
		[Column(Storage="_StageOperationRef", DbType="Int")]
		public System.Nullable<int> StageOperationRef
		{
			get
			{
				return this._StageOperationRef;
			}
			set
			{
				if ((this._StageOperationRef != value))
				{
					this._StageOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetOperationsForThemeResult
	{
		
		private System.Nullable<int> _ThemeOperationRef;
		
		public Security_GetOperationsForThemeResult()
		{
		}
		
		[Column(Storage="_ThemeOperationRef", DbType="Int")]
		public System.Nullable<int> ThemeOperationRef
		{
			get
			{
				return this._ThemeOperationRef;
			}
			set
			{
				if ((this._ThemeOperationRef != value))
				{
					this._ThemeOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetPermissionsCourseResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _CourseRef;
		
		private System.Nullable<int> _CourseOperationRef;
		
		public Security_GetPermissionsCourseResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_CourseRef", DbType="Int")]
		public System.Nullable<int> CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					this._CourseRef = value;
				}
			}
		}
		
		[Column(Storage="_CourseOperationRef", DbType="Int")]
		public System.Nullable<int> CourseOperationRef
		{
			get
			{
				return this._CourseOperationRef;
			}
			set
			{
				if ((this._CourseOperationRef != value))
				{
					this._CourseOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetPermissionsCurriculumResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _CurriculumRef;
		
		private System.Nullable<int> _CurriculumOperationRef;
		
		public Security_GetPermissionsCurriculumResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_CurriculumRef", DbType="Int")]
		public System.Nullable<int> CurriculumRef
		{
			get
			{
				return this._CurriculumRef;
			}
			set
			{
				if ((this._CurriculumRef != value))
				{
					this._CurriculumRef = value;
				}
			}
		}
		
		[Column(Storage="_CurriculumOperationRef", DbType="Int")]
		public System.Nullable<int> CurriculumOperationRef
		{
			get
			{
				return this._CurriculumOperationRef;
			}
			set
			{
				if ((this._CurriculumOperationRef != value))
				{
					this._CurriculumOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetPermissionsGroupResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _GroupRef;
		
		private System.Nullable<int> _GroupOperationRef;
		
		public Security_GetPermissionsGroupResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_GroupRef", DbType="Int")]
		public System.Nullable<int> GroupRef
		{
			get
			{
				return this._GroupRef;
			}
			set
			{
				if ((this._GroupRef != value))
				{
					this._GroupRef = value;
				}
			}
		}
		
		[Column(Storage="_GroupOperationRef", DbType="Int")]
		public System.Nullable<int> GroupOperationRef
		{
			get
			{
				return this._GroupOperationRef;
			}
			set
			{
				if ((this._GroupOperationRef != value))
				{
					this._GroupOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetPermissionsStageResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _StageRef;
		
		private System.Nullable<int> _StageOperationRef;
		
		public Security_GetPermissionsStageResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_StageRef", DbType="Int")]
		public System.Nullable<int> StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					this._StageRef = value;
				}
			}
		}
		
		[Column(Storage="_StageOperationRef", DbType="Int")]
		public System.Nullable<int> StageOperationRef
		{
			get
			{
				return this._StageOperationRef;
			}
			set
			{
				if ((this._StageOperationRef != value))
				{
					this._StageOperationRef = value;
				}
			}
		}
	}
	
	public partial class Security_GetPermissionsThemeResult
	{
		
		private System.Nullable<int> _ID;
		
		private System.Nullable<int> _ParentPermitionRef;
		
		private System.Nullable<System.DateTime> _DateSince;
		
		private System.Nullable<System.DateTime> _DateTill;
		
		private System.Nullable<int> _OwnerUserRef;
		
		private System.Nullable<int> _OwnerGroupRef;
		
		private System.Nullable<bool> _CanBeDelagated;
		
		private System.Nullable<int> _ThemeRef;
		
		private System.Nullable<int> _ThemeOperationRef;
		
		public Security_GetPermissionsThemeResult()
		{
		}
		
		[Column(Storage="_ID", DbType="Int")]
		public System.Nullable<int> ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this._ID = value;
				}
			}
		}
		
		[Column(Storage="_ParentPermitionRef", DbType="Int")]
		public System.Nullable<int> ParentPermitionRef
		{
			get
			{
				return this._ParentPermitionRef;
			}
			set
			{
				if ((this._ParentPermitionRef != value))
				{
					this._ParentPermitionRef = value;
				}
			}
		}
		
		[Column(Storage="_DateSince", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateSince
		{
			get
			{
				return this._DateSince;
			}
			set
			{
				if ((this._DateSince != value))
				{
					this._DateSince = value;
				}
			}
		}
		
		[Column(Storage="_DateTill", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTill
		{
			get
			{
				return this._DateTill;
			}
			set
			{
				if ((this._DateTill != value))
				{
					this._DateTill = value;
				}
			}
		}
		
		[Column(Storage="_OwnerUserRef", DbType="Int")]
		public System.Nullable<int> OwnerUserRef
		{
			get
			{
				return this._OwnerUserRef;
			}
			set
			{
				if ((this._OwnerUserRef != value))
				{
					this._OwnerUserRef = value;
				}
			}
		}
		
		[Column(Storage="_OwnerGroupRef", DbType="Int")]
		public System.Nullable<int> OwnerGroupRef
		{
			get
			{
				return this._OwnerGroupRef;
			}
			set
			{
				if ((this._OwnerGroupRef != value))
				{
					this._OwnerGroupRef = value;
				}
			}
		}
		
		[Column(Storage="_CanBeDelagated", DbType="Bit")]
		public System.Nullable<bool> CanBeDelagated
		{
			get
			{
				return this._CanBeDelagated;
			}
			set
			{
				if ((this._CanBeDelagated != value))
				{
					this._CanBeDelagated = value;
				}
			}
		}
		
		[Column(Storage="_ThemeRef", DbType="Int")]
		public System.Nullable<int> ThemeRef
		{
			get
			{
				return this._ThemeRef;
			}
			set
			{
				if ((this._ThemeRef != value))
				{
					this._ThemeRef = value;
				}
			}
		}
		
		[Column(Storage="_ThemeOperationRef", DbType="Int")]
		public System.Nullable<int> ThemeOperationRef
		{
			get
			{
				return this._ThemeOperationRef;
			}
			set
			{
				if ((this._ThemeOperationRef != value))
				{
					this._ThemeOperationRef = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
