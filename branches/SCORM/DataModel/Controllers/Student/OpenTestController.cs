using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common;
using IUDICO.DataModel.Common.StudentUtils;
using IUDICO.DataModel.Common.TestingUtils;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.DB.Base;
using IUDICO.DataModel.ImportManagers;
using IUDICO.DataModel.WebControl;
using LEX.CONTROLS;
using LEX.CONTROLS.Expressions;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Linq;
using System.Web.SessionState;

namespace IUDICO.DataModel.Controllers.Student
{
    public class OpenTestController : ControllerBase
    {
        [PersistantField]
        public int PageIndex;

        private TblLearnerAttempts attempt;
        private TblThemes theme;
        private TblOrganizations org;
        private List<TblItems> items;

        private int learnerAttemptId;

        public readonly IVariable<string> Description = string.Empty.AsVariable();

        public readonly IVariable<string> ThemeName = string.Empty.AsVariable();

        public readonly IVariable<string> PageCount = string.Empty.AsVariable();

        #region Page Controls

        public HttpResponse Response { private get; set; }

        public Panel PageContent { private get; set; }

        public Button NextButton { private get; set; }

        public Button PreviousButton { private get; set; }

        #endregion
        
        public void NextPage()
        {
            PageIndex++;

            ShowCurrent();
        }

        public void PreviousPage()
        {
            PageIndex--;

            ShowCurrent();
        }

        public void PageLoad(object sender, EventArgs e)
        {
            if (HttpContext.Current.Session["CurrentLearnerAttemptId"] == null)
            {
                throw new Exception("Wrong request (LearnerAttempt ID not specified)");
            }

            learnerAttemptId = Convert.ToInt32(HttpContext.Current.Session["CurrentLearnerAttemptId"].ToString());

            attempt = ServerModel.DB.Load<TblLearnerAttempts>(learnerAttemptId);
            theme = ServerModel.DB.Load<TblThemes>(attempt.ThemeRef);
            org = ServerModel.DB.Load<TblOrganizations>(theme.OrganizationRef);
            items = TeacherHelper.LeafItemsOfOrganization(org).ToList();

            ShowCurrent();
        }

        private void ShowCurrent()
        {
            if (PageIndex < 0 || PageIndex >= items.Count)
            {
                Response.Redirect(ServerModel.Forms.BuildRedirectUrl(new ThemeResultController
                    {
                        BackUrl = string.Empty,
                        LearnerAttemptId = learnerAttemptId,
                    }));
            }

            PreviousButton.Enabled = (PageIndex > 0);
            NextButton.Enabled = (PageIndex < items.Count);

            ThemeName.Value = theme.Name;
            Description.Value = string.Format("You opened {0}({1}) page", theme.Name, items[PageIndex].Title);
            PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, items.Count);

            ShowPage(items[PageIndex]);
        }

        private void ShowPage(TblItems item)
        {
            PageContent.Controls.Clear();

            TblResources resource = ServerModel.DB.Load<TblResources>((int)item.ResourceRef);
            Control control = GetControl(resource, PageContent);

            PageContent.Controls.Add(control);

            InitializeLearnerSession(item.ID);
        }

        private void InitializeLearnerSession(int ItemId)
        {
            bool isNew = true;
            int LearnerSessionId = 0;
            CmiDataModel CmiDM = null;

            List<TblLearnerSessions> list = ServerModel.DB.Query<TblLearnerSessions>(
                new AndCondition(
                    new CompareCondition<int>(
                        DataObject.Schema.LearnerAttemptRef,
                        new ValueCondition<int>(learnerAttemptId),
                        COMPARE_KIND.EQUAL),
                    new CompareCondition<int>(
                        DataObject.Schema.ItemRef,
                        new ValueCondition<int>(ItemId),
                        COMPARE_KIND.EQUAL)
                    )
                );

            if (list.Count > 0)
            {
                LearnerSessionId = list[0].ID;

                CmiDM = new CmiDataModel(LearnerSessionId, ServerModel.User.Current.ID, true);

                string exitValue = CmiDM.GetValue("exit");

                if (exitValue == "" || exitValue == "suspend")
                {
                    CmiDM.SetValue("entry", "resume");
                    CmiDM.SetValue("credit", "credit");

                    isNew = false;
                }
            }

            if (isNew)
            {
                TblLearnerSessions t = new TblLearnerSessions
                {
                    LearnerAttemptRef = learnerAttemptId,
                    ItemRef = ItemId
                };

                LearnerSessionId = ServerModel.DB.Insert<TblLearnerSessions>(t);

                CmiDM = new CmiDataModel(LearnerSessionId, ServerModel.User.Current.ID, true);

                CmiDM.SetValue("entry", "ab-initio");
                CmiDM.SetValue("credit", "credit"); 
            }

            HttpContext.Current.Session["CurrentLearnerSessionId"] = LearnerSessionId;
        }

        private Control GetControl(TblResources resource, Panel p)
        {
            Uri BaseUri = new Uri("http://" + HttpContext.Current.Request.Url.Host + ":" + HttpContext.Current.Request.Url.Port + HttpContext.Current.Request.ApplicationPath);
            Uri AssetsUri = new Uri(BaseUri, "Assets/");
            Uri CourseUri = new Uri(AssetsUri, theme.CourseRef.ToString() + "/");
            Uri ResourceUri = new Uri(CourseUri, resource.Href);

            Control ResourceControl = p.Page.ParseControl(string.Format(@"<IFRAME ID=""_iFrame""  width=""100%"" height=""100%"" src=""{0}""></IFRAME>", ResourceUri.ToString()));

            return ResourceControl;
        }
    }
}
