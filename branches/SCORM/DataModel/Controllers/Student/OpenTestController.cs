using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common;
using IUDICO.DataModel.Common.StudentUtils;
using IUDICO.DataModel.Common.TestingUtils;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.ImportManagers;
using IUDICO.DataModel.WebControl;
using LEX.CONTROLS;
using LEX.CONTROLS.Expressions;
using System.IO;
using System.Text;

namespace IUDICO.DataModel.Controllers.Student
{
    public class OpenTestController : ControllerBase
    {
        [ControllerParameter] public int ThemaId;

        [PersistantField] public int PageIndex;
        
        [ControllerParameter] public int CurriculumnId;

        [ControllerParameter] public int StageId;

        [ControllerParameter] public string PagesIds;


        private string[] _pages;


        public readonly IVariable<string> Description = string.Empty.AsVariable();

        public readonly IVariable<string> ThemaName = string.Empty.AsVariable();

        public readonly IVariable<string> PageCount = string.Empty.AsVariable();

        #region Page Controls


        public HttpResponse Response { private get; set; }

        public Panel PageContent { private get; set; }

        public Button NextButton { private get; set; }

        public Button PreviousButton { private get; set; }

        #endregion


        public void NextPage()
        {
            PageIndex++;
            ShowCurrentTestPage();
        }

        public void PreviousPage()
        {
            PageIndex--;
            ShowCurrentTestPage();
        }

        public void PageLoad(object sender, EventArgs e)
        {
            if (ThemaId == 0)
                throw new Exception("Wrong request (Thema ID dont specified)");

            SetPages(ServerModel.DB.Load<TblThemes>(ThemaId));

            ShowCurrentTestPage();

        }

        private void ShowCurrentTestPage()
        {
            CorrectWrongIndex();

            CheckButtonState();

            var currentPage = ServerModel.DB.Load<TblPages>(int.Parse(_pages[PageIndex]));
            ShowPage(currentPage);
            
            SetDescription(currentPage);
        }

        private void ShowPage(TblPages page)
        {
            Control control;

            throw new NotImplementedException();
            /*
            if ((FX_PAGETYPE)page.PageTypeRef == FX_PAGETYPE.Practice)
            {
                //control = TestControlHelper.GetPracticeControl(page, PageContent);
                //RedirectSubmitEventsToThisController(control, page.ID);
                //TblFiles file = ServerModel.DB.Load<TblFiles>.Load(page.PageFile);
                //string fileSrc = Encoding.Unicode.GetString(File.ReadAllText(file.File));
                string fileSrc = "";
                

                using (var tempControl = PageContent.Page.ParseControl(fileSrc))
                {
                    control = tempControl.Controls[0];
                };
            }
            else
            {
                control = TestControlHelper.GetTheoryControl(page, PageContent);
            }
            */
            PageContent.Controls.Clear();
            PageContent.Controls.Add(control);
        }


        private void RedirectSubmitEventsToThisController(Control control, int pageId)
        {
            foreach (var v in control.Controls)
                if (v is Button)
                {
                    ((Button) v).Enabled = ConditionChecker.IsSubmitEnabled(StageId, pageId);

                    ((Button) v).Click += SubmitClick;
                }
        }

        private void SubmitClick(object sender, EventArgs e)
        {
            var control = ((Button) sender).Parent;

            foreach (var c in control.Controls)
                if(c is ITestControl)
                    ((ITestControl)c).SubmitAnswer();

            NextPage();
        }

        private void SetDescription(TblPages p)
        {
            throw new NotImplementedException();
            //Description.Value = string.Format("You open {0}({1}) page");

            PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, _pages.Length);
        }

        private void CorrectWrongIndex()
        {
            if (IsPageIndexNotValid())
                    RedirectToResultPage();
        }

        private bool IsPageIndexNotValid()
        {
            return PageIndex >= _pages.Length || PageIndex < 0;
        }

        private void RedirectToResultPage()
        {
            Response.Redirect(
                ServerModel.Forms.BuildRedirectUrl
                    (new ThemeResultController
                         {
                             BackUrl = string.Empty,
                             ThemeId = ThemaId,
                             CurriculumnName = (ServerModel.DB.Load<TblCurriculums>(CurriculumnId)).Name,
                             StageName = (ServerModel.DB.Load<TblStages>(StageId)).Name,
                             UserId = ServerModel.User.Current.ID
                         }));
        }

        private void CheckButtonState()
        {
            PreviousButton.Enabled = !(PageIndex == 0);

            NextButton.Enabled = !(PageIndex == _pages.Length - 1);
        }

        private void SetPages(TblThemes thema)
        {
            ThemaName.Value = thema.Name;

            _pages = PageShifter.GetPagesFromParameter(PagesIds);
        }
    }
}