using System;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common;
using IUDICO.DataModel.Common.StudentUtils;
using IUDICO.DataModel.Common.TestingUtils;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.ImportManagers;
using IUDICO.DataModel.WebControl;
using LEX.CONTROLS;
using LEX.CONTROLS.Expressions;
using System.IO;
using System.Text;
using System.Collections.Generic;
using System.Linq;

namespace IUDICO.DataModel.Controllers.Student
{
    public class OpenTestController : ControllerBase
    {
        [PersistantField] public int PageIndex;
        
        //[ControllerParameter] public int CurriculumnId;

        //[ControllerParameter] public int StageId;

        [ControllerParameter] public int ThemeId;

        private int CourseId;

        private TblThemes theme;
        private TblOrganizations org;
        private List<TblItems> items;
        private int showmax;

        public readonly IVariable<string> Description = string.Empty.AsVariable();

        public readonly IVariable<string> ThemeName = string.Empty.AsVariable();

        public readonly IVariable<string> PageCount = string.Empty.AsVariable();

        #region Page Controls

        public HttpResponse Response { private get; set; }

        public Panel PageContent { private get; set; }

        public Button NextButton { private get; set; }

        public Button PreviousButton { private get; set; }

        #endregion

        public void NextPage()
        {
            PageIndex++;

            ShowCurrent();
        }

        public void PreviousPage()
        {
            PageIndex--;

            ShowCurrent();
        }

        public void PageLoad(object sender, EventArgs e)
        {
            if (ThemeId == 0)
            {
                throw new Exception("Wrong request (Theme ID not specified)");
            }

            theme = ServerModel.DB.Load<TblThemes>(ThemeId);
            org = ServerModel.DB.Load<TblOrganizations>(theme.OrganizationRef);
            items = TeacherHelper.ItemsOfOrganization(org).ToList();

            CourseId = theme.CourseRef;

            if (theme.PageOrderRef == FxPageOrders.Random.ID)
            {
                RandomShuffle(items);
            }

            if (theme.PageCountToShow != null)
            {
                showmax = Math.Min(items.Count, (int)theme.PageCountToShow);
            }
            else
            {
                showmax = items.Count;
            }

            ShowCurrent();
        }

        private void RandomShuffle(List<TblItems> items)
        {
            items.Sort(delegate(TblItems a, TblItems b)
            {
                if (a.ID.Equals(b.ID))
                {
                    return 0;
                }
                else
                {
                    return (new Random()).Next(-1, 1);
                }
            });
        }

        private void ShowCurrent()
        {
            if (PageIndex < 0 || PageIndex >= showmax)
            {
                Response.Redirect(ServerModel.Forms.BuildRedirectUrl(new ThemeResultController
                    {
                        BackUrl = string.Empty,
                        ThemeId = theme.ID,
                        //CurriculumnName = theme.TblStages.TblCurriculums.Name,
                        //StageName = theme.TblStages.Name,
                        UserId = ServerModel.User.Current.ID
                    }));
            }

            PreviousButton.Enabled = (PageIndex > 0);
            NextButton.Enabled = (PageIndex < showmax);

            ThemeName.Value = theme.Name;
            Description.Value = string.Format("You opened {0}({1}) page", theme.Name, items[PageIndex].Title);
            PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, showmax);

            ShowPage(items[PageIndex]);

            //var currentPage = ServerModel.DB.Load<TblPages>(int.Parse(_pages[PageIndex]));
            //ShowPage(currentPage);
            //SetDescription(currentPage);
        }

        private void ShowPage(TblItems item)
        {
            PageContent.Controls.Clear();

            TblResources resource = ServerModel.DB.Load<TblResources>((int)item.ResourceRef);
            Control control = TestControlHelper.GetControl(resource, PageContent, CourseId);

            PageContent.Controls.Add(control);
        }

        private void ShowPage(TblPages page)
        {
            Control control;

            throw new NotImplementedException();
            /*
            if ((FX_PAGETYPE)page.PageTypeRef == FX_PAGETYPE.Practice)
            {
                //control = TestControlHelper.GetPracticeControl(page, PageContent);
                //RedirectSubmitEventsToThisController(control, page.ID);
                //TblFiles file = ServerModel.DB.Load<TblFiles>.Load(page.PageFile);
                //string fileSrc = Encoding.Unicode.GetString(File.ReadAllText(file.File));
                string fileSrc = "";
                

                using (var tempControl = PageContent.Page.ParseControl(fileSrc))
                {
                    control = tempControl.Controls[0];
                };
            }
            else
            {
                control = TestControlHelper.GetTheoryControl(page, PageContent);
            }
            
            PageContent.Controls.Clear();
            PageContent.Controls.Add(control);
            */
        }

        /*
        private void RedirectSubmitEventsToThisController(Control control, int pageId)
        {
            foreach (var v in control.Controls)
            {
                if (v is Button)
                {
                    ((Button)v).Enabled = ConditionChecker.IsSubmitEnabled(StageId, pageId);
                    ((Button)v).Click += SubmitClick;
                }
            }
        }

        private void SubmitClick(object sender, EventArgs e)
        {
            var control = ((Button) sender).Parent;

            foreach (var c in control.Controls)
            {
                if (c is ITestControl)
                {
                    ((ITestControl)c).SubmitAnswer();
                }
            }

            NextPage();
        }
        */

        private void SetDescription(TblPages p)
        {
            throw new NotImplementedException();
            //Description.Value = string.Format("You open {0}({1}) page");

            //PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, _pages.Length);
        }
    }
}