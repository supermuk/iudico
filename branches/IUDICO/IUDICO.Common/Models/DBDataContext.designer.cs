#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace IUDICO.Common.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="IUDICO")]
	public partial class DBDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertActivityAttemptItem(ActivityAttemptItem instance);
    partial void UpdateActivityAttemptItem(ActivityAttemptItem instance);
    partial void DeleteActivityAttemptItem(ActivityAttemptItem instance);
    partial void InsertUserItem(UserItem instance);
    partial void UpdateUserItem(UserItem instance);
    partial void DeleteUserItem(UserItem instance);
    partial void InsertActivityObjectiveItem(ActivityObjectiveItem instance);
    partial void UpdateActivityObjectiveItem(ActivityObjectiveItem instance);
    partial void DeleteActivityObjectiveItem(ActivityObjectiveItem instance);
    partial void InsertActivityPackageItem(ActivityPackageItem instance);
    partial void UpdateActivityPackageItem(ActivityPackageItem instance);
    partial void DeleteActivityPackageItem(ActivityPackageItem instance);
    partial void InsertAttemptItem(AttemptItem instance);
    partial void UpdateAttemptItem(AttemptItem instance);
    partial void DeleteAttemptItem(AttemptItem instance);
    partial void InsertAttemptObjectiveItem(AttemptObjectiveItem instance);
    partial void UpdateAttemptObjectiveItem(AttemptObjectiveItem instance);
    partial void DeleteAttemptObjectiveItem(AttemptObjectiveItem instance);
    partial void InsertAttemptStatus(AttemptStatus instance);
    partial void UpdateAttemptStatus(AttemptStatus instance);
    partial void DeleteAttemptStatus(AttemptStatus instance);
    partial void InsertAudioCaptioning(AudioCaptioning instance);
    partial void UpdateAudioCaptioning(AudioCaptioning instance);
    partial void DeleteAudioCaptioning(AudioCaptioning instance);
    partial void InsertCommentFromLearnerItem(CommentFromLearnerItem instance);
    partial void UpdateCommentFromLearnerItem(CommentFromLearnerItem instance);
    partial void DeleteCommentFromLearnerItem(CommentFromLearnerItem instance);
    partial void InsertCommentFromLmsItem(CommentFromLmsItem instance);
    partial void UpdateCommentFromLmsItem(CommentFromLmsItem instance);
    partial void DeleteCommentFromLmsItem(CommentFromLmsItem instance);
    partial void InsertCompletionStatus(CompletionStatus instance);
    partial void UpdateCompletionStatus(CompletionStatus instance);
    partial void DeleteCompletionStatus(CompletionStatus instance);
    partial void InsertCorrectResponseItem(CorrectResponseItem instance);
    partial void UpdateCorrectResponseItem(CorrectResponseItem instance);
    partial void DeleteCorrectResponseItem(CorrectResponseItem instance);
    partial void InsertCourse(Course instance);
    partial void UpdateCourse(Course instance);
    partial void DeleteCourse(Course instance);
    partial void InsertCurriculumAssignment(CurriculumAssignment instance);
    partial void UpdateCurriculumAssignment(CurriculumAssignment instance);
    partial void DeleteCurriculumAssignment(CurriculumAssignment instance);
    partial void InsertDisplayMode(DisplayMode instance);
    partial void UpdateDisplayMode(DisplayMode instance);
    partial void DeleteDisplayMode(DisplayMode instance);
    partial void InsertEvaluationCommentItem(EvaluationCommentItem instance);
    partial void UpdateEvaluationCommentItem(EvaluationCommentItem instance);
    partial void DeleteEvaluationCommentItem(EvaluationCommentItem instance);
    partial void InsertExitMode(ExitMode instance);
    partial void UpdateExitMode(ExitMode instance);
    partial void DeleteExitMode(ExitMode instance);
    partial void InsertExtensionDataItem(ExtensionDataItem instance);
    partial void UpdateExtensionDataItem(ExtensionDataItem instance);
    partial void DeleteExtensionDataItem(ExtensionDataItem instance);
    partial void InsertGlobalObjectiveItem(GlobalObjectiveItem instance);
    partial void UpdateGlobalObjectiveItem(GlobalObjectiveItem instance);
    partial void DeleteGlobalObjectiveItem(GlobalObjectiveItem instance);
    partial void InsertInteractionItem(InteractionItem instance);
    partial void UpdateInteractionItem(InteractionItem instance);
    partial void DeleteInteractionItem(InteractionItem instance);
    partial void InsertInteractionObjectiveItem(InteractionObjectiveItem instance);
    partial void UpdateInteractionObjectiveItem(InteractionObjectiveItem instance);
    partial void DeleteInteractionObjectiveItem(InteractionObjectiveItem instance);
    partial void InsertInteractionResultState(InteractionResultState instance);
    partial void UpdateInteractionResultState(InteractionResultState instance);
    partial void DeleteInteractionResultState(InteractionResultState instance);
    partial void InsertInteractionType(InteractionType instance);
    partial void UpdateInteractionType(InteractionType instance);
    partial void DeleteInteractionType(InteractionType instance);
    partial void InsertLearnerGlobalObjectiveItem(LearnerGlobalObjectiveItem instance);
    partial void UpdateLearnerGlobalObjectiveItem(LearnerGlobalObjectiveItem instance);
    partial void DeleteLearnerGlobalObjectiveItem(LearnerGlobalObjectiveItem instance);
    partial void InsertLessonStatus(LessonStatus instance);
    partial void UpdateLessonStatus(LessonStatus instance);
    partial void DeleteLessonStatus(LessonStatus instance);
    partial void InsertMapActivityObjectiveToGlobalObjectiveItem(MapActivityObjectiveToGlobalObjectiveItem instance);
    partial void UpdateMapActivityObjectiveToGlobalObjectiveItem(MapActivityObjectiveToGlobalObjectiveItem instance);
    partial void DeleteMapActivityObjectiveToGlobalObjectiveItem(MapActivityObjectiveToGlobalObjectiveItem instance);
    partial void InsertNavigationCommand(NavigationCommand instance);
    partial void UpdateNavigationCommand(NavigationCommand instance);
    partial void DeleteNavigationCommand(NavigationCommand instance);
    partial void InsertNode(Node instance);
    partial void UpdateNode(Node instance);
    partial void DeleteNode(Node instance);
    partial void InsertOperation(Operation instance);
    partial void UpdateOperation(Operation instance);
    partial void DeleteOperation(Operation instance);
    partial void InsertPackageFormat(PackageFormat instance);
    partial void UpdatePackageFormat(PackageFormat instance);
    partial void DeletePackageFormat(PackageFormat instance);
    partial void InsertPackageGlobalObjectiveItem(PackageGlobalObjectiveItem instance);
    partial void UpdatePackageGlobalObjectiveItem(PackageGlobalObjectiveItem instance);
    partial void DeletePackageGlobalObjectiveItem(PackageGlobalObjectiveItem instance);
    partial void InsertPackageItem(PackageItem instance);
    partial void UpdatePackageItem(PackageItem instance);
    partial void DeletePackageItem(PackageItem instance);
    partial void InsertResourceItem(ResourceItem instance);
    partial void UpdateResourceItem(ResourceItem instance);
    partial void DeleteResourceItem(ResourceItem instance);
    partial void InsertRubricItem(RubricItem instance);
    partial void UpdateRubricItem(RubricItem instance);
    partial void DeleteRubricItem(RubricItem instance);
    partial void InsertSequencingEventType(SequencingEventType instance);
    partial void UpdateSequencingEventType(SequencingEventType instance);
    partial void DeleteSequencingEventType(SequencingEventType instance);
    partial void InsertSequencingLogEntryItem(SequencingLogEntryItem instance);
    partial void UpdateSequencingLogEntryItem(SequencingLogEntryItem instance);
    partial void DeleteSequencingLogEntryItem(SequencingLogEntryItem instance);
    partial void InsertSuccessStatus(SuccessStatus instance);
    partial void UpdateSuccessStatus(SuccessStatus instance);
    partial void DeleteSuccessStatus(SuccessStatus instance);
    partial void InsertTimeLimitAction(TimeLimitAction instance);
    partial void UpdateTimeLimitAction(TimeLimitAction instance);
    partial void DeleteTimeLimitAction(TimeLimitAction instance);
    partial void InsertTimeline(Timeline instance);
    partial void UpdateTimeline(Timeline instance);
    partial void DeleteTimeline(Timeline instance);
    partial void InsertCurriculum(Curriculum instance);
    partial void UpdateCurriculum(Curriculum instance);
    partial void DeleteCurriculum(Curriculum instance);
    partial void InsertStage(Stage instance);
    partial void UpdateStage(Stage instance);
    partial void DeleteStage(Stage instance);
    partial void InsertTheme(Theme instance);
    partial void UpdateTheme(Theme instance);
    partial void DeleteTheme(Theme instance);
    partial void InsertGroup(Group instance);
    partial void UpdateGroup(Group instance);
    partial void DeleteGroup(Group instance);
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void InsertGroupUser(GroupUser instance);
    partial void UpdateGroupUser(GroupUser instance);
    partial void DeleteGroupUser(GroupUser instance);
    partial void InsertRole(Role instance);
    partial void UpdateRole(Role instance);
    partial void DeleteRole(Role instance);
    #endregion
		
		public DBDataContext() : 
				base(global::IUDICO.Common.Properties.Settings.Default.IUDICOConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DBDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this.GetTable<ActivityAttemptItem>();
			}
		}
		
		public System.Data.Linq.Table<UserItem> UserItems
		{
			get
			{
				return this.GetTable<UserItem>();
			}
		}
		
		public System.Data.Linq.Table<ActivityObjectiveItem> ActivityObjectiveItems
		{
			get
			{
				return this.GetTable<ActivityObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<ActivityPackageItem> ActivityPackageItems
		{
			get
			{
				return this.GetTable<ActivityPackageItem>();
			}
		}
		
		public System.Data.Linq.Table<AttemptItem> AttemptItems
		{
			get
			{
				return this.GetTable<AttemptItem>();
			}
		}
		
		public System.Data.Linq.Table<AttemptObjectiveItem> AttemptObjectiveItems
		{
			get
			{
				return this.GetTable<AttemptObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<AttemptStatus> AttemptStatus
		{
			get
			{
				return this.GetTable<AttemptStatus>();
			}
		}
		
		public System.Data.Linq.Table<AudioCaptioning> AudioCaptionings
		{
			get
			{
				return this.GetTable<AudioCaptioning>();
			}
		}
		
		public System.Data.Linq.Table<CommentFromLearnerItem> CommentFromLearnerItems
		{
			get
			{
				return this.GetTable<CommentFromLearnerItem>();
			}
		}
		
		public System.Data.Linq.Table<CommentFromLmsItem> CommentFromLmsItems
		{
			get
			{
				return this.GetTable<CommentFromLmsItem>();
			}
		}
		
		public System.Data.Linq.Table<CompletionStatus> CompletionStatus
		{
			get
			{
				return this.GetTable<CompletionStatus>();
			}
		}
		
		public System.Data.Linq.Table<Configuration> Configurations
		{
			get
			{
				return this.GetTable<Configuration>();
			}
		}
		
		public System.Data.Linq.Table<CorrectResponseItem> CorrectResponseItems
		{
			get
			{
				return this.GetTable<CorrectResponseItem>();
			}
		}
		
		public System.Data.Linq.Table<Course> Courses
		{
			get
			{
				return this.GetTable<Course>();
			}
		}
		
		public System.Data.Linq.Table<CurriculumAssignment> CurriculumAssignments
		{
			get
			{
				return this.GetTable<CurriculumAssignment>();
			}
		}
		
		public System.Data.Linq.Table<DisplayMode> DisplayModes
		{
			get
			{
				return this.GetTable<DisplayMode>();
			}
		}
		
		public System.Data.Linq.Table<EvaluationCommentItem> EvaluationCommentItems
		{
			get
			{
				return this.GetTable<EvaluationCommentItem>();
			}
		}
		
		public System.Data.Linq.Table<ExitMode> ExitModes
		{
			get
			{
				return this.GetTable<ExitMode>();
			}
		}
		
		public System.Data.Linq.Table<ExtensionDataItem> ExtensionDataItems
		{
			get
			{
				return this.GetTable<ExtensionDataItem>();
			}
		}
		
		public System.Data.Linq.Table<GlobalObjectiveItem> GlobalObjectiveItems
		{
			get
			{
				return this.GetTable<GlobalObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<InteractionItem> InteractionItems
		{
			get
			{
				return this.GetTable<InteractionItem>();
			}
		}
		
		public System.Data.Linq.Table<InteractionObjectiveItem> InteractionObjectiveItems
		{
			get
			{
				return this.GetTable<InteractionObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<InteractionResultState> InteractionResultStates
		{
			get
			{
				return this.GetTable<InteractionResultState>();
			}
		}
		
		public System.Data.Linq.Table<InteractionType> InteractionTypes
		{
			get
			{
				return this.GetTable<InteractionType>();
			}
		}
		
		public System.Data.Linq.Table<LearnerGlobalObjectiveItem> LearnerGlobalObjectiveItems
		{
			get
			{
				return this.GetTable<LearnerGlobalObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<LessonStatus> LessonStatus
		{
			get
			{
				return this.GetTable<LessonStatus>();
			}
		}
		
		public System.Data.Linq.Table<MapActivityObjectiveToGlobalObjectiveItem> MapActivityObjectiveToGlobalObjectiveItems
		{
			get
			{
				return this.GetTable<MapActivityObjectiveToGlobalObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<NavigationCommand> NavigationCommands
		{
			get
			{
				return this.GetTable<NavigationCommand>();
			}
		}
		
		public System.Data.Linq.Table<Node> Nodes
		{
			get
			{
				return this.GetTable<Node>();
			}
		}
		
		public System.Data.Linq.Table<Operation> Operations
		{
			get
			{
				return this.GetTable<Operation>();
			}
		}
		
		public System.Data.Linq.Table<PackageFormat> PackageFormats
		{
			get
			{
				return this.GetTable<PackageFormat>();
			}
		}
		
		public System.Data.Linq.Table<PackageGlobalObjectiveItem> PackageGlobalObjectiveItems
		{
			get
			{
				return this.GetTable<PackageGlobalObjectiveItem>();
			}
		}
		
		public System.Data.Linq.Table<PackageItem> PackageItems
		{
			get
			{
				return this.GetTable<PackageItem>();
			}
		}
		
		public System.Data.Linq.Table<ResourceItem> ResourceItems
		{
			get
			{
				return this.GetTable<ResourceItem>();
			}
		}
		
		public System.Data.Linq.Table<RubricItem> RubricItems
		{
			get
			{
				return this.GetTable<RubricItem>();
			}
		}
		
		public System.Data.Linq.Table<SequencingEventType> SequencingEventTypes
		{
			get
			{
				return this.GetTable<SequencingEventType>();
			}
		}
		
		public System.Data.Linq.Table<SequencingLogEntryItem> SequencingLogEntryItems
		{
			get
			{
				return this.GetTable<SequencingLogEntryItem>();
			}
		}
		
		public System.Data.Linq.Table<SuccessStatus> SuccessStatus
		{
			get
			{
				return this.GetTable<SuccessStatus>();
			}
		}
		
		public System.Data.Linq.Table<TimeLimitAction> TimeLimitActions
		{
			get
			{
				return this.GetTable<TimeLimitAction>();
			}
		}
		
		public System.Data.Linq.Table<Timeline> Timelines
		{
			get
			{
				return this.GetTable<Timeline>();
			}
		}
		
		public System.Data.Linq.Table<Curriculum> Curriculums
		{
			get
			{
				return this.GetTable<Curriculum>();
			}
		}
		
		public System.Data.Linq.Table<Stage> Stages
		{
			get
			{
				return this.GetTable<Stage>();
			}
		}
		
		public System.Data.Linq.Table<Theme> Themes
		{
			get
			{
				return this.GetTable<Theme>();
			}
		}
		
		public System.Data.Linq.Table<Group> Groups
		{
			get
			{
				return this.GetTable<Group>();
			}
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<GroupUser> GroupUsers
		{
			get
			{
				return this.GetTable<GroupUser>();
			}
		}
		
		public System.Data.Linq.Table<Role> Roles
		{
			get
			{
				return this.GetTable<Role>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityAttemptItem")]
	public partial class ActivityAttemptItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AttemptId;
		
		private long _ActivityPackageId;
		
		private int _CompletionStatus;
		
		private System.Nullable<int> _AttemptCount;
		
		private System.Xml.Linq.XElement _DataModelCache;
		
		private System.Nullable<float> _EvaluationPoints;
		
		private System.Nullable<int> _Exit;
		
		private System.Nullable<int> _LessonStatus;
		
		private string _Location;
		
		private System.Nullable<float> _MinScore;
		
		private System.Nullable<float> _MaxScore;
		
		private System.Nullable<float> _ProgressMeasure;
		
		private System.Nullable<int> _RandomPlacement;
		
		private System.Nullable<float> _RawScore;
		
		private System.Nullable<float> _ScaledScore;
		
		private System.Xml.Linq.XElement _SequencingDataCache;
		
		private System.Nullable<System.DateTime> _SessionStartTimestamp;
		
		private System.Nullable<double> _SessionTime;
		
		private System.Nullable<int> _SuccessStatus;
		
		private string _SuspendData;
		
		private System.Nullable<double> _TotalTime;
		
		private EntitySet<AttemptObjectiveItem> _AttemptObjectiveItems;
		
		private EntitySet<CommentFromLearnerItem> _CommentFromLearnerItems;
		
		private EntitySet<ExtensionDataItem> _ExtensionDataItems;
		
		private EntitySet<InteractionItem> _InteractionItems;
		
		private EntitySet<SequencingLogEntryItem> _SequencingLogEntryItems;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem;
		
		private EntityRef<AttemptItem> _AttemptItem;
		
		private EntityRef<CompletionStatus> _CompletionStatus1;
		
		private EntityRef<ExitMode> _ExitMode;
		
		private EntityRef<LessonStatus> _LessonStatus1;
		
		private EntityRef<SuccessStatus> _SuccessStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAttemptIdChanging(long value);
    partial void OnAttemptIdChanged();
    partial void OnActivityPackageIdChanging(long value);
    partial void OnActivityPackageIdChanged();
    partial void OnCompletionStatusChanging(int value);
    partial void OnCompletionStatusChanged();
    partial void OnAttemptCountChanging(System.Nullable<int> value);
    partial void OnAttemptCountChanged();
    partial void OnDataModelCacheChanging(System.Xml.Linq.XElement value);
    partial void OnDataModelCacheChanged();
    partial void OnEvaluationPointsChanging(System.Nullable<float> value);
    partial void OnEvaluationPointsChanged();
    partial void OnExitChanging(System.Nullable<int> value);
    partial void OnExitChanged();
    partial void OnLessonStatusChanging(System.Nullable<int> value);
    partial void OnLessonStatusChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnMinScoreChanging(System.Nullable<float> value);
    partial void OnMinScoreChanged();
    partial void OnMaxScoreChanging(System.Nullable<float> value);
    partial void OnMaxScoreChanged();
    partial void OnProgressMeasureChanging(System.Nullable<float> value);
    partial void OnProgressMeasureChanged();
    partial void OnRandomPlacementChanging(System.Nullable<int> value);
    partial void OnRandomPlacementChanged();
    partial void OnRawScoreChanging(System.Nullable<float> value);
    partial void OnRawScoreChanged();
    partial void OnScaledScoreChanging(System.Nullable<float> value);
    partial void OnScaledScoreChanged();
    partial void OnSequencingDataCacheChanging(System.Xml.Linq.XElement value);
    partial void OnSequencingDataCacheChanged();
    partial void OnSessionStartTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnSessionStartTimestampChanged();
    partial void OnSessionTimeChanging(System.Nullable<double> value);
    partial void OnSessionTimeChanged();
    partial void OnSuccessStatusChanging(System.Nullable<int> value);
    partial void OnSuccessStatusChanged();
    partial void OnSuspendDataChanging(string value);
    partial void OnSuspendDataChanged();
    partial void OnTotalTimeChanging(System.Nullable<double> value);
    partial void OnTotalTimeChanged();
    #endregion
		
		public ActivityAttemptItem()
		{
			this._AttemptObjectiveItems = new EntitySet<AttemptObjectiveItem>(new Action<AttemptObjectiveItem>(this.attach_AttemptObjectiveItems), new Action<AttemptObjectiveItem>(this.detach_AttemptObjectiveItems));
			this._CommentFromLearnerItems = new EntitySet<CommentFromLearnerItem>(new Action<CommentFromLearnerItem>(this.attach_CommentFromLearnerItems), new Action<CommentFromLearnerItem>(this.detach_CommentFromLearnerItems));
			this._ExtensionDataItems = new EntitySet<ExtensionDataItem>(new Action<ExtensionDataItem>(this.attach_ExtensionDataItems), new Action<ExtensionDataItem>(this.detach_ExtensionDataItems));
			this._InteractionItems = new EntitySet<InteractionItem>(new Action<InteractionItem>(this.attach_InteractionItems), new Action<InteractionItem>(this.detach_InteractionItems));
			this._SequencingLogEntryItems = new EntitySet<SequencingLogEntryItem>(new Action<SequencingLogEntryItem>(this.attach_SequencingLogEntryItems), new Action<SequencingLogEntryItem>(this.detach_SequencingLogEntryItems));
			this._ActivityPackageItem = default(EntityRef<ActivityPackageItem>);
			this._AttemptItem = default(EntityRef<AttemptItem>);
			this._CompletionStatus1 = default(EntityRef<CompletionStatus>);
			this._ExitMode = default(EntityRef<ExitMode>);
			this._LessonStatus1 = default(EntityRef<LessonStatus>);
			this._SuccessStatus1 = default(EntityRef<SuccessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptId", DbType="BigInt NOT NULL")]
		public long AttemptId
		{
			get
			{
				return this._AttemptId;
			}
			set
			{
				if ((this._AttemptId != value))
				{
					if (this._AttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._AttemptId = value;
					this.SendPropertyChanged("AttemptId");
					this.OnAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityPackageId", DbType="BigInt NOT NULL")]
		public long ActivityPackageId
		{
			get
			{
				return this._ActivityPackageId;
			}
			set
			{
				if ((this._ActivityPackageId != value))
				{
					if (this._ActivityPackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityPackageId = value;
					this.SendPropertyChanged("ActivityPackageId");
					this.OnActivityPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionStatus", DbType="Int NOT NULL")]
		public int CompletionStatus
		{
			get
			{
				return this._CompletionStatus;
			}
			set
			{
				if ((this._CompletionStatus != value))
				{
					if (this._CompletionStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompletionStatusChanging(value);
					this.SendPropertyChanging();
					this._CompletionStatus = value;
					this.SendPropertyChanged("CompletionStatus");
					this.OnCompletionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptCount", DbType="Int")]
		public System.Nullable<int> AttemptCount
		{
			get
			{
				return this._AttemptCount;
			}
			set
			{
				if ((this._AttemptCount != value))
				{
					this.OnAttemptCountChanging(value);
					this.SendPropertyChanging();
					this._AttemptCount = value;
					this.SendPropertyChanged("AttemptCount");
					this.OnAttemptCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataModelCache", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement DataModelCache
		{
			get
			{
				return this._DataModelCache;
			}
			set
			{
				if ((this._DataModelCache != value))
				{
					this.OnDataModelCacheChanging(value);
					this.SendPropertyChanging();
					this._DataModelCache = value;
					this.SendPropertyChanged("DataModelCache");
					this.OnDataModelCacheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPoints", DbType="Real")]
		public System.Nullable<float> EvaluationPoints
		{
			get
			{
				return this._EvaluationPoints;
			}
			set
			{
				if ((this._EvaluationPoints != value))
				{
					this.OnEvaluationPointsChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPoints = value;
					this.SendPropertyChanged("EvaluationPoints");
					this.OnEvaluationPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Exit]", Storage="_Exit", DbType="Int")]
		public System.Nullable<int> Exit
		{
			get
			{
				return this._Exit;
			}
			set
			{
				if ((this._Exit != value))
				{
					this.OnExitChanging(value);
					this.SendPropertyChanging();
					this._Exit = value;
					this.SendPropertyChanged("Exit");
					this.OnExitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonStatus", DbType="Int")]
		public System.Nullable<int> LessonStatus
		{
			get
			{
				return this._LessonStatus;
			}
			set
			{
				if ((this._LessonStatus != value))
				{
					if (this._LessonStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonStatusChanging(value);
					this.SendPropertyChanging();
					this._LessonStatus = value;
					this.SendPropertyChanged("LessonStatus");
					this.OnLessonStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(1000)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinScore", DbType="Real")]
		public System.Nullable<float> MinScore
		{
			get
			{
				return this._MinScore;
			}
			set
			{
				if ((this._MinScore != value))
				{
					this.OnMinScoreChanging(value);
					this.SendPropertyChanging();
					this._MinScore = value;
					this.SendPropertyChanged("MinScore");
					this.OnMinScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Real")]
		public System.Nullable<float> MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgressMeasure", DbType="Real")]
		public System.Nullable<float> ProgressMeasure
		{
			get
			{
				return this._ProgressMeasure;
			}
			set
			{
				if ((this._ProgressMeasure != value))
				{
					this.OnProgressMeasureChanging(value);
					this.SendPropertyChanging();
					this._ProgressMeasure = value;
					this.SendPropertyChanged("ProgressMeasure");
					this.OnProgressMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RandomPlacement", DbType="Int")]
		public System.Nullable<int> RandomPlacement
		{
			get
			{
				return this._RandomPlacement;
			}
			set
			{
				if ((this._RandomPlacement != value))
				{
					this.OnRandomPlacementChanging(value);
					this.SendPropertyChanging();
					this._RandomPlacement = value;
					this.SendPropertyChanged("RandomPlacement");
					this.OnRandomPlacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawScore", DbType="Real")]
		public System.Nullable<float> RawScore
		{
			get
			{
				return this._RawScore;
			}
			set
			{
				if ((this._RawScore != value))
				{
					this.OnRawScoreChanging(value);
					this.SendPropertyChanging();
					this._RawScore = value;
					this.SendPropertyChanged("RawScore");
					this.OnRawScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaledScore", DbType="Real")]
		public System.Nullable<float> ScaledScore
		{
			get
			{
				return this._ScaledScore;
			}
			set
			{
				if ((this._ScaledScore != value))
				{
					this.OnScaledScoreChanging(value);
					this.SendPropertyChanging();
					this._ScaledScore = value;
					this.SendPropertyChanged("ScaledScore");
					this.OnScaledScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SequencingDataCache", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement SequencingDataCache
		{
			get
			{
				return this._SequencingDataCache;
			}
			set
			{
				if ((this._SequencingDataCache != value))
				{
					this.OnSequencingDataCacheChanging(value);
					this.SendPropertyChanging();
					this._SequencingDataCache = value;
					this.SendPropertyChanged("SequencingDataCache");
					this.OnSequencingDataCacheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionStartTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> SessionStartTimestamp
		{
			get
			{
				return this._SessionStartTimestamp;
			}
			set
			{
				if ((this._SessionStartTimestamp != value))
				{
					this.OnSessionStartTimestampChanging(value);
					this.SendPropertyChanging();
					this._SessionStartTimestamp = value;
					this.SendPropertyChanged("SessionStartTimestamp");
					this.OnSessionStartTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SessionTime", DbType="Float")]
		public System.Nullable<double> SessionTime
		{
			get
			{
				return this._SessionTime;
			}
			set
			{
				if ((this._SessionTime != value))
				{
					this.OnSessionTimeChanging(value);
					this.SendPropertyChanging();
					this._SessionTime = value;
					this.SendPropertyChanged("SessionTime");
					this.OnSessionTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessStatus", DbType="Int")]
		public System.Nullable<int> SuccessStatus
		{
			get
			{
				return this._SuccessStatus;
			}
			set
			{
				if ((this._SuccessStatus != value))
				{
					if (this._SuccessStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuccessStatusChanging(value);
					this.SendPropertyChanging();
					this._SuccessStatus = value;
					this.SendPropertyChanged("SuccessStatus");
					this.OnSuccessStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuspendData", DbType="NVarChar(MAX)")]
		public string SuspendData
		{
			get
			{
				return this._SuspendData;
			}
			set
			{
				if ((this._SuspendData != value))
				{
					this.OnSuspendDataChanging(value);
					this.SendPropertyChanging();
					this._SuspendData = value;
					this.SendPropertyChanged("SuspendData");
					this.OnSuspendDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalTime", DbType="Float")]
		public System.Nullable<double> TotalTime
		{
			get
			{
				return this._TotalTime;
			}
			set
			{
				if ((this._TotalTime != value))
				{
					this.OnTotalTimeChanging(value);
					this.SendPropertyChanging();
					this._TotalTime = value;
					this.SendPropertyChanged("TotalTime");
					this.OnTotalTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_AttemptObjectiveItem", Storage="_AttemptObjectiveItems", ThisKey="Id", OtherKey="ActivityAttemptId")]
		public EntitySet<AttemptObjectiveItem> AttemptObjectiveItems
		{
			get
			{
				return this._AttemptObjectiveItems;
			}
			set
			{
				this._AttemptObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_CommentFromLearnerItem", Storage="_CommentFromLearnerItems", ThisKey="Id", OtherKey="ActivityAttemptId")]
		public EntitySet<CommentFromLearnerItem> CommentFromLearnerItems
		{
			get
			{
				return this._CommentFromLearnerItems;
			}
			set
			{
				this._CommentFromLearnerItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_ExtensionDataItem", Storage="_ExtensionDataItems", ThisKey="Id", OtherKey="ActivityAttemptId")]
		public EntitySet<ExtensionDataItem> ExtensionDataItems
		{
			get
			{
				return this._ExtensionDataItems;
			}
			set
			{
				this._ExtensionDataItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_InteractionItem", Storage="_InteractionItems", ThisKey="Id", OtherKey="ActivityAttemptId")]
		public EntitySet<InteractionItem> InteractionItems
		{
			get
			{
				return this._InteractionItems;
			}
			set
			{
				this._InteractionItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_SequencingLogEntryItem", Storage="_SequencingLogEntryItems", ThisKey="Id", OtherKey="ActivityAttemptId")]
		public EntitySet<SequencingLogEntryItem> SequencingLogEntryItems
		{
			get
			{
				return this._SequencingLogEntryItems;
			}
			set
			{
				this._SequencingLogEntryItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_ActivityAttemptItem", Storage="_ActivityPackageItem", ThisKey="ActivityPackageId", OtherKey="Id", IsForeignKey=true)]
		public ActivityPackageItem ActivityPackageItem
		{
			get
			{
				return this._ActivityPackageItem.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem.Entity = null;
						previousValue.ActivityAttemptItems.Remove(this);
					}
					this._ActivityPackageItem.Entity = value;
					if ((value != null))
					{
						value.ActivityAttemptItems.Add(this);
						this._ActivityPackageId = value.Id;
					}
					else
					{
						this._ActivityPackageId = default(long);
					}
					this.SendPropertyChanged("ActivityPackageItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptItem_ActivityAttemptItem", Storage="_AttemptItem", ThisKey="AttemptId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AttemptItem AttemptItem
		{
			get
			{
				return this._AttemptItem.Entity;
			}
			set
			{
				AttemptItem previousValue = this._AttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._AttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttemptItem.Entity = null;
						previousValue.ActivityAttemptItems.Remove(this);
					}
					this._AttemptItem.Entity = value;
					if ((value != null))
					{
						value.ActivityAttemptItems.Add(this);
						this._AttemptId = value.Id;
					}
					else
					{
						this._AttemptId = default(long);
					}
					this.SendPropertyChanged("AttemptItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionStatus_ActivityAttemptItem", Storage="_CompletionStatus1", ThisKey="CompletionStatus", OtherKey="Id", IsForeignKey=true)]
		public CompletionStatus CompletionStatus1
		{
			get
			{
				return this._CompletionStatus1.Entity;
			}
			set
			{
				CompletionStatus previousValue = this._CompletionStatus1.Entity;
				if (((previousValue != value) 
							|| (this._CompletionStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletionStatus1.Entity = null;
						previousValue.ActivityAttemptItems.Remove(this);
					}
					this._CompletionStatus1.Entity = value;
					if ((value != null))
					{
						value.ActivityAttemptItems.Add(this);
						this._CompletionStatus = value.Id;
					}
					else
					{
						this._CompletionStatus = default(int);
					}
					this.SendPropertyChanged("CompletionStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExitMode_ActivityAttemptItem", Storage="_ExitMode", ThisKey="Exit", OtherKey="Id", IsForeignKey=true)]
		public ExitMode ExitMode
		{
			get
			{
				return this._ExitMode.Entity;
			}
			set
			{
				ExitMode previousValue = this._ExitMode.Entity;
				if (((previousValue != value) 
							|| (this._ExitMode.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ExitMode.Entity = null;
						previousValue.ActivityAttemptItems.Remove(this);
					}
					this._ExitMode.Entity = value;
					if ((value != null))
					{
						value.ActivityAttemptItems.Add(this);
						this._Exit = value.Id;
					}
					else
					{
						this._Exit = default(Nullable<int>);
					}
					this.SendPropertyChanged("ExitMode");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonStatus_ActivityAttemptItem", Storage="_LessonStatus1", ThisKey="LessonStatus", OtherKey="Id", IsForeignKey=true)]
		public LessonStatus LessonStatus1
		{
			get
			{
				return this._LessonStatus1.Entity;
			}
			set
			{
				LessonStatus previousValue = this._LessonStatus1.Entity;
				if (((previousValue != value) 
							|| (this._LessonStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonStatus1.Entity = null;
						previousValue.ActivityAttemptItems.Remove(this);
					}
					this._LessonStatus1.Entity = value;
					if ((value != null))
					{
						value.ActivityAttemptItems.Add(this);
						this._LessonStatus = value.Id;
					}
					else
					{
						this._LessonStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_ActivityAttemptItem", Storage="_SuccessStatus1", ThisKey="SuccessStatus", OtherKey="Id", IsForeignKey=true)]
		public SuccessStatus SuccessStatus1
		{
			get
			{
				return this._SuccessStatus1.Entity;
			}
			set
			{
				SuccessStatus previousValue = this._SuccessStatus1.Entity;
				if (((previousValue != value) 
							|| (this._SuccessStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuccessStatus1.Entity = null;
						previousValue.ActivityAttemptItems.Remove(this);
					}
					this._SuccessStatus1.Entity = value;
					if ((value != null))
					{
						value.ActivityAttemptItems.Add(this);
						this._SuccessStatus = value.Id;
					}
					else
					{
						this._SuccessStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("SuccessStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = this;
		}
		
		private void detach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = null;
		}
		
		private void attach_CommentFromLearnerItems(CommentFromLearnerItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = this;
		}
		
		private void detach_CommentFromLearnerItems(CommentFromLearnerItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = null;
		}
		
		private void attach_ExtensionDataItems(ExtensionDataItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = this;
		}
		
		private void detach_ExtensionDataItems(ExtensionDataItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = null;
		}
		
		private void attach_InteractionItems(InteractionItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = this;
		}
		
		private void detach_InteractionItems(InteractionItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = null;
		}
		
		private void attach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = this;
		}
		
		private void detach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityAttemptItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserItem")]
	public partial class UserItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _Key;
		
		private string _Name;
		
		private int _AudioCaptioning;
		
		private float _AudioLevel;
		
		private float _DeliverySpeed;
		
		private string _Language;
		
		private EntitySet<AttemptItem> _AttemptItems;
		
		private EntitySet<LearnerGlobalObjectiveItem> _LearnerGlobalObjectiveItems;
		
		private EntitySet<PackageGlobalObjectiveItem> _PackageGlobalObjectiveItems;
		
		private EntitySet<PackageItem> _PackageItems;
		
		private EntityRef<AudioCaptioning> _AudioCaptioning1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAudioCaptioningChanging(int value);
    partial void OnAudioCaptioningChanged();
    partial void OnAudioLevelChanging(float value);
    partial void OnAudioLevelChanged();
    partial void OnDeliverySpeedChanging(float value);
    partial void OnDeliverySpeedChanged();
    partial void OnLanguageChanging(string value);
    partial void OnLanguageChanged();
    #endregion
		
		public UserItem()
		{
			this._AttemptItems = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems), new Action<AttemptItem>(this.detach_AttemptItems));
			this._LearnerGlobalObjectiveItems = new EntitySet<LearnerGlobalObjectiveItem>(new Action<LearnerGlobalObjectiveItem>(this.attach_LearnerGlobalObjectiveItems), new Action<LearnerGlobalObjectiveItem>(this.detach_LearnerGlobalObjectiveItems));
			this._PackageGlobalObjectiveItems = new EntitySet<PackageGlobalObjectiveItem>(new Action<PackageGlobalObjectiveItem>(this.attach_PackageGlobalObjectiveItems), new Action<PackageGlobalObjectiveItem>(this.detach_PackageGlobalObjectiveItems));
			this._PackageItems = new EntitySet<PackageItem>(new Action<PackageItem>(this.attach_PackageItems), new Action<PackageItem>(this.detach_PackageItems));
			this._AudioCaptioning1 = default(EntityRef<AudioCaptioning>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(250) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioCaptioning", DbType="Int NOT NULL")]
		public int AudioCaptioning
		{
			get
			{
				return this._AudioCaptioning;
			}
			set
			{
				if ((this._AudioCaptioning != value))
				{
					if (this._AudioCaptioning1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAudioCaptioningChanging(value);
					this.SendPropertyChanging();
					this._AudioCaptioning = value;
					this.SendPropertyChanged("AudioCaptioning");
					this.OnAudioCaptioningChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AudioLevel", DbType="Real NOT NULL")]
		public float AudioLevel
		{
			get
			{
				return this._AudioLevel;
			}
			set
			{
				if ((this._AudioLevel != value))
				{
					this.OnAudioLevelChanging(value);
					this.SendPropertyChanging();
					this._AudioLevel = value;
					this.SendPropertyChanged("AudioLevel");
					this.OnAudioLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeliverySpeed", DbType="Real NOT NULL")]
		public float DeliverySpeed
		{
			get
			{
				return this._DeliverySpeed;
			}
			set
			{
				if ((this._DeliverySpeed != value))
				{
					this.OnDeliverySpeedChanging(value);
					this.SendPropertyChanging();
					this._DeliverySpeed = value;
					this.SendPropertyChanged("DeliverySpeed");
					this.OnDeliverySpeedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Language", DbType="NVarChar(255) NOT NULL", CanBeNull=false)]
		public string Language
		{
			get
			{
				return this._Language;
			}
			set
			{
				if ((this._Language != value))
				{
					this.OnLanguageChanging(value);
					this.SendPropertyChanging();
					this._Language = value;
					this.SendPropertyChanged("Language");
					this.OnLanguageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_AttemptItem", Storage="_AttemptItems", ThisKey="Id", OtherKey="LearnerId")]
		public EntitySet<AttemptItem> AttemptItems
		{
			get
			{
				return this._AttemptItems;
			}
			set
			{
				this._AttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_LearnerGlobalObjectiveItem", Storage="_LearnerGlobalObjectiveItems", ThisKey="Id", OtherKey="LearnerId")]
		public EntitySet<LearnerGlobalObjectiveItem> LearnerGlobalObjectiveItems
		{
			get
			{
				return this._LearnerGlobalObjectiveItems;
			}
			set
			{
				this._LearnerGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_PackageGlobalObjectiveItem", Storage="_PackageGlobalObjectiveItems", ThisKey="Id", OtherKey="LearnerId")]
		public EntitySet<PackageGlobalObjectiveItem> PackageGlobalObjectiveItems
		{
			get
			{
				return this._PackageGlobalObjectiveItems;
			}
			set
			{
				this._PackageGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_PackageItem", Storage="_PackageItems", ThisKey="Id", OtherKey="Owner")]
		public EntitySet<PackageItem> PackageItems
		{
			get
			{
				return this._PackageItems;
			}
			set
			{
				this._PackageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AudioCaptioning_UserItem", Storage="_AudioCaptioning1", ThisKey="AudioCaptioning", OtherKey="Id", IsForeignKey=true)]
		public AudioCaptioning AudioCaptioning1
		{
			get
			{
				return this._AudioCaptioning1.Entity;
			}
			set
			{
				AudioCaptioning previousValue = this._AudioCaptioning1.Entity;
				if (((previousValue != value) 
							|| (this._AudioCaptioning1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AudioCaptioning1.Entity = null;
						previousValue.UserItems.Remove(this);
					}
					this._AudioCaptioning1.Entity = value;
					if ((value != null))
					{
						value.UserItems.Add(this);
						this._AudioCaptioning = value.Id;
					}
					else
					{
						this._AudioCaptioning = default(int);
					}
					this.SendPropertyChanged("AudioCaptioning1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = this;
		}
		
		private void detach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = null;
		}
		
		private void attach_LearnerGlobalObjectiveItems(LearnerGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = this;
		}
		
		private void detach_LearnerGlobalObjectiveItems(LearnerGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = null;
		}
		
		private void attach_PackageGlobalObjectiveItems(PackageGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = this;
		}
		
		private void detach_PackageGlobalObjectiveItems(PackageGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = null;
		}
		
		private void attach_PackageItems(PackageItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = this;
		}
		
		private void detach_PackageItems(PackageItem entity)
		{
			this.SendPropertyChanging();
			entity.UserItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityObjectiveItem")]
	public partial class ActivityObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ActivityPackageId;
		
		private bool _IsPrimaryObjective;
		
		private string _Key;
		
		private float _MinNormalizedMeasure;
		
		private bool _SatisfiedByMeasure;
		
		private EntitySet<ActivityPackageItem> _ActivityPackageItems;
		
		private EntitySet<AttemptObjectiveItem> _AttemptObjectiveItems;
		
		private EntitySet<MapActivityObjectiveToGlobalObjectiveItem> _MapActivityObjectiveToGlobalObjectiveItems;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityPackageIdChanging(long value);
    partial void OnActivityPackageIdChanged();
    partial void OnIsPrimaryObjectiveChanging(bool value);
    partial void OnIsPrimaryObjectiveChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnMinNormalizedMeasureChanging(float value);
    partial void OnMinNormalizedMeasureChanged();
    partial void OnSatisfiedByMeasureChanging(bool value);
    partial void OnSatisfiedByMeasureChanged();
    #endregion
		
		public ActivityObjectiveItem()
		{
			this._ActivityPackageItems = new EntitySet<ActivityPackageItem>(new Action<ActivityPackageItem>(this.attach_ActivityPackageItems), new Action<ActivityPackageItem>(this.detach_ActivityPackageItems));
			this._AttemptObjectiveItems = new EntitySet<AttemptObjectiveItem>(new Action<AttemptObjectiveItem>(this.attach_AttemptObjectiveItems), new Action<AttemptObjectiveItem>(this.detach_AttemptObjectiveItems));
			this._MapActivityObjectiveToGlobalObjectiveItems = new EntitySet<MapActivityObjectiveToGlobalObjectiveItem>(new Action<MapActivityObjectiveToGlobalObjectiveItem>(this.attach_MapActivityObjectiveToGlobalObjectiveItems), new Action<MapActivityObjectiveToGlobalObjectiveItem>(this.detach_MapActivityObjectiveToGlobalObjectiveItems));
			this._ActivityPackageItem = default(EntityRef<ActivityPackageItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityPackageId", DbType="BigInt NOT NULL")]
		public long ActivityPackageId
		{
			get
			{
				return this._ActivityPackageId;
			}
			set
			{
				if ((this._ActivityPackageId != value))
				{
					if (this._ActivityPackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityPackageId = value;
					this.SendPropertyChanged("ActivityPackageId");
					this.OnActivityPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrimaryObjective", DbType="Bit NOT NULL")]
		public bool IsPrimaryObjective
		{
			get
			{
				return this._IsPrimaryObjective;
			}
			set
			{
				if ((this._IsPrimaryObjective != value))
				{
					this.OnIsPrimaryObjectiveChanging(value);
					this.SendPropertyChanging();
					this._IsPrimaryObjective = value;
					this.SendPropertyChanged("IsPrimaryObjective");
					this.OnIsPrimaryObjectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(MAX)")]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinNormalizedMeasure", DbType="Real NOT NULL")]
		public float MinNormalizedMeasure
		{
			get
			{
				return this._MinNormalizedMeasure;
			}
			set
			{
				if ((this._MinNormalizedMeasure != value))
				{
					this.OnMinNormalizedMeasureChanging(value);
					this.SendPropertyChanging();
					this._MinNormalizedMeasure = value;
					this.SendPropertyChanged("MinNormalizedMeasure");
					this.OnMinNormalizedMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SatisfiedByMeasure", DbType="Bit NOT NULL")]
		public bool SatisfiedByMeasure
		{
			get
			{
				return this._SatisfiedByMeasure;
			}
			set
			{
				if ((this._SatisfiedByMeasure != value))
				{
					this.OnSatisfiedByMeasureChanging(value);
					this.SendPropertyChanging();
					this._SatisfiedByMeasure = value;
					this.SendPropertyChanged("SatisfiedByMeasure");
					this.OnSatisfiedByMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityObjectiveItem_ActivityPackageItem", Storage="_ActivityPackageItems", ThisKey="Id", OtherKey="PrimaryObjectiveId")]
		public EntitySet<ActivityPackageItem> ActivityPackageItems
		{
			get
			{
				return this._ActivityPackageItems;
			}
			set
			{
				this._ActivityPackageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityObjectiveItem_AttemptObjectiveItem", Storage="_AttemptObjectiveItems", ThisKey="Id", OtherKey="ActivityObjectiveId")]
		public EntitySet<AttemptObjectiveItem> AttemptObjectiveItems
		{
			get
			{
				return this._AttemptObjectiveItems;
			}
			set
			{
				this._AttemptObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityObjectiveItem_MapActivityObjectiveToGlobalObjectiveItem", Storage="_MapActivityObjectiveToGlobalObjectiveItems", ThisKey="Id", OtherKey="ActivityObjectiveId")]
		public EntitySet<MapActivityObjectiveToGlobalObjectiveItem> MapActivityObjectiveToGlobalObjectiveItems
		{
			get
			{
				return this._MapActivityObjectiveToGlobalObjectiveItems;
			}
			set
			{
				this._MapActivityObjectiveToGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_ActivityObjectiveItem", Storage="_ActivityPackageItem", ThisKey="ActivityPackageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ActivityPackageItem ActivityPackageItem
		{
			get
			{
				return this._ActivityPackageItem.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem.Entity = null;
						previousValue.ActivityObjectiveItems.Remove(this);
					}
					this._ActivityPackageItem.Entity = value;
					if ((value != null))
					{
						value.ActivityObjectiveItems.Add(this);
						this._ActivityPackageId = value.Id;
					}
					else
					{
						this._ActivityPackageId = default(long);
					}
					this.SendPropertyChanged("ActivityPackageItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityObjectiveItem = this;
		}
		
		private void detach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityObjectiveItem = null;
		}
		
		private void attach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityObjectiveItem = this;
		}
		
		private void detach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityObjectiveItem = null;
		}
		
		private void attach_MapActivityObjectiveToGlobalObjectiveItems(MapActivityObjectiveToGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityObjectiveItem = this;
		}
		
		private void detach_MapActivityObjectiveToGlobalObjectiveItems(MapActivityObjectiveToGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityObjectiveItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ActivityPackageItem")]
	public partial class ActivityPackageItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private string _ActivityIdFromManifest;
		
		private int _OriginalPlacement;
		
		private System.Nullable<long> _ParentActivityId;
		
		private long _PackageId;
		
		private System.Nullable<long> _PrimaryObjectiveId;
		
		private System.Nullable<long> _ResourceId;
		
		private string _PrimaryResourceFromManifest;
		
		private System.Xml.Linq.XElement _DataModelCache;
		
		private System.Nullable<float> _CompletionThreshold;
		
		private System.Nullable<bool> _Credit;
		
		private bool _HideContinue;
		
		private bool _HidePrevious;
		
		private bool _HideExit;
		
		private bool _HideAbandon;
		
		private bool _IsVisibleInContents;
		
		private string _LaunchData;
		
		private System.Nullable<float> _MasteryScore;
		
		private System.Nullable<int> _MaxAttempts;
		
		private System.Nullable<double> _MaxTimeAllowed;
		
		private string _ResourceParameters;
		
		private System.Nullable<float> _ScaledPassingScore;
		
		private System.Nullable<int> _TimeLimitAction;
		
		private string _Title;
		
		private bool _ObjectivesGlobalToSystem;
		
		private EntitySet<ActivityAttemptItem> _ActivityAttemptItems;
		
		private EntitySet<ActivityObjectiveItem> _ActivityObjectiveItems;
		
		private EntitySet<ActivityPackageItem> _ActivityPackageItems;
		
		private EntitySet<AttemptItem> _AttemptItems;
		
		private EntitySet<AttemptItem> _AttemptItems1;
		
		private EntitySet<AttemptItem> _AttemptItems2;
		
		private EntitySet<CommentFromLmsItem> _CommentFromLmsItems;
		
		private EntitySet<GlobalObjectiveItem> _GlobalObjectiveItems;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem1;
		
		private EntityRef<ActivityObjectiveItem> _ActivityObjectiveItem;
		
		private EntityRef<PackageItem> _PackageItem;
		
		private EntityRef<ResourceItem> _ResourceItem;
		
		private EntityRef<TimeLimitAction> _TimeLimitAction1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityIdFromManifestChanging(string value);
    partial void OnActivityIdFromManifestChanged();
    partial void OnOriginalPlacementChanging(int value);
    partial void OnOriginalPlacementChanged();
    partial void OnParentActivityIdChanging(System.Nullable<long> value);
    partial void OnParentActivityIdChanged();
    partial void OnPackageIdChanging(long value);
    partial void OnPackageIdChanged();
    partial void OnPrimaryObjectiveIdChanging(System.Nullable<long> value);
    partial void OnPrimaryObjectiveIdChanged();
    partial void OnResourceIdChanging(System.Nullable<long> value);
    partial void OnResourceIdChanged();
    partial void OnPrimaryResourceFromManifestChanging(string value);
    partial void OnPrimaryResourceFromManifestChanged();
    partial void OnDataModelCacheChanging(System.Xml.Linq.XElement value);
    partial void OnDataModelCacheChanged();
    partial void OnCompletionThresholdChanging(System.Nullable<float> value);
    partial void OnCompletionThresholdChanged();
    partial void OnCreditChanging(System.Nullable<bool> value);
    partial void OnCreditChanged();
    partial void OnHideContinueChanging(bool value);
    partial void OnHideContinueChanged();
    partial void OnHidePreviousChanging(bool value);
    partial void OnHidePreviousChanged();
    partial void OnHideExitChanging(bool value);
    partial void OnHideExitChanged();
    partial void OnHideAbandonChanging(bool value);
    partial void OnHideAbandonChanged();
    partial void OnIsVisibleInContentsChanging(bool value);
    partial void OnIsVisibleInContentsChanged();
    partial void OnLaunchDataChanging(string value);
    partial void OnLaunchDataChanged();
    partial void OnMasteryScoreChanging(System.Nullable<float> value);
    partial void OnMasteryScoreChanged();
    partial void OnMaxAttemptsChanging(System.Nullable<int> value);
    partial void OnMaxAttemptsChanged();
    partial void OnMaxTimeAllowedChanging(System.Nullable<double> value);
    partial void OnMaxTimeAllowedChanged();
    partial void OnResourceParametersChanging(string value);
    partial void OnResourceParametersChanged();
    partial void OnScaledPassingScoreChanging(System.Nullable<float> value);
    partial void OnScaledPassingScoreChanged();
    partial void OnTimeLimitActionChanging(System.Nullable<int> value);
    partial void OnTimeLimitActionChanged();
    partial void OnTitleChanging(string value);
    partial void OnTitleChanged();
    partial void OnObjectivesGlobalToSystemChanging(bool value);
    partial void OnObjectivesGlobalToSystemChanged();
    #endregion
		
		public ActivityPackageItem()
		{
			this._ActivityAttemptItems = new EntitySet<ActivityAttemptItem>(new Action<ActivityAttemptItem>(this.attach_ActivityAttemptItems), new Action<ActivityAttemptItem>(this.detach_ActivityAttemptItems));
			this._ActivityObjectiveItems = new EntitySet<ActivityObjectiveItem>(new Action<ActivityObjectiveItem>(this.attach_ActivityObjectiveItems), new Action<ActivityObjectiveItem>(this.detach_ActivityObjectiveItems));
			this._ActivityPackageItems = new EntitySet<ActivityPackageItem>(new Action<ActivityPackageItem>(this.attach_ActivityPackageItems), new Action<ActivityPackageItem>(this.detach_ActivityPackageItems));
			this._AttemptItems = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems), new Action<AttemptItem>(this.detach_AttemptItems));
			this._AttemptItems1 = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems1), new Action<AttemptItem>(this.detach_AttemptItems1));
			this._AttemptItems2 = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems2), new Action<AttemptItem>(this.detach_AttemptItems2));
			this._CommentFromLmsItems = new EntitySet<CommentFromLmsItem>(new Action<CommentFromLmsItem>(this.attach_CommentFromLmsItems), new Action<CommentFromLmsItem>(this.detach_CommentFromLmsItems));
			this._GlobalObjectiveItems = new EntitySet<GlobalObjectiveItem>(new Action<GlobalObjectiveItem>(this.attach_GlobalObjectiveItems), new Action<GlobalObjectiveItem>(this.detach_GlobalObjectiveItems));
			this._ActivityPackageItem1 = default(EntityRef<ActivityPackageItem>);
			this._ActivityObjectiveItem = default(EntityRef<ActivityObjectiveItem>);
			this._PackageItem = default(EntityRef<PackageItem>);
			this._ResourceItem = default(EntityRef<ResourceItem>);
			this._TimeLimitAction1 = default(EntityRef<TimeLimitAction>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityIdFromManifest", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ActivityIdFromManifest
		{
			get
			{
				return this._ActivityIdFromManifest;
			}
			set
			{
				if ((this._ActivityIdFromManifest != value))
				{
					this.OnActivityIdFromManifestChanging(value);
					this.SendPropertyChanging();
					this._ActivityIdFromManifest = value;
					this.SendPropertyChanged("ActivityIdFromManifest");
					this.OnActivityIdFromManifestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OriginalPlacement", DbType="Int NOT NULL")]
		public int OriginalPlacement
		{
			get
			{
				return this._OriginalPlacement;
			}
			set
			{
				if ((this._OriginalPlacement != value))
				{
					this.OnOriginalPlacementChanging(value);
					this.SendPropertyChanging();
					this._OriginalPlacement = value;
					this.SendPropertyChanged("OriginalPlacement");
					this.OnOriginalPlacementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentActivityId", DbType="BigInt")]
		public System.Nullable<long> ParentActivityId
		{
			get
			{
				return this._ParentActivityId;
			}
			set
			{
				if ((this._ParentActivityId != value))
				{
					if (this._ActivityPackageItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentActivityIdChanging(value);
					this.SendPropertyChanging();
					this._ParentActivityId = value;
					this.SendPropertyChanged("ParentActivityId");
					this.OnParentActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="BigInt NOT NULL")]
		public long PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._PackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryObjectiveId", DbType="BigInt")]
		public System.Nullable<long> PrimaryObjectiveId
		{
			get
			{
				return this._PrimaryObjectiveId;
			}
			set
			{
				if ((this._PrimaryObjectiveId != value))
				{
					if (this._ActivityObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._PrimaryObjectiveId = value;
					this.SendPropertyChanged("PrimaryObjectiveId");
					this.OnPrimaryObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="BigInt")]
		public System.Nullable<long> ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._ResourceItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrimaryResourceFromManifest", DbType="NVarChar(2000)")]
		public string PrimaryResourceFromManifest
		{
			get
			{
				return this._PrimaryResourceFromManifest;
			}
			set
			{
				if ((this._PrimaryResourceFromManifest != value))
				{
					this.OnPrimaryResourceFromManifestChanging(value);
					this.SendPropertyChanging();
					this._PrimaryResourceFromManifest = value;
					this.SendPropertyChanged("PrimaryResourceFromManifest");
					this.OnPrimaryResourceFromManifestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DataModelCache", DbType="Xml", UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement DataModelCache
		{
			get
			{
				return this._DataModelCache;
			}
			set
			{
				if ((this._DataModelCache != value))
				{
					this.OnDataModelCacheChanging(value);
					this.SendPropertyChanging();
					this._DataModelCache = value;
					this.SendPropertyChanged("DataModelCache");
					this.OnDataModelCacheChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionThreshold", DbType="Real")]
		public System.Nullable<float> CompletionThreshold
		{
			get
			{
				return this._CompletionThreshold;
			}
			set
			{
				if ((this._CompletionThreshold != value))
				{
					this.OnCompletionThresholdChanging(value);
					this.SendPropertyChanging();
					this._CompletionThreshold = value;
					this.SendPropertyChanged("CompletionThreshold");
					this.OnCompletionThresholdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Credit", DbType="Bit")]
		public System.Nullable<bool> Credit
		{
			get
			{
				return this._Credit;
			}
			set
			{
				if ((this._Credit != value))
				{
					this.OnCreditChanging(value);
					this.SendPropertyChanging();
					this._Credit = value;
					this.SendPropertyChanged("Credit");
					this.OnCreditChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideContinue", DbType="Bit NOT NULL")]
		public bool HideContinue
		{
			get
			{
				return this._HideContinue;
			}
			set
			{
				if ((this._HideContinue != value))
				{
					this.OnHideContinueChanging(value);
					this.SendPropertyChanging();
					this._HideContinue = value;
					this.SendPropertyChanged("HideContinue");
					this.OnHideContinueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HidePrevious", DbType="Bit NOT NULL")]
		public bool HidePrevious
		{
			get
			{
				return this._HidePrevious;
			}
			set
			{
				if ((this._HidePrevious != value))
				{
					this.OnHidePreviousChanging(value);
					this.SendPropertyChanging();
					this._HidePrevious = value;
					this.SendPropertyChanged("HidePrevious");
					this.OnHidePreviousChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideExit", DbType="Bit NOT NULL")]
		public bool HideExit
		{
			get
			{
				return this._HideExit;
			}
			set
			{
				if ((this._HideExit != value))
				{
					this.OnHideExitChanging(value);
					this.SendPropertyChanging();
					this._HideExit = value;
					this.SendPropertyChanged("HideExit");
					this.OnHideExitChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_HideAbandon", DbType="Bit NOT NULL")]
		public bool HideAbandon
		{
			get
			{
				return this._HideAbandon;
			}
			set
			{
				if ((this._HideAbandon != value))
				{
					this.OnHideAbandonChanging(value);
					this.SendPropertyChanging();
					this._HideAbandon = value;
					this.SendPropertyChanged("HideAbandon");
					this.OnHideAbandonChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsVisibleInContents", DbType="Bit NOT NULL")]
		public bool IsVisibleInContents
		{
			get
			{
				return this._IsVisibleInContents;
			}
			set
			{
				if ((this._IsVisibleInContents != value))
				{
					this.OnIsVisibleInContentsChanging(value);
					this.SendPropertyChanging();
					this._IsVisibleInContents = value;
					this.SendPropertyChanged("IsVisibleInContents");
					this.OnIsVisibleInContentsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LaunchData", DbType="NVarChar(MAX)")]
		public string LaunchData
		{
			get
			{
				return this._LaunchData;
			}
			set
			{
				if ((this._LaunchData != value))
				{
					this.OnLaunchDataChanging(value);
					this.SendPropertyChanging();
					this._LaunchData = value;
					this.SendPropertyChanged("LaunchData");
					this.OnLaunchDataChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MasteryScore", DbType="Real")]
		public System.Nullable<float> MasteryScore
		{
			get
			{
				return this._MasteryScore;
			}
			set
			{
				if ((this._MasteryScore != value))
				{
					this.OnMasteryScoreChanging(value);
					this.SendPropertyChanging();
					this._MasteryScore = value;
					this.SendPropertyChanged("MasteryScore");
					this.OnMasteryScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxAttempts", DbType="Int")]
		public System.Nullable<int> MaxAttempts
		{
			get
			{
				return this._MaxAttempts;
			}
			set
			{
				if ((this._MaxAttempts != value))
				{
					this.OnMaxAttemptsChanging(value);
					this.SendPropertyChanging();
					this._MaxAttempts = value;
					this.SendPropertyChanged("MaxAttempts");
					this.OnMaxAttemptsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxTimeAllowed", DbType="Float")]
		public System.Nullable<double> MaxTimeAllowed
		{
			get
			{
				return this._MaxTimeAllowed;
			}
			set
			{
				if ((this._MaxTimeAllowed != value))
				{
					this.OnMaxTimeAllowedChanging(value);
					this.SendPropertyChanging();
					this._MaxTimeAllowed = value;
					this.SendPropertyChanged("MaxTimeAllowed");
					this.OnMaxTimeAllowedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceParameters", DbType="NVarChar(1000)")]
		public string ResourceParameters
		{
			get
			{
				return this._ResourceParameters;
			}
			set
			{
				if ((this._ResourceParameters != value))
				{
					this.OnResourceParametersChanging(value);
					this.SendPropertyChanging();
					this._ResourceParameters = value;
					this.SendPropertyChanged("ResourceParameters");
					this.OnResourceParametersChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaledPassingScore", DbType="Real")]
		public System.Nullable<float> ScaledPassingScore
		{
			get
			{
				return this._ScaledPassingScore;
			}
			set
			{
				if ((this._ScaledPassingScore != value))
				{
					this.OnScaledPassingScoreChanging(value);
					this.SendPropertyChanging();
					this._ScaledPassingScore = value;
					this.SendPropertyChanged("ScaledPassingScore");
					this.OnScaledPassingScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TimeLimitAction", DbType="Int")]
		public System.Nullable<int> TimeLimitAction
		{
			get
			{
				return this._TimeLimitAction;
			}
			set
			{
				if ((this._TimeLimitAction != value))
				{
					if (this._TimeLimitAction1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTimeLimitActionChanging(value);
					this.SendPropertyChanging();
					this._TimeLimitAction = value;
					this.SendPropertyChanged("TimeLimitAction");
					this.OnTimeLimitActionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Title", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Title
		{
			get
			{
				return this._Title;
			}
			set
			{
				if ((this._Title != value))
				{
					this.OnTitleChanging(value);
					this.SendPropertyChanging();
					this._Title = value;
					this.SendPropertyChanged("Title");
					this.OnTitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ObjectivesGlobalToSystem", DbType="Bit NOT NULL")]
		public bool ObjectivesGlobalToSystem
		{
			get
			{
				return this._ObjectivesGlobalToSystem;
			}
			set
			{
				if ((this._ObjectivesGlobalToSystem != value))
				{
					this.OnObjectivesGlobalToSystemChanging(value);
					this.SendPropertyChanging();
					this._ObjectivesGlobalToSystem = value;
					this.SendPropertyChanged("ObjectivesGlobalToSystem");
					this.OnObjectivesGlobalToSystemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_ActivityAttemptItem", Storage="_ActivityAttemptItems", ThisKey="Id", OtherKey="ActivityPackageId")]
		public EntitySet<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this._ActivityAttemptItems;
			}
			set
			{
				this._ActivityAttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_ActivityObjectiveItem", Storage="_ActivityObjectiveItems", ThisKey="Id", OtherKey="ActivityPackageId")]
		public EntitySet<ActivityObjectiveItem> ActivityObjectiveItems
		{
			get
			{
				return this._ActivityObjectiveItems;
			}
			set
			{
				this._ActivityObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_ActivityPackageItem", Storage="_ActivityPackageItems", ThisKey="Id", OtherKey="ParentActivityId")]
		public EntitySet<ActivityPackageItem> ActivityPackageItems
		{
			get
			{
				return this._ActivityPackageItems;
			}
			set
			{
				this._ActivityPackageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_AttemptItem", Storage="_AttemptItems", ThisKey="Id", OtherKey="CurrentActivityId")]
		public EntitySet<AttemptItem> AttemptItems
		{
			get
			{
				return this._AttemptItems;
			}
			set
			{
				this._AttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_AttemptItem1", Storage="_AttemptItems1", ThisKey="Id", OtherKey="RootActivityId")]
		public EntitySet<AttemptItem> AttemptItems1
		{
			get
			{
				return this._AttemptItems1;
			}
			set
			{
				this._AttemptItems1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_AttemptItem2", Storage="_AttemptItems2", ThisKey="Id", OtherKey="SuspendedActivityId")]
		public EntitySet<AttemptItem> AttemptItems2
		{
			get
			{
				return this._AttemptItems2;
			}
			set
			{
				this._AttemptItems2.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_CommentFromLmsItem", Storage="_CommentFromLmsItems", ThisKey="Id", OtherKey="ActivityPackageId")]
		public EntitySet<CommentFromLmsItem> CommentFromLmsItems
		{
			get
			{
				return this._CommentFromLmsItems;
			}
			set
			{
				this._CommentFromLmsItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_GlobalObjectiveItem", Storage="_GlobalObjectiveItems", ThisKey="Id", OtherKey="OrganizationId")]
		public EntitySet<GlobalObjectiveItem> GlobalObjectiveItems
		{
			get
			{
				return this._GlobalObjectiveItems;
			}
			set
			{
				this._GlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_ActivityPackageItem", Storage="_ActivityPackageItem1", ThisKey="ParentActivityId", OtherKey="Id", IsForeignKey=true)]
		public ActivityPackageItem ActivityPackageItem1
		{
			get
			{
				return this._ActivityPackageItem1.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem1.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem1.Entity = null;
						previousValue.ActivityPackageItems.Remove(this);
					}
					this._ActivityPackageItem1.Entity = value;
					if ((value != null))
					{
						value.ActivityPackageItems.Add(this);
						this._ParentActivityId = value.Id;
					}
					else
					{
						this._ParentActivityId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityPackageItem1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityObjectiveItem_ActivityPackageItem", Storage="_ActivityObjectiveItem", ThisKey="PrimaryObjectiveId", OtherKey="Id", IsForeignKey=true)]
		public ActivityObjectiveItem ActivityObjectiveItem
		{
			get
			{
				return this._ActivityObjectiveItem.Entity;
			}
			set
			{
				ActivityObjectiveItem previousValue = this._ActivityObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityObjectiveItem.Entity = null;
						previousValue.ActivityPackageItems.Remove(this);
					}
					this._ActivityObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.ActivityPackageItems.Add(this);
						this._PrimaryObjectiveId = value.Id;
					}
					else
					{
						this._PrimaryObjectiveId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageItem_ActivityPackageItem", Storage="_PackageItem", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PackageItem PackageItem
		{
			get
			{
				return this._PackageItem.Entity;
			}
			set
			{
				PackageItem previousValue = this._PackageItem.Entity;
				if (((previousValue != value) 
							|| (this._PackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageItem.Entity = null;
						previousValue.ActivityPackageItems.Remove(this);
					}
					this._PackageItem.Entity = value;
					if ((value != null))
					{
						value.ActivityPackageItems.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(long);
					}
					this.SendPropertyChanged("PackageItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceItem_ActivityPackageItem", Storage="_ResourceItem", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public ResourceItem ResourceItem
		{
			get
			{
				return this._ResourceItem.Entity;
			}
			set
			{
				ResourceItem previousValue = this._ResourceItem.Entity;
				if (((previousValue != value) 
							|| (this._ResourceItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ResourceItem.Entity = null;
						previousValue.ActivityPackageItems.Remove(this);
					}
					this._ResourceItem.Entity = value;
					if ((value != null))
					{
						value.ActivityPackageItems.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ResourceItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeLimitAction_ActivityPackageItem", Storage="_TimeLimitAction1", ThisKey="TimeLimitAction", OtherKey="Id", IsForeignKey=true)]
		public TimeLimitAction TimeLimitAction1
		{
			get
			{
				return this._TimeLimitAction1.Entity;
			}
			set
			{
				TimeLimitAction previousValue = this._TimeLimitAction1.Entity;
				if (((previousValue != value) 
							|| (this._TimeLimitAction1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TimeLimitAction1.Entity = null;
						previousValue.ActivityPackageItems.Remove(this);
					}
					this._TimeLimitAction1.Entity = value;
					if ((value != null))
					{
						value.ActivityPackageItems.Add(this);
						this._TimeLimitAction = value.Id;
					}
					else
					{
						this._TimeLimitAction = default(Nullable<int>);
					}
					this.SendPropertyChanged("TimeLimitAction1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = this;
		}
		
		private void detach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = null;
		}
		
		private void attach_ActivityObjectiveItems(ActivityObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = this;
		}
		
		private void detach_ActivityObjectiveItems(ActivityObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = null;
		}
		
		private void attach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem1 = this;
		}
		
		private void detach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem1 = null;
		}
		
		private void attach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = this;
		}
		
		private void detach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = null;
		}
		
		private void attach_AttemptItems1(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem1 = this;
		}
		
		private void detach_AttemptItems1(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem1 = null;
		}
		
		private void attach_AttemptItems2(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem2 = this;
		}
		
		private void detach_AttemptItems2(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem2 = null;
		}
		
		private void attach_CommentFromLmsItems(CommentFromLmsItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = this;
		}
		
		private void detach_CommentFromLmsItems(CommentFromLmsItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = null;
		}
		
		private void attach_GlobalObjectiveItems(GlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = this;
		}
		
		private void detach_GlobalObjectiveItems(GlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.ActivityPackageItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttemptItem")]
	public partial class AttemptItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LearnerId;
		
		private long _RootActivityId;
		
		private int _CompletionStatus;
		
		private System.Nullable<long> _CurrentActivityId;
		
		private System.Nullable<long> _SuspendedActivityId;
		
		private long _PackageId;
		
		private int _AttemptStatus;
		
		private System.Nullable<System.DateTime> _FinishedTimestamp;
		
		private bool _LogDetailSequencing;
		
		private bool _LogFinalSequencing;
		
		private bool _LogRollup;
		
		private System.Nullable<System.DateTime> _StartedTimestamp;
		
		private int _SuccessStatus;
		
		private System.Nullable<float> _TotalPoints;
		
		private EntitySet<ActivityAttemptItem> _ActivityAttemptItems;
		
		private EntitySet<SequencingLogEntryItem> _SequencingLogEntryItems;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem;
		
		private EntityRef<UserItem> _UserItem;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem1;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem2;
		
		private EntityRef<AttemptStatus> _AttemptStatus1;
		
		private EntityRef<CompletionStatus> _CompletionStatus1;
		
		private EntityRef<PackageItem> _PackageItem;
		
		private EntityRef<SuccessStatus> _SuccessStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLearnerIdChanging(long value);
    partial void OnLearnerIdChanged();
    partial void OnRootActivityIdChanging(long value);
    partial void OnRootActivityIdChanged();
    partial void OnCompletionStatusChanging(int value);
    partial void OnCompletionStatusChanged();
    partial void OnCurrentActivityIdChanging(System.Nullable<long> value);
    partial void OnCurrentActivityIdChanged();
    partial void OnSuspendedActivityIdChanging(System.Nullable<long> value);
    partial void OnSuspendedActivityIdChanged();
    partial void OnPackageIdChanging(long value);
    partial void OnPackageIdChanged();
    partial void OnAttemptStatusChanging(int value);
    partial void OnAttemptStatusChanged();
    partial void OnFinishedTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnFinishedTimestampChanged();
    partial void OnLogDetailSequencingChanging(bool value);
    partial void OnLogDetailSequencingChanged();
    partial void OnLogFinalSequencingChanging(bool value);
    partial void OnLogFinalSequencingChanged();
    partial void OnLogRollupChanging(bool value);
    partial void OnLogRollupChanged();
    partial void OnStartedTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnStartedTimestampChanged();
    partial void OnSuccessStatusChanging(int value);
    partial void OnSuccessStatusChanged();
    partial void OnTotalPointsChanging(System.Nullable<float> value);
    partial void OnTotalPointsChanged();
    #endregion
		
		public AttemptItem()
		{
			this._ActivityAttemptItems = new EntitySet<ActivityAttemptItem>(new Action<ActivityAttemptItem>(this.attach_ActivityAttemptItems), new Action<ActivityAttemptItem>(this.detach_ActivityAttemptItems));
			this._SequencingLogEntryItems = new EntitySet<SequencingLogEntryItem>(new Action<SequencingLogEntryItem>(this.attach_SequencingLogEntryItems), new Action<SequencingLogEntryItem>(this.detach_SequencingLogEntryItems));
			this._ActivityPackageItem = default(EntityRef<ActivityPackageItem>);
			this._UserItem = default(EntityRef<UserItem>);
			this._ActivityPackageItem1 = default(EntityRef<ActivityPackageItem>);
			this._ActivityPackageItem2 = default(EntityRef<ActivityPackageItem>);
			this._AttemptStatus1 = default(EntityRef<AttemptStatus>);
			this._CompletionStatus1 = default(EntityRef<CompletionStatus>);
			this._PackageItem = default(EntityRef<PackageItem>);
			this._SuccessStatus1 = default(EntityRef<SuccessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnerId", DbType="BigInt NOT NULL")]
		public long LearnerId
		{
			get
			{
				return this._LearnerId;
			}
			set
			{
				if ((this._LearnerId != value))
				{
					if (this._UserItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLearnerIdChanging(value);
					this.SendPropertyChanging();
					this._LearnerId = value;
					this.SendPropertyChanged("LearnerId");
					this.OnLearnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RootActivityId", DbType="BigInt NOT NULL")]
		public long RootActivityId
		{
			get
			{
				return this._RootActivityId;
			}
			set
			{
				if ((this._RootActivityId != value))
				{
					if (this._ActivityPackageItem1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRootActivityIdChanging(value);
					this.SendPropertyChanging();
					this._RootActivityId = value;
					this.SendPropertyChanged("RootActivityId");
					this.OnRootActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionStatus", DbType="Int NOT NULL")]
		public int CompletionStatus
		{
			get
			{
				return this._CompletionStatus;
			}
			set
			{
				if ((this._CompletionStatus != value))
				{
					if (this._CompletionStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompletionStatusChanging(value);
					this.SendPropertyChanging();
					this._CompletionStatus = value;
					this.SendPropertyChanged("CompletionStatus");
					this.OnCompletionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurrentActivityId", DbType="BigInt")]
		public System.Nullable<long> CurrentActivityId
		{
			get
			{
				return this._CurrentActivityId;
			}
			set
			{
				if ((this._CurrentActivityId != value))
				{
					if (this._ActivityPackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurrentActivityIdChanging(value);
					this.SendPropertyChanging();
					this._CurrentActivityId = value;
					this.SendPropertyChanged("CurrentActivityId");
					this.OnCurrentActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuspendedActivityId", DbType="BigInt")]
		public System.Nullable<long> SuspendedActivityId
		{
			get
			{
				return this._SuspendedActivityId;
			}
			set
			{
				if ((this._SuspendedActivityId != value))
				{
					if (this._ActivityPackageItem2.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuspendedActivityIdChanging(value);
					this.SendPropertyChanging();
					this._SuspendedActivityId = value;
					this.SendPropertyChanged("SuspendedActivityId");
					this.OnSuspendedActivityIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="BigInt NOT NULL")]
		public long PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._PackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptStatus", DbType="Int NOT NULL")]
		public int AttemptStatus
		{
			get
			{
				return this._AttemptStatus;
			}
			set
			{
				if ((this._AttemptStatus != value))
				{
					if (this._AttemptStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttemptStatusChanging(value);
					this.SendPropertyChanging();
					this._AttemptStatus = value;
					this.SendPropertyChanged("AttemptStatus");
					this.OnAttemptStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FinishedTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> FinishedTimestamp
		{
			get
			{
				return this._FinishedTimestamp;
			}
			set
			{
				if ((this._FinishedTimestamp != value))
				{
					this.OnFinishedTimestampChanging(value);
					this.SendPropertyChanging();
					this._FinishedTimestamp = value;
					this.SendPropertyChanged("FinishedTimestamp");
					this.OnFinishedTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogDetailSequencing", DbType="Bit NOT NULL")]
		public bool LogDetailSequencing
		{
			get
			{
				return this._LogDetailSequencing;
			}
			set
			{
				if ((this._LogDetailSequencing != value))
				{
					this.OnLogDetailSequencingChanging(value);
					this.SendPropertyChanging();
					this._LogDetailSequencing = value;
					this.SendPropertyChanged("LogDetailSequencing");
					this.OnLogDetailSequencingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogFinalSequencing", DbType="Bit NOT NULL")]
		public bool LogFinalSequencing
		{
			get
			{
				return this._LogFinalSequencing;
			}
			set
			{
				if ((this._LogFinalSequencing != value))
				{
					this.OnLogFinalSequencingChanging(value);
					this.SendPropertyChanging();
					this._LogFinalSequencing = value;
					this.SendPropertyChanged("LogFinalSequencing");
					this.OnLogFinalSequencingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LogRollup", DbType="Bit NOT NULL")]
		public bool LogRollup
		{
			get
			{
				return this._LogRollup;
			}
			set
			{
				if ((this._LogRollup != value))
				{
					this.OnLogRollupChanging(value);
					this.SendPropertyChanging();
					this._LogRollup = value;
					this.SendPropertyChanged("LogRollup");
					this.OnLogRollupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartedTimestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> StartedTimestamp
		{
			get
			{
				return this._StartedTimestamp;
			}
			set
			{
				if ((this._StartedTimestamp != value))
				{
					this.OnStartedTimestampChanging(value);
					this.SendPropertyChanging();
					this._StartedTimestamp = value;
					this.SendPropertyChanged("StartedTimestamp");
					this.OnStartedTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessStatus", DbType="Int NOT NULL")]
		public int SuccessStatus
		{
			get
			{
				return this._SuccessStatus;
			}
			set
			{
				if ((this._SuccessStatus != value))
				{
					if (this._SuccessStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuccessStatusChanging(value);
					this.SendPropertyChanging();
					this._SuccessStatus = value;
					this.SendPropertyChanged("SuccessStatus");
					this.OnSuccessStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TotalPoints", DbType="Real")]
		public System.Nullable<float> TotalPoints
		{
			get
			{
				return this._TotalPoints;
			}
			set
			{
				if ((this._TotalPoints != value))
				{
					this.OnTotalPointsChanging(value);
					this.SendPropertyChanging();
					this._TotalPoints = value;
					this.SendPropertyChanged("TotalPoints");
					this.OnTotalPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptItem_ActivityAttemptItem", Storage="_ActivityAttemptItems", ThisKey="Id", OtherKey="AttemptId")]
		public EntitySet<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this._ActivityAttemptItems;
			}
			set
			{
				this._ActivityAttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptItem_SequencingLogEntryItem", Storage="_SequencingLogEntryItems", ThisKey="Id", OtherKey="AttemptId")]
		public EntitySet<SequencingLogEntryItem> SequencingLogEntryItems
		{
			get
			{
				return this._SequencingLogEntryItems;
			}
			set
			{
				this._SequencingLogEntryItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_AttemptItem", Storage="_ActivityPackageItem", ThisKey="CurrentActivityId", OtherKey="Id", IsForeignKey=true)]
		public ActivityPackageItem ActivityPackageItem
		{
			get
			{
				return this._ActivityPackageItem.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem.Entity = null;
						previousValue.AttemptItems.Remove(this);
					}
					this._ActivityPackageItem.Entity = value;
					if ((value != null))
					{
						value.AttemptItems.Add(this);
						this._CurrentActivityId = value.Id;
					}
					else
					{
						this._CurrentActivityId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityPackageItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_AttemptItem", Storage="_UserItem", ThisKey="LearnerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserItem UserItem
		{
			get
			{
				return this._UserItem.Entity;
			}
			set
			{
				UserItem previousValue = this._UserItem.Entity;
				if (((previousValue != value) 
							|| (this._UserItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserItem.Entity = null;
						previousValue.AttemptItems.Remove(this);
					}
					this._UserItem.Entity = value;
					if ((value != null))
					{
						value.AttemptItems.Add(this);
						this._LearnerId = value.Id;
					}
					else
					{
						this._LearnerId = default(long);
					}
					this.SendPropertyChanged("UserItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_AttemptItem1", Storage="_ActivityPackageItem1", ThisKey="RootActivityId", OtherKey="Id", IsForeignKey=true)]
		public ActivityPackageItem ActivityPackageItem1
		{
			get
			{
				return this._ActivityPackageItem1.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem1.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem1.Entity = null;
						previousValue.AttemptItems1.Remove(this);
					}
					this._ActivityPackageItem1.Entity = value;
					if ((value != null))
					{
						value.AttemptItems1.Add(this);
						this._RootActivityId = value.Id;
					}
					else
					{
						this._RootActivityId = default(long);
					}
					this.SendPropertyChanged("ActivityPackageItem1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_AttemptItem2", Storage="_ActivityPackageItem2", ThisKey="SuspendedActivityId", OtherKey="Id", IsForeignKey=true)]
		public ActivityPackageItem ActivityPackageItem2
		{
			get
			{
				return this._ActivityPackageItem2.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem2.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem2.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem2.Entity = null;
						previousValue.AttemptItems2.Remove(this);
					}
					this._ActivityPackageItem2.Entity = value;
					if ((value != null))
					{
						value.AttemptItems2.Add(this);
						this._SuspendedActivityId = value.Id;
					}
					else
					{
						this._SuspendedActivityId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityPackageItem2");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptStatus_AttemptItem", Storage="_AttemptStatus1", ThisKey="AttemptStatus", OtherKey="Id", IsForeignKey=true)]
		public AttemptStatus AttemptStatus1
		{
			get
			{
				return this._AttemptStatus1.Entity;
			}
			set
			{
				AttemptStatus previousValue = this._AttemptStatus1.Entity;
				if (((previousValue != value) 
							|| (this._AttemptStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttemptStatus1.Entity = null;
						previousValue.AttemptItems.Remove(this);
					}
					this._AttemptStatus1.Entity = value;
					if ((value != null))
					{
						value.AttemptItems.Add(this);
						this._AttemptStatus = value.Id;
					}
					else
					{
						this._AttemptStatus = default(int);
					}
					this.SendPropertyChanged("AttemptStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionStatus_AttemptItem", Storage="_CompletionStatus1", ThisKey="CompletionStatus", OtherKey="Id", IsForeignKey=true)]
		public CompletionStatus CompletionStatus1
		{
			get
			{
				return this._CompletionStatus1.Entity;
			}
			set
			{
				CompletionStatus previousValue = this._CompletionStatus1.Entity;
				if (((previousValue != value) 
							|| (this._CompletionStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletionStatus1.Entity = null;
						previousValue.AttemptItems.Remove(this);
					}
					this._CompletionStatus1.Entity = value;
					if ((value != null))
					{
						value.AttemptItems.Add(this);
						this._CompletionStatus = value.Id;
					}
					else
					{
						this._CompletionStatus = default(int);
					}
					this.SendPropertyChanged("CompletionStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageItem_AttemptItem", Storage="_PackageItem", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true)]
		public PackageItem PackageItem
		{
			get
			{
				return this._PackageItem.Entity;
			}
			set
			{
				PackageItem previousValue = this._PackageItem.Entity;
				if (((previousValue != value) 
							|| (this._PackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageItem.Entity = null;
						previousValue.AttemptItems.Remove(this);
					}
					this._PackageItem.Entity = value;
					if ((value != null))
					{
						value.AttemptItems.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(long);
					}
					this.SendPropertyChanged("PackageItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_AttemptItem", Storage="_SuccessStatus1", ThisKey="SuccessStatus", OtherKey="Id", IsForeignKey=true)]
		public SuccessStatus SuccessStatus1
		{
			get
			{
				return this._SuccessStatus1.Entity;
			}
			set
			{
				SuccessStatus previousValue = this._SuccessStatus1.Entity;
				if (((previousValue != value) 
							|| (this._SuccessStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuccessStatus1.Entity = null;
						previousValue.AttemptItems.Remove(this);
					}
					this._SuccessStatus1.Entity = value;
					if ((value != null))
					{
						value.AttemptItems.Add(this);
						this._SuccessStatus = value.Id;
					}
					else
					{
						this._SuccessStatus = default(int);
					}
					this.SendPropertyChanged("SuccessStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptItem = this;
		}
		
		private void detach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptItem = null;
		}
		
		private void attach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptItem = this;
		}
		
		private void detach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttemptObjectiveItem")]
	public partial class AttemptObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ActivityAttemptId;
		
		private System.Nullable<long> _ActivityObjectiveId;
		
		private int _CompletionStatus;
		
		private string _Description;
		
		private bool _IsPrimaryObjective;
		
		private string _Key;
		
		private System.Nullable<int> _LessonStatus;
		
		private System.Nullable<float> _RawScore;
		
		private System.Nullable<float> _MinScore;
		
		private System.Nullable<float> _MaxScore;
		
		private System.Nullable<float> _ProgressMeasure;
		
		private System.Nullable<float> _ScaledScore;
		
		private int _SuccessStatus;
		
		private EntitySet<ExtensionDataItem> _ExtensionDataItems;
		
		private EntitySet<InteractionObjectiveItem> _InteractionObjectiveItems;
		
		private EntityRef<ActivityAttemptItem> _ActivityAttemptItem;
		
		private EntityRef<ActivityObjectiveItem> _ActivityObjectiveItem;
		
		private EntityRef<CompletionStatus> _CompletionStatus1;
		
		private EntityRef<LessonStatus> _LessonStatus1;
		
		private EntityRef<SuccessStatus> _SuccessStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityAttemptIdChanging(long value);
    partial void OnActivityAttemptIdChanged();
    partial void OnActivityObjectiveIdChanging(System.Nullable<long> value);
    partial void OnActivityObjectiveIdChanged();
    partial void OnCompletionStatusChanging(int value);
    partial void OnCompletionStatusChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnIsPrimaryObjectiveChanging(bool value);
    partial void OnIsPrimaryObjectiveChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnLessonStatusChanging(System.Nullable<int> value);
    partial void OnLessonStatusChanged();
    partial void OnRawScoreChanging(System.Nullable<float> value);
    partial void OnRawScoreChanged();
    partial void OnMinScoreChanging(System.Nullable<float> value);
    partial void OnMinScoreChanged();
    partial void OnMaxScoreChanging(System.Nullable<float> value);
    partial void OnMaxScoreChanged();
    partial void OnProgressMeasureChanging(System.Nullable<float> value);
    partial void OnProgressMeasureChanged();
    partial void OnScaledScoreChanging(System.Nullable<float> value);
    partial void OnScaledScoreChanged();
    partial void OnSuccessStatusChanging(int value);
    partial void OnSuccessStatusChanged();
    #endregion
		
		public AttemptObjectiveItem()
		{
			this._ExtensionDataItems = new EntitySet<ExtensionDataItem>(new Action<ExtensionDataItem>(this.attach_ExtensionDataItems), new Action<ExtensionDataItem>(this.detach_ExtensionDataItems));
			this._InteractionObjectiveItems = new EntitySet<InteractionObjectiveItem>(new Action<InteractionObjectiveItem>(this.attach_InteractionObjectiveItems), new Action<InteractionObjectiveItem>(this.detach_InteractionObjectiveItems));
			this._ActivityAttemptItem = default(EntityRef<ActivityAttemptItem>);
			this._ActivityObjectiveItem = default(EntityRef<ActivityObjectiveItem>);
			this._CompletionStatus1 = default(EntityRef<CompletionStatus>);
			this._LessonStatus1 = default(EntityRef<LessonStatus>);
			this._SuccessStatus1 = default(EntityRef<SuccessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityAttemptId", DbType="BigInt NOT NULL")]
		public long ActivityAttemptId
		{
			get
			{
				return this._ActivityAttemptId;
			}
			set
			{
				if ((this._ActivityAttemptId != value))
				{
					if (this._ActivityAttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityAttemptId = value;
					this.SendPropertyChanged("ActivityAttemptId");
					this.OnActivityAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityObjectiveId", DbType="BigInt")]
		public System.Nullable<long> ActivityObjectiveId
		{
			get
			{
				return this._ActivityObjectiveId;
			}
			set
			{
				if ((this._ActivityObjectiveId != value))
				{
					if (this._ActivityObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityObjectiveId = value;
					this.SendPropertyChanged("ActivityObjectiveId");
					this.OnActivityObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompletionStatus", DbType="Int NOT NULL")]
		public int CompletionStatus
		{
			get
			{
				return this._CompletionStatus;
			}
			set
			{
				if ((this._CompletionStatus != value))
				{
					if (this._CompletionStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompletionStatusChanging(value);
					this.SendPropertyChanging();
					this._CompletionStatus = value;
					this.SendPropertyChanged("CompletionStatus");
					this.OnCompletionStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsPrimaryObjective", DbType="Bit NOT NULL")]
		public bool IsPrimaryObjective
		{
			get
			{
				return this._IsPrimaryObjective;
			}
			set
			{
				if ((this._IsPrimaryObjective != value))
				{
					this.OnIsPrimaryObjectiveChanging(value);
					this.SendPropertyChanging();
					this._IsPrimaryObjective = value;
					this.SendPropertyChanged("IsPrimaryObjective");
					this.OnIsPrimaryObjectiveChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(MAX)")]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LessonStatus", DbType="Int")]
		public System.Nullable<int> LessonStatus
		{
			get
			{
				return this._LessonStatus;
			}
			set
			{
				if ((this._LessonStatus != value))
				{
					if (this._LessonStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLessonStatusChanging(value);
					this.SendPropertyChanging();
					this._LessonStatus = value;
					this.SendPropertyChanged("LessonStatus");
					this.OnLessonStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawScore", DbType="Real")]
		public System.Nullable<float> RawScore
		{
			get
			{
				return this._RawScore;
			}
			set
			{
				if ((this._RawScore != value))
				{
					this.OnRawScoreChanging(value);
					this.SendPropertyChanging();
					this._RawScore = value;
					this.SendPropertyChanged("RawScore");
					this.OnRawScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinScore", DbType="Real")]
		public System.Nullable<float> MinScore
		{
			get
			{
				return this._MinScore;
			}
			set
			{
				if ((this._MinScore != value))
				{
					this.OnMinScoreChanging(value);
					this.SendPropertyChanging();
					this._MinScore = value;
					this.SendPropertyChanged("MinScore");
					this.OnMinScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Real")]
		public System.Nullable<float> MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProgressMeasure", DbType="Real")]
		public System.Nullable<float> ProgressMeasure
		{
			get
			{
				return this._ProgressMeasure;
			}
			set
			{
				if ((this._ProgressMeasure != value))
				{
					this.OnProgressMeasureChanging(value);
					this.SendPropertyChanging();
					this._ProgressMeasure = value;
					this.SendPropertyChanged("ProgressMeasure");
					this.OnProgressMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaledScore", DbType="Real")]
		public System.Nullable<float> ScaledScore
		{
			get
			{
				return this._ScaledScore;
			}
			set
			{
				if ((this._ScaledScore != value))
				{
					this.OnScaledScoreChanging(value);
					this.SendPropertyChanging();
					this._ScaledScore = value;
					this.SendPropertyChanged("ScaledScore");
					this.OnScaledScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessStatus", DbType="Int NOT NULL")]
		public int SuccessStatus
		{
			get
			{
				return this._SuccessStatus;
			}
			set
			{
				if ((this._SuccessStatus != value))
				{
					if (this._SuccessStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuccessStatusChanging(value);
					this.SendPropertyChanging();
					this._SuccessStatus = value;
					this.SendPropertyChanged("SuccessStatus");
					this.OnSuccessStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptObjectiveItem_ExtensionDataItem", Storage="_ExtensionDataItems", ThisKey="Id", OtherKey="AttemptObjectiveId")]
		public EntitySet<ExtensionDataItem> ExtensionDataItems
		{
			get
			{
				return this._ExtensionDataItems;
			}
			set
			{
				this._ExtensionDataItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptObjectiveItem_InteractionObjectiveItem", Storage="_InteractionObjectiveItems", ThisKey="Id", OtherKey="AttemptObjectiveId")]
		public EntitySet<InteractionObjectiveItem> InteractionObjectiveItems
		{
			get
			{
				return this._InteractionObjectiveItems;
			}
			set
			{
				this._InteractionObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_AttemptObjectiveItem", Storage="_ActivityAttemptItem", ThisKey="ActivityAttemptId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ActivityAttemptItem ActivityAttemptItem
		{
			get
			{
				return this._ActivityAttemptItem.Entity;
			}
			set
			{
				ActivityAttemptItem previousValue = this._ActivityAttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityAttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityAttemptItem.Entity = null;
						previousValue.AttemptObjectiveItems.Remove(this);
					}
					this._ActivityAttemptItem.Entity = value;
					if ((value != null))
					{
						value.AttemptObjectiveItems.Add(this);
						this._ActivityAttemptId = value.Id;
					}
					else
					{
						this._ActivityAttemptId = default(long);
					}
					this.SendPropertyChanged("ActivityAttemptItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityObjectiveItem_AttemptObjectiveItem", Storage="_ActivityObjectiveItem", ThisKey="ActivityObjectiveId", OtherKey="Id", IsForeignKey=true)]
		public ActivityObjectiveItem ActivityObjectiveItem
		{
			get
			{
				return this._ActivityObjectiveItem.Entity;
			}
			set
			{
				ActivityObjectiveItem previousValue = this._ActivityObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityObjectiveItem.Entity = null;
						previousValue.AttemptObjectiveItems.Remove(this);
					}
					this._ActivityObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.AttemptObjectiveItems.Add(this);
						this._ActivityObjectiveId = value.Id;
					}
					else
					{
						this._ActivityObjectiveId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionStatus_AttemptObjectiveItem", Storage="_CompletionStatus1", ThisKey="CompletionStatus", OtherKey="Id", IsForeignKey=true)]
		public CompletionStatus CompletionStatus1
		{
			get
			{
				return this._CompletionStatus1.Entity;
			}
			set
			{
				CompletionStatus previousValue = this._CompletionStatus1.Entity;
				if (((previousValue != value) 
							|| (this._CompletionStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompletionStatus1.Entity = null;
						previousValue.AttemptObjectiveItems.Remove(this);
					}
					this._CompletionStatus1.Entity = value;
					if ((value != null))
					{
						value.AttemptObjectiveItems.Add(this);
						this._CompletionStatus = value.Id;
					}
					else
					{
						this._CompletionStatus = default(int);
					}
					this.SendPropertyChanged("CompletionStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonStatus_AttemptObjectiveItem", Storage="_LessonStatus1", ThisKey="LessonStatus", OtherKey="Id", IsForeignKey=true)]
		public LessonStatus LessonStatus1
		{
			get
			{
				return this._LessonStatus1.Entity;
			}
			set
			{
				LessonStatus previousValue = this._LessonStatus1.Entity;
				if (((previousValue != value) 
							|| (this._LessonStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LessonStatus1.Entity = null;
						previousValue.AttemptObjectiveItems.Remove(this);
					}
					this._LessonStatus1.Entity = value;
					if ((value != null))
					{
						value.AttemptObjectiveItems.Add(this);
						this._LessonStatus = value.Id;
					}
					else
					{
						this._LessonStatus = default(Nullable<int>);
					}
					this.SendPropertyChanged("LessonStatus1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_AttemptObjectiveItem", Storage="_SuccessStatus1", ThisKey="SuccessStatus", OtherKey="Id", IsForeignKey=true)]
		public SuccessStatus SuccessStatus1
		{
			get
			{
				return this._SuccessStatus1.Entity;
			}
			set
			{
				SuccessStatus previousValue = this._SuccessStatus1.Entity;
				if (((previousValue != value) 
							|| (this._SuccessStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuccessStatus1.Entity = null;
						previousValue.AttemptObjectiveItems.Remove(this);
					}
					this._SuccessStatus1.Entity = value;
					if ((value != null))
					{
						value.AttemptObjectiveItems.Add(this);
						this._SuccessStatus = value.Id;
					}
					else
					{
						this._SuccessStatus = default(int);
					}
					this.SendPropertyChanged("SuccessStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ExtensionDataItems(ExtensionDataItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptObjectiveItem = this;
		}
		
		private void detach_ExtensionDataItems(ExtensionDataItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptObjectiveItem = null;
		}
		
		private void attach_InteractionObjectiveItems(InteractionObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptObjectiveItem = this;
		}
		
		private void detach_InteractionObjectiveItems(InteractionObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptObjectiveItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AttemptStatus")]
	public partial class AttemptStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<AttemptItem> _AttemptItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AttemptStatus()
		{
			this._AttemptItems = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems), new Action<AttemptItem>(this.detach_AttemptItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptStatus_AttemptItem", Storage="_AttemptItems", ThisKey="Id", OtherKey="AttemptStatus")]
		public EntitySet<AttemptItem> AttemptItems
		{
			get
			{
				return this._AttemptItems;
			}
			set
			{
				this._AttemptItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptStatus1 = this;
		}
		
		private void detach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.AttemptStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AudioCaptioning")]
	public partial class AudioCaptioning : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<UserItem> _UserItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public AudioCaptioning()
		{
			this._UserItems = new EntitySet<UserItem>(new Action<UserItem>(this.attach_UserItems), new Action<UserItem>(this.detach_UserItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AudioCaptioning_UserItem", Storage="_UserItems", ThisKey="Id", OtherKey="AudioCaptioning")]
		public EntitySet<UserItem> UserItems
		{
			get
			{
				return this._UserItems;
			}
			set
			{
				this._UserItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.AudioCaptioning1 = this;
		}
		
		private void detach_UserItems(UserItem entity)
		{
			this.SendPropertyChanging();
			entity.AudioCaptioning1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommentFromLearnerItem")]
	public partial class CommentFromLearnerItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ActivityAttemptId;
		
		private string _Comment;
		
		private string _Location;
		
		private int _Ordinal;
		
		private string _Timestamp;
		
		private EntityRef<ActivityAttemptItem> _ActivityAttemptItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityAttemptIdChanging(long value);
    partial void OnActivityAttemptIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnOrdinalChanging(int value);
    partial void OnOrdinalChanged();
    partial void OnTimestampChanging(string value);
    partial void OnTimestampChanged();
    #endregion
		
		public CommentFromLearnerItem()
		{
			this._ActivityAttemptItem = default(EntityRef<ActivityAttemptItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityAttemptId", DbType="BigInt NOT NULL")]
		public long ActivityAttemptId
		{
			get
			{
				return this._ActivityAttemptId;
			}
			set
			{
				if ((this._ActivityAttemptId != value))
				{
					if (this._ActivityAttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityAttemptId = value;
					this.SendPropertyChanged("ActivityAttemptId");
					this.OnActivityAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordinal", DbType="Int NOT NULL")]
		public int Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="NVarChar(28)")]
		public string Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_CommentFromLearnerItem", Storage="_ActivityAttemptItem", ThisKey="ActivityAttemptId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ActivityAttemptItem ActivityAttemptItem
		{
			get
			{
				return this._ActivityAttemptItem.Entity;
			}
			set
			{
				ActivityAttemptItem previousValue = this._ActivityAttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityAttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityAttemptItem.Entity = null;
						previousValue.CommentFromLearnerItems.Remove(this);
					}
					this._ActivityAttemptItem.Entity = value;
					if ((value != null))
					{
						value.CommentFromLearnerItems.Add(this);
						this._ActivityAttemptId = value.Id;
					}
					else
					{
						this._ActivityAttemptId = default(long);
					}
					this.SendPropertyChanged("ActivityAttemptItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CommentFromLmsItem")]
	public partial class CommentFromLmsItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ActivityPackageId;
		
		private string _Comment;
		
		private string _Location;
		
		private string _Timestamp;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityPackageIdChanging(long value);
    partial void OnActivityPackageIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnTimestampChanging(string value);
    partial void OnTimestampChanged();
    #endregion
		
		public CommentFromLmsItem()
		{
			this._ActivityPackageItem = default(EntityRef<ActivityPackageItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityPackageId", DbType="BigInt NOT NULL")]
		public long ActivityPackageId
		{
			get
			{
				return this._ActivityPackageId;
			}
			set
			{
				if ((this._ActivityPackageId != value))
				{
					if (this._ActivityPackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityPackageIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityPackageId = value;
					this.SendPropertyChanged("ActivityPackageId");
					this.OnActivityPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="NVarChar(28)")]
		public string Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_CommentFromLmsItem", Storage="_ActivityPackageItem", ThisKey="ActivityPackageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ActivityPackageItem ActivityPackageItem
		{
			get
			{
				return this._ActivityPackageItem.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem.Entity = null;
						previousValue.CommentFromLmsItems.Remove(this);
					}
					this._ActivityPackageItem.Entity = value;
					if ((value != null))
					{
						value.CommentFromLmsItems.Add(this);
						this._ActivityPackageId = value.Id;
					}
					else
					{
						this._ActivityPackageId = default(long);
					}
					this.SendPropertyChanged("ActivityPackageItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompletionStatus")]
	public partial class CompletionStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ActivityAttemptItem> _ActivityAttemptItems;
		
		private EntitySet<AttemptItem> _AttemptItems;
		
		private EntitySet<AttemptObjectiveItem> _AttemptObjectiveItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CompletionStatus()
		{
			this._ActivityAttemptItems = new EntitySet<ActivityAttemptItem>(new Action<ActivityAttemptItem>(this.attach_ActivityAttemptItems), new Action<ActivityAttemptItem>(this.detach_ActivityAttemptItems));
			this._AttemptItems = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems), new Action<AttemptItem>(this.detach_AttemptItems));
			this._AttemptObjectiveItems = new EntitySet<AttemptObjectiveItem>(new Action<AttemptObjectiveItem>(this.attach_AttemptObjectiveItems), new Action<AttemptObjectiveItem>(this.detach_AttemptObjectiveItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionStatus_ActivityAttemptItem", Storage="_ActivityAttemptItems", ThisKey="Id", OtherKey="CompletionStatus")]
		public EntitySet<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this._ActivityAttemptItems;
			}
			set
			{
				this._ActivityAttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionStatus_AttemptItem", Storage="_AttemptItems", ThisKey="Id", OtherKey="CompletionStatus")]
		public EntitySet<AttemptItem> AttemptItems
		{
			get
			{
				return this._AttemptItems;
			}
			set
			{
				this._AttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompletionStatus_AttemptObjectiveItem", Storage="_AttemptObjectiveItems", ThisKey="Id", OtherKey="CompletionStatus")]
		public EntitySet<AttemptObjectiveItem> AttemptObjectiveItems
		{
			get
			{
				return this._AttemptObjectiveItems;
			}
			set
			{
				this._AttemptObjectiveItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.CompletionStatus1 = this;
		}
		
		private void detach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.CompletionStatus1 = null;
		}
		
		private void attach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.CompletionStatus1 = this;
		}
		
		private void detach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.CompletionStatus1 = null;
		}
		
		private void attach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.CompletionStatus1 = this;
		}
		
		private void detach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.CompletionStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Configuration")]
	public partial class Configuration
	{
		
		private int _EngineVersion;
		
		private System.Xml.Linq.XElement _SchemaDefinition;
		
		public Configuration()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EngineVersion", DbType="Int NOT NULL")]
		public int EngineVersion
		{
			get
			{
				return this._EngineVersion;
			}
			set
			{
				if ((this._EngineVersion != value))
				{
					this._EngineVersion = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchemaDefinition", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement SchemaDefinition
		{
			get
			{
				return this._SchemaDefinition;
			}
			set
			{
				if ((this._SchemaDefinition != value))
				{
					this._SchemaDefinition = value;
				}
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CorrectResponseItem")]
	public partial class CorrectResponseItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _InteractionId;
		
		private string _ResponsePattern;
		
		private EntityRef<InteractionItem> _InteractionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnInteractionIdChanging(long value);
    partial void OnInteractionIdChanged();
    partial void OnResponsePatternChanging(string value);
    partial void OnResponsePatternChanged();
    #endregion
		
		public CorrectResponseItem()
		{
			this._InteractionItem = default(EntityRef<InteractionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionId", DbType="BigInt NOT NULL")]
		public long InteractionId
		{
			get
			{
				return this._InteractionId;
			}
			set
			{
				if ((this._InteractionId != value))
				{
					if (this._InteractionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionIdChanging(value);
					this.SendPropertyChanging();
					this._InteractionId = value;
					this.SendPropertyChanged("InteractionId");
					this.OnInteractionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResponsePattern", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string ResponsePattern
		{
			get
			{
				return this._ResponsePattern;
			}
			set
			{
				if ((this._ResponsePattern != value))
				{
					this.OnResponsePatternChanging(value);
					this.SendPropertyChanging();
					this._ResponsePattern = value;
					this.SendPropertyChanged("ResponsePattern");
					this.OnResponsePatternChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_CorrectResponseItem", Storage="_InteractionItem", ThisKey="InteractionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public InteractionItem InteractionItem
		{
			get
			{
				return this._InteractionItem.Entity;
			}
			set
			{
				InteractionItem previousValue = this._InteractionItem.Entity;
				if (((previousValue != value) 
							|| (this._InteractionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionItem.Entity = null;
						previousValue.CorrectResponseItems.Remove(this);
					}
					this._InteractionItem.Entity = value;
					if ((value != null))
					{
						value.CorrectResponseItems.Add(this);
						this._InteractionId = value.Id;
					}
					else
					{
						this._InteractionId = default(long);
					}
					this.SendPropertyChanged("InteractionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Courses")]
	public partial class Course : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Owner;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private bool _Deleted;
		
		private EntitySet<Node> _Nodes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnOwnerChanging(string value);
    partial void OnOwnerChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnDeletedChanging(bool value);
    partial void OnDeletedChanged();
    #endregion
		
		public Course()
		{
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="NVarChar(50)")]
		public string Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Deleted", DbType="Bit NOT NULL")]
		public bool Deleted
		{
			get
			{
				return this._Deleted;
			}
			set
			{
				if ((this._Deleted != value))
				{
					this.OnDeletedChanging(value);
					this.SendPropertyChanging();
					this._Deleted = value;
					this.SendPropertyChanged("Deleted");
					this.OnDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Node", Storage="_Nodes", ThisKey="Id", OtherKey="CourseId")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Course = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Course = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CurriculumAssignments")]
	public partial class CurriculumAssignment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _UserGroupRef;
		
		private System.Nullable<int> _CurriculumRef;
		
		private EntityRef<Timeline> _Timeline;
		
		private EntityRef<Curriculum> _Curriculum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserGroupRefChanging(System.Nullable<int> value);
    partial void OnUserGroupRefChanged();
    partial void OnCurriculumRefChanging(System.Nullable<int> value);
    partial void OnCurriculumRefChanged();
    #endregion
		
		public CurriculumAssignment()
		{
			this._Timeline = default(EntityRef<Timeline>);
			this._Curriculum = default(EntityRef<Curriculum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Curriculum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupRef", DbType="Int")]
		public System.Nullable<int> UserGroupRef
		{
			get
			{
				return this._UserGroupRef;
			}
			set
			{
				if ((this._UserGroupRef != value))
				{
					this.OnUserGroupRefChanging(value);
					this.SendPropertyChanging();
					this._UserGroupRef = value;
					this.SendPropertyChanged("UserGroupRef");
					this.OnUserGroupRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurriculumRef", DbType="Int")]
		public System.Nullable<int> CurriculumRef
		{
			get
			{
				return this._CurriculumRef;
			}
			set
			{
				if ((this._CurriculumRef != value))
				{
					this.OnCurriculumRefChanging(value);
					this.SendPropertyChanging();
					this._CurriculumRef = value;
					this.SendPropertyChanged("CurriculumRef");
					this.OnCurriculumRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurriculumAssignment_Timeline", Storage="_Timeline", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Timeline Timeline
		{
			get
			{
				return this._Timeline.Entity;
			}
			set
			{
				Timeline previousValue = this._Timeline.Entity;
				if (((previousValue != value) 
							|| (this._Timeline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Timeline.Entity = null;
						previousValue.CurriculumAssignment = null;
					}
					this._Timeline.Entity = value;
					if ((value != null))
					{
						value.CurriculumAssignment = this;
					}
					this.SendPropertyChanged("Timeline");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Curriculum_CurriculumAssignment", Storage="_Curriculum", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Curriculum Curriculum
		{
			get
			{
				return this._Curriculum.Entity;
			}
			set
			{
				Curriculum previousValue = this._Curriculum.Entity;
				if (((previousValue != value) 
							|| (this._Curriculum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curriculum.Entity = null;
						previousValue.CurriculumAssignment = null;
					}
					this._Curriculum.Entity = value;
					if ((value != null))
					{
						value.CurriculumAssignment = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Curriculum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DisplayMode")]
	public partial class DisplayMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public DisplayMode()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EvaluationCommentItem")]
	public partial class EvaluationCommentItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _InteractionId;
		
		private string _Comment;
		
		private string _Location;
		
		private int _Ordinal;
		
		private string _Timestamp;
		
		private EntityRef<InteractionItem> _InteractionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnInteractionIdChanging(long value);
    partial void OnInteractionIdChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnOrdinalChanging(int value);
    partial void OnOrdinalChanged();
    partial void OnTimestampChanging(string value);
    partial void OnTimestampChanged();
    #endregion
		
		public EvaluationCommentItem()
		{
			this._InteractionItem = default(EntityRef<InteractionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionId", DbType="BigInt NOT NULL")]
		public long InteractionId
		{
			get
			{
				return this._InteractionId;
			}
			set
			{
				if ((this._InteractionId != value))
				{
					if (this._InteractionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionIdChanging(value);
					this.SendPropertyChanging();
					this._InteractionId = value;
					this.SendPropertyChanged("InteractionId");
					this.OnInteractionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(255)")]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordinal", DbType="Int NOT NULL")]
		public int Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="NVarChar(28)")]
		public string Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_EvaluationCommentItem", Storage="_InteractionItem", ThisKey="InteractionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public InteractionItem InteractionItem
		{
			get
			{
				return this._InteractionItem.Entity;
			}
			set
			{
				InteractionItem previousValue = this._InteractionItem.Entity;
				if (((previousValue != value) 
							|| (this._InteractionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionItem.Entity = null;
						previousValue.EvaluationCommentItems.Remove(this);
					}
					this._InteractionItem.Entity = value;
					if ((value != null))
					{
						value.EvaluationCommentItems.Add(this);
						this._InteractionId = value.Id;
					}
					else
					{
						this._InteractionId = default(long);
					}
					this.SendPropertyChanged("InteractionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExitMode")]
	public partial class ExitMode : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ActivityAttemptItem> _ActivityAttemptItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public ExitMode()
		{
			this._ActivityAttemptItems = new EntitySet<ActivityAttemptItem>(new Action<ActivityAttemptItem>(this.attach_ActivityAttemptItems), new Action<ActivityAttemptItem>(this.detach_ActivityAttemptItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ExitMode_ActivityAttemptItem", Storage="_ActivityAttemptItems", ThisKey="Id", OtherKey="Exit")]
		public EntitySet<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this._ActivityAttemptItems;
			}
			set
			{
				this._ActivityAttemptItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ExitMode = this;
		}
		
		private void detach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.ExitMode = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ExtensionDataItem")]
	public partial class ExtensionDataItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _ActivityAttemptId;
		
		private System.Nullable<long> _InteractionId;
		
		private System.Nullable<long> _AttemptObjectiveId;
		
		private string _Name;
		
		private System.Nullable<System.Guid> _AttachmentGuid;
		
		private System.Data.Linq.Binary _AttachmentValue;
		
		private System.Nullable<bool> _BoolValue;
		
		private System.Nullable<System.DateTime> _DateTimeValue;
		
		private System.Nullable<double> _DoubleValue;
		
		private System.Nullable<int> _IntValue;
		
		private string _StringValue;
		
		private EntityRef<ActivityAttemptItem> _ActivityAttemptItem;
		
		private EntityRef<AttemptObjectiveItem> _AttemptObjectiveItem;
		
		private EntityRef<InteractionItem> _InteractionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityAttemptIdChanging(System.Nullable<long> value);
    partial void OnActivityAttemptIdChanged();
    partial void OnInteractionIdChanging(System.Nullable<long> value);
    partial void OnInteractionIdChanged();
    partial void OnAttemptObjectiveIdChanging(System.Nullable<long> value);
    partial void OnAttemptObjectiveIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnAttachmentGuidChanging(System.Nullable<System.Guid> value);
    partial void OnAttachmentGuidChanged();
    partial void OnAttachmentValueChanging(System.Data.Linq.Binary value);
    partial void OnAttachmentValueChanged();
    partial void OnBoolValueChanging(System.Nullable<bool> value);
    partial void OnBoolValueChanged();
    partial void OnDateTimeValueChanging(System.Nullable<System.DateTime> value);
    partial void OnDateTimeValueChanged();
    partial void OnDoubleValueChanging(System.Nullable<double> value);
    partial void OnDoubleValueChanged();
    partial void OnIntValueChanging(System.Nullable<int> value);
    partial void OnIntValueChanged();
    partial void OnStringValueChanging(string value);
    partial void OnStringValueChanged();
    #endregion
		
		public ExtensionDataItem()
		{
			this._ActivityAttemptItem = default(EntityRef<ActivityAttemptItem>);
			this._AttemptObjectiveItem = default(EntityRef<AttemptObjectiveItem>);
			this._InteractionItem = default(EntityRef<InteractionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityAttemptId", DbType="BigInt")]
		public System.Nullable<long> ActivityAttemptId
		{
			get
			{
				return this._ActivityAttemptId;
			}
			set
			{
				if ((this._ActivityAttemptId != value))
				{
					if (this._ActivityAttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityAttemptId = value;
					this.SendPropertyChanged("ActivityAttemptId");
					this.OnActivityAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionId", DbType="BigInt")]
		public System.Nullable<long> InteractionId
		{
			get
			{
				return this._InteractionId;
			}
			set
			{
				if ((this._InteractionId != value))
				{
					if (this._InteractionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionIdChanging(value);
					this.SendPropertyChanging();
					this._InteractionId = value;
					this.SendPropertyChanged("InteractionId");
					this.OnInteractionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptObjectiveId", DbType="BigInt")]
		public System.Nullable<long> AttemptObjectiveId
		{
			get
			{
				return this._AttemptObjectiveId;
			}
			set
			{
				if ((this._AttemptObjectiveId != value))
				{
					if (this._AttemptObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttemptObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._AttemptObjectiveId = value;
					this.SendPropertyChanged("AttemptObjectiveId");
					this.OnAttemptObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(256)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentGuid", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> AttachmentGuid
		{
			get
			{
				return this._AttachmentGuid;
			}
			set
			{
				if ((this._AttachmentGuid != value))
				{
					this.OnAttachmentGuidChanging(value);
					this.SendPropertyChanging();
					this._AttachmentGuid = value;
					this.SendPropertyChanged("AttachmentGuid");
					this.OnAttachmentGuidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttachmentValue", DbType="VarBinary(MAX)", UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary AttachmentValue
		{
			get
			{
				return this._AttachmentValue;
			}
			set
			{
				if ((this._AttachmentValue != value))
				{
					this.OnAttachmentValueChanging(value);
					this.SendPropertyChanging();
					this._AttachmentValue = value;
					this.SendPropertyChanged("AttachmentValue");
					this.OnAttachmentValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BoolValue", DbType="Bit")]
		public System.Nullable<bool> BoolValue
		{
			get
			{
				return this._BoolValue;
			}
			set
			{
				if ((this._BoolValue != value))
				{
					this.OnBoolValueChanging(value);
					this.SendPropertyChanging();
					this._BoolValue = value;
					this.SendPropertyChanged("BoolValue");
					this.OnBoolValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateTimeValue", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateTimeValue
		{
			get
			{
				return this._DateTimeValue;
			}
			set
			{
				if ((this._DateTimeValue != value))
				{
					this.OnDateTimeValueChanging(value);
					this.SendPropertyChanging();
					this._DateTimeValue = value;
					this.SendPropertyChanged("DateTimeValue");
					this.OnDateTimeValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DoubleValue", DbType="Float")]
		public System.Nullable<double> DoubleValue
		{
			get
			{
				return this._DoubleValue;
			}
			set
			{
				if ((this._DoubleValue != value))
				{
					this.OnDoubleValueChanging(value);
					this.SendPropertyChanging();
					this._DoubleValue = value;
					this.SendPropertyChanged("DoubleValue");
					this.OnDoubleValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IntValue", DbType="Int")]
		public System.Nullable<int> IntValue
		{
			get
			{
				return this._IntValue;
			}
			set
			{
				if ((this._IntValue != value))
				{
					this.OnIntValueChanging(value);
					this.SendPropertyChanging();
					this._IntValue = value;
					this.SendPropertyChanged("IntValue");
					this.OnIntValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StringValue", DbType="NVarChar(MAX)")]
		public string StringValue
		{
			get
			{
				return this._StringValue;
			}
			set
			{
				if ((this._StringValue != value))
				{
					this.OnStringValueChanging(value);
					this.SendPropertyChanging();
					this._StringValue = value;
					this.SendPropertyChanged("StringValue");
					this.OnStringValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_ExtensionDataItem", Storage="_ActivityAttemptItem", ThisKey="ActivityAttemptId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ActivityAttemptItem ActivityAttemptItem
		{
			get
			{
				return this._ActivityAttemptItem.Entity;
			}
			set
			{
				ActivityAttemptItem previousValue = this._ActivityAttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityAttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityAttemptItem.Entity = null;
						previousValue.ExtensionDataItems.Remove(this);
					}
					this._ActivityAttemptItem.Entity = value;
					if ((value != null))
					{
						value.ExtensionDataItems.Add(this);
						this._ActivityAttemptId = value.Id;
					}
					else
					{
						this._ActivityAttemptId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityAttemptItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptObjectiveItem_ExtensionDataItem", Storage="_AttemptObjectiveItem", ThisKey="AttemptObjectiveId", OtherKey="Id", IsForeignKey=true)]
		public AttemptObjectiveItem AttemptObjectiveItem
		{
			get
			{
				return this._AttemptObjectiveItem.Entity;
			}
			set
			{
				AttemptObjectiveItem previousValue = this._AttemptObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._AttemptObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttemptObjectiveItem.Entity = null;
						previousValue.ExtensionDataItems.Remove(this);
					}
					this._AttemptObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.ExtensionDataItems.Add(this);
						this._AttemptObjectiveId = value.Id;
					}
					else
					{
						this._AttemptObjectiveId = default(Nullable<long>);
					}
					this.SendPropertyChanged("AttemptObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_ExtensionDataItem", Storage="_InteractionItem", ThisKey="InteractionId", OtherKey="Id", IsForeignKey=true)]
		public InteractionItem InteractionItem
		{
			get
			{
				return this._InteractionItem.Entity;
			}
			set
			{
				InteractionItem previousValue = this._InteractionItem.Entity;
				if (((previousValue != value) 
							|| (this._InteractionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionItem.Entity = null;
						previousValue.ExtensionDataItems.Remove(this);
					}
					this._InteractionItem.Entity = value;
					if ((value != null))
					{
						value.ExtensionDataItems.Add(this);
						this._InteractionId = value.Id;
					}
					else
					{
						this._InteractionId = default(Nullable<long>);
					}
					this.SendPropertyChanged("InteractionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GlobalObjectiveItem")]
	public partial class GlobalObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private System.Nullable<long> _OrganizationId;
		
		private string _Key;
		
		private string _Description;
		
		private EntitySet<LearnerGlobalObjectiveItem> _LearnerGlobalObjectiveItems;
		
		private EntitySet<MapActivityObjectiveToGlobalObjectiveItem> _MapActivityObjectiveToGlobalObjectiveItems;
		
		private EntitySet<PackageGlobalObjectiveItem> _PackageGlobalObjectiveItems;
		
		private EntityRef<ActivityPackageItem> _ActivityPackageItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnOrganizationIdChanging(System.Nullable<long> value);
    partial void OnOrganizationIdChanged();
    partial void OnKeyChanging(string value);
    partial void OnKeyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public GlobalObjectiveItem()
		{
			this._LearnerGlobalObjectiveItems = new EntitySet<LearnerGlobalObjectiveItem>(new Action<LearnerGlobalObjectiveItem>(this.attach_LearnerGlobalObjectiveItems), new Action<LearnerGlobalObjectiveItem>(this.detach_LearnerGlobalObjectiveItems));
			this._MapActivityObjectiveToGlobalObjectiveItems = new EntitySet<MapActivityObjectiveToGlobalObjectiveItem>(new Action<MapActivityObjectiveToGlobalObjectiveItem>(this.attach_MapActivityObjectiveToGlobalObjectiveItems), new Action<MapActivityObjectiveToGlobalObjectiveItem>(this.detach_MapActivityObjectiveToGlobalObjectiveItems));
			this._PackageGlobalObjectiveItems = new EntitySet<PackageGlobalObjectiveItem>(new Action<PackageGlobalObjectiveItem>(this.attach_PackageGlobalObjectiveItems), new Action<PackageGlobalObjectiveItem>(this.detach_PackageGlobalObjectiveItems));
			this._ActivityPackageItem = default(EntityRef<ActivityPackageItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OrganizationId", DbType="BigInt")]
		public System.Nullable<long> OrganizationId
		{
			get
			{
				return this._OrganizationId;
			}
			set
			{
				if ((this._OrganizationId != value))
				{
					if (this._ActivityPackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrganizationIdChanging(value);
					this.SendPropertyChanging();
					this._OrganizationId = value;
					this.SendPropertyChanged("OrganizationId");
					this.OnOrganizationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Key]", Storage="_Key", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Key
		{
			get
			{
				return this._Key;
			}
			set
			{
				if ((this._Key != value))
				{
					this.OnKeyChanging(value);
					this.SendPropertyChanging();
					this._Key = value;
					this.SendPropertyChanged("Key");
					this.OnKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalObjectiveItem_LearnerGlobalObjectiveItem", Storage="_LearnerGlobalObjectiveItems", ThisKey="Id", OtherKey="GlobalObjectiveId")]
		public EntitySet<LearnerGlobalObjectiveItem> LearnerGlobalObjectiveItems
		{
			get
			{
				return this._LearnerGlobalObjectiveItems;
			}
			set
			{
				this._LearnerGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalObjectiveItem_MapActivityObjectiveToGlobalObjectiveItem", Storage="_MapActivityObjectiveToGlobalObjectiveItems", ThisKey="Id", OtherKey="GlobalObjectiveId")]
		public EntitySet<MapActivityObjectiveToGlobalObjectiveItem> MapActivityObjectiveToGlobalObjectiveItems
		{
			get
			{
				return this._MapActivityObjectiveToGlobalObjectiveItems;
			}
			set
			{
				this._MapActivityObjectiveToGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalObjectiveItem_PackageGlobalObjectiveItem", Storage="_PackageGlobalObjectiveItems", ThisKey="Id", OtherKey="GlobalObjectiveId")]
		public EntitySet<PackageGlobalObjectiveItem> PackageGlobalObjectiveItems
		{
			get
			{
				return this._PackageGlobalObjectiveItems;
			}
			set
			{
				this._PackageGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityPackageItem_GlobalObjectiveItem", Storage="_ActivityPackageItem", ThisKey="OrganizationId", OtherKey="Id", IsForeignKey=true, DeleteRule="CASCADE")]
		public ActivityPackageItem ActivityPackageItem
		{
			get
			{
				return this._ActivityPackageItem.Entity;
			}
			set
			{
				ActivityPackageItem previousValue = this._ActivityPackageItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityPackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityPackageItem.Entity = null;
						previousValue.GlobalObjectiveItems.Remove(this);
					}
					this._ActivityPackageItem.Entity = value;
					if ((value != null))
					{
						value.GlobalObjectiveItems.Add(this);
						this._OrganizationId = value.Id;
					}
					else
					{
						this._OrganizationId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityPackageItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_LearnerGlobalObjectiveItems(LearnerGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.GlobalObjectiveItem = this;
		}
		
		private void detach_LearnerGlobalObjectiveItems(LearnerGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.GlobalObjectiveItem = null;
		}
		
		private void attach_MapActivityObjectiveToGlobalObjectiveItems(MapActivityObjectiveToGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.GlobalObjectiveItem = this;
		}
		
		private void detach_MapActivityObjectiveToGlobalObjectiveItems(MapActivityObjectiveToGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.GlobalObjectiveItem = null;
		}
		
		private void attach_PackageGlobalObjectiveItems(PackageGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.GlobalObjectiveItem = this;
		}
		
		private void detach_PackageGlobalObjectiveItems(PackageGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.GlobalObjectiveItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractionItem")]
	public partial class InteractionItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ActivityAttemptId;
		
		private string _InteractionIdFromCmi;
		
		private System.Nullable<int> _InteractionType;
		
		private string _Timestamp;
		
		private System.Nullable<float> _Weighting;
		
		private System.Nullable<int> _ResultState;
		
		private System.Nullable<float> _ResultNumeric;
		
		private System.Nullable<double> _Latency;
		
		private string _Description;
		
		private System.Nullable<bool> _LearnerResponseBool;
		
		private string _LearnerResponseString;
		
		private System.Nullable<float> _LearnerResponseNumeric;
		
		private System.Nullable<float> _ScaledScore;
		
		private System.Nullable<float> _RawScore;
		
		private System.Nullable<float> _MinScore;
		
		private System.Nullable<float> _MaxScore;
		
		private System.Nullable<float> _EvaluationPoints;
		
		private EntitySet<CorrectResponseItem> _CorrectResponseItems;
		
		private EntitySet<EvaluationCommentItem> _EvaluationCommentItems;
		
		private EntitySet<ExtensionDataItem> _ExtensionDataItems;
		
		private EntitySet<InteractionObjectiveItem> _InteractionObjectiveItems;
		
		private EntitySet<RubricItem> _RubricItems;
		
		private EntityRef<ActivityAttemptItem> _ActivityAttemptItem;
		
		private EntityRef<InteractionResultState> _InteractionResultState;
		
		private EntityRef<InteractionType> _InteractionType1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityAttemptIdChanging(long value);
    partial void OnActivityAttemptIdChanged();
    partial void OnInteractionIdFromCmiChanging(string value);
    partial void OnInteractionIdFromCmiChanged();
    partial void OnInteractionTypeChanging(System.Nullable<int> value);
    partial void OnInteractionTypeChanged();
    partial void OnTimestampChanging(string value);
    partial void OnTimestampChanged();
    partial void OnWeightingChanging(System.Nullable<float> value);
    partial void OnWeightingChanged();
    partial void OnResultStateChanging(System.Nullable<int> value);
    partial void OnResultStateChanged();
    partial void OnResultNumericChanging(System.Nullable<float> value);
    partial void OnResultNumericChanged();
    partial void OnLatencyChanging(System.Nullable<double> value);
    partial void OnLatencyChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLearnerResponseBoolChanging(System.Nullable<bool> value);
    partial void OnLearnerResponseBoolChanged();
    partial void OnLearnerResponseStringChanging(string value);
    partial void OnLearnerResponseStringChanged();
    partial void OnLearnerResponseNumericChanging(System.Nullable<float> value);
    partial void OnLearnerResponseNumericChanged();
    partial void OnScaledScoreChanging(System.Nullable<float> value);
    partial void OnScaledScoreChanged();
    partial void OnRawScoreChanging(System.Nullable<float> value);
    partial void OnRawScoreChanged();
    partial void OnMinScoreChanging(System.Nullable<float> value);
    partial void OnMinScoreChanged();
    partial void OnMaxScoreChanging(System.Nullable<float> value);
    partial void OnMaxScoreChanged();
    partial void OnEvaluationPointsChanging(System.Nullable<float> value);
    partial void OnEvaluationPointsChanged();
    #endregion
		
		public InteractionItem()
		{
			this._CorrectResponseItems = new EntitySet<CorrectResponseItem>(new Action<CorrectResponseItem>(this.attach_CorrectResponseItems), new Action<CorrectResponseItem>(this.detach_CorrectResponseItems));
			this._EvaluationCommentItems = new EntitySet<EvaluationCommentItem>(new Action<EvaluationCommentItem>(this.attach_EvaluationCommentItems), new Action<EvaluationCommentItem>(this.detach_EvaluationCommentItems));
			this._ExtensionDataItems = new EntitySet<ExtensionDataItem>(new Action<ExtensionDataItem>(this.attach_ExtensionDataItems), new Action<ExtensionDataItem>(this.detach_ExtensionDataItems));
			this._InteractionObjectiveItems = new EntitySet<InteractionObjectiveItem>(new Action<InteractionObjectiveItem>(this.attach_InteractionObjectiveItems), new Action<InteractionObjectiveItem>(this.detach_InteractionObjectiveItems));
			this._RubricItems = new EntitySet<RubricItem>(new Action<RubricItem>(this.attach_RubricItems), new Action<RubricItem>(this.detach_RubricItems));
			this._ActivityAttemptItem = default(EntityRef<ActivityAttemptItem>);
			this._InteractionResultState = default(EntityRef<InteractionResultState>);
			this._InteractionType1 = default(EntityRef<InteractionType>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityAttemptId", DbType="BigInt NOT NULL")]
		public long ActivityAttemptId
		{
			get
			{
				return this._ActivityAttemptId;
			}
			set
			{
				if ((this._ActivityAttemptId != value))
				{
					if (this._ActivityAttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityAttemptId = value;
					this.SendPropertyChanged("ActivityAttemptId");
					this.OnActivityAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionIdFromCmi", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string InteractionIdFromCmi
		{
			get
			{
				return this._InteractionIdFromCmi;
			}
			set
			{
				if ((this._InteractionIdFromCmi != value))
				{
					this.OnInteractionIdFromCmiChanging(value);
					this.SendPropertyChanging();
					this._InteractionIdFromCmi = value;
					this.SendPropertyChanged("InteractionIdFromCmi");
					this.OnInteractionIdFromCmiChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionType", DbType="Int")]
		public System.Nullable<int> InteractionType
		{
			get
			{
				return this._InteractionType;
			}
			set
			{
				if ((this._InteractionType != value))
				{
					if (this._InteractionType1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionTypeChanging(value);
					this.SendPropertyChanging();
					this._InteractionType = value;
					this.SendPropertyChanged("InteractionType");
					this.OnInteractionTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="NVarChar(28)")]
		public string Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Weighting", DbType="Real")]
		public System.Nullable<float> Weighting
		{
			get
			{
				return this._Weighting;
			}
			set
			{
				if ((this._Weighting != value))
				{
					this.OnWeightingChanging(value);
					this.SendPropertyChanging();
					this._Weighting = value;
					this.SendPropertyChanged("Weighting");
					this.OnWeightingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultState", DbType="Int")]
		public System.Nullable<int> ResultState
		{
			get
			{
				return this._ResultState;
			}
			set
			{
				if ((this._ResultState != value))
				{
					if (this._InteractionResultState.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResultStateChanging(value);
					this.SendPropertyChanging();
					this._ResultState = value;
					this.SendPropertyChanged("ResultState");
					this.OnResultStateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultNumeric", DbType="Real")]
		public System.Nullable<float> ResultNumeric
		{
			get
			{
				return this._ResultNumeric;
			}
			set
			{
				if ((this._ResultNumeric != value))
				{
					this.OnResultNumericChanging(value);
					this.SendPropertyChanging();
					this._ResultNumeric = value;
					this.SendPropertyChanged("ResultNumeric");
					this.OnResultNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Latency", DbType="Float")]
		public System.Nullable<double> Latency
		{
			get
			{
				return this._Latency;
			}
			set
			{
				if ((this._Latency != value))
				{
					this.OnLatencyChanging(value);
					this.SendPropertyChanging();
					this._Latency = value;
					this.SendPropertyChanged("Latency");
					this.OnLatencyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(255)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnerResponseBool", DbType="Bit")]
		public System.Nullable<bool> LearnerResponseBool
		{
			get
			{
				return this._LearnerResponseBool;
			}
			set
			{
				if ((this._LearnerResponseBool != value))
				{
					this.OnLearnerResponseBoolChanging(value);
					this.SendPropertyChanging();
					this._LearnerResponseBool = value;
					this.SendPropertyChanged("LearnerResponseBool");
					this.OnLearnerResponseBoolChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnerResponseString", DbType="NVarChar(MAX)")]
		public string LearnerResponseString
		{
			get
			{
				return this._LearnerResponseString;
			}
			set
			{
				if ((this._LearnerResponseString != value))
				{
					this.OnLearnerResponseStringChanging(value);
					this.SendPropertyChanging();
					this._LearnerResponseString = value;
					this.SendPropertyChanged("LearnerResponseString");
					this.OnLearnerResponseStringChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnerResponseNumeric", DbType="Real")]
		public System.Nullable<float> LearnerResponseNumeric
		{
			get
			{
				return this._LearnerResponseNumeric;
			}
			set
			{
				if ((this._LearnerResponseNumeric != value))
				{
					this.OnLearnerResponseNumericChanging(value);
					this.SendPropertyChanging();
					this._LearnerResponseNumeric = value;
					this.SendPropertyChanged("LearnerResponseNumeric");
					this.OnLearnerResponseNumericChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaledScore", DbType="Real")]
		public System.Nullable<float> ScaledScore
		{
			get
			{
				return this._ScaledScore;
			}
			set
			{
				if ((this._ScaledScore != value))
				{
					this.OnScaledScoreChanging(value);
					this.SendPropertyChanging();
					this._ScaledScore = value;
					this.SendPropertyChanged("ScaledScore");
					this.OnScaledScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RawScore", DbType="Real")]
		public System.Nullable<float> RawScore
		{
			get
			{
				return this._RawScore;
			}
			set
			{
				if ((this._RawScore != value))
				{
					this.OnRawScoreChanging(value);
					this.SendPropertyChanging();
					this._RawScore = value;
					this.SendPropertyChanged("RawScore");
					this.OnRawScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MinScore", DbType="Real")]
		public System.Nullable<float> MinScore
		{
			get
			{
				return this._MinScore;
			}
			set
			{
				if ((this._MinScore != value))
				{
					this.OnMinScoreChanging(value);
					this.SendPropertyChanging();
					this._MinScore = value;
					this.SendPropertyChanged("MinScore");
					this.OnMinScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MaxScore", DbType="Real")]
		public System.Nullable<float> MaxScore
		{
			get
			{
				return this._MaxScore;
			}
			set
			{
				if ((this._MaxScore != value))
				{
					this.OnMaxScoreChanging(value);
					this.SendPropertyChanging();
					this._MaxScore = value;
					this.SendPropertyChanged("MaxScore");
					this.OnMaxScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EvaluationPoints", DbType="Real")]
		public System.Nullable<float> EvaluationPoints
		{
			get
			{
				return this._EvaluationPoints;
			}
			set
			{
				if ((this._EvaluationPoints != value))
				{
					this.OnEvaluationPointsChanging(value);
					this.SendPropertyChanging();
					this._EvaluationPoints = value;
					this.SendPropertyChanged("EvaluationPoints");
					this.OnEvaluationPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_CorrectResponseItem", Storage="_CorrectResponseItems", ThisKey="Id", OtherKey="InteractionId")]
		public EntitySet<CorrectResponseItem> CorrectResponseItems
		{
			get
			{
				return this._CorrectResponseItems;
			}
			set
			{
				this._CorrectResponseItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_EvaluationCommentItem", Storage="_EvaluationCommentItems", ThisKey="Id", OtherKey="InteractionId")]
		public EntitySet<EvaluationCommentItem> EvaluationCommentItems
		{
			get
			{
				return this._EvaluationCommentItems;
			}
			set
			{
				this._EvaluationCommentItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_ExtensionDataItem", Storage="_ExtensionDataItems", ThisKey="Id", OtherKey="InteractionId")]
		public EntitySet<ExtensionDataItem> ExtensionDataItems
		{
			get
			{
				return this._ExtensionDataItems;
			}
			set
			{
				this._ExtensionDataItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_InteractionObjectiveItem", Storage="_InteractionObjectiveItems", ThisKey="Id", OtherKey="InteractionId")]
		public EntitySet<InteractionObjectiveItem> InteractionObjectiveItems
		{
			get
			{
				return this._InteractionObjectiveItems;
			}
			set
			{
				this._InteractionObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_RubricItem", Storage="_RubricItems", ThisKey="Id", OtherKey="InteractionId")]
		public EntitySet<RubricItem> RubricItems
		{
			get
			{
				return this._RubricItems;
			}
			set
			{
				this._RubricItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_InteractionItem", Storage="_ActivityAttemptItem", ThisKey="ActivityAttemptId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ActivityAttemptItem ActivityAttemptItem
		{
			get
			{
				return this._ActivityAttemptItem.Entity;
			}
			set
			{
				ActivityAttemptItem previousValue = this._ActivityAttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityAttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityAttemptItem.Entity = null;
						previousValue.InteractionItems.Remove(this);
					}
					this._ActivityAttemptItem.Entity = value;
					if ((value != null))
					{
						value.InteractionItems.Add(this);
						this._ActivityAttemptId = value.Id;
					}
					else
					{
						this._ActivityAttemptId = default(long);
					}
					this.SendPropertyChanged("ActivityAttemptItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionResultState_InteractionItem", Storage="_InteractionResultState", ThisKey="ResultState", OtherKey="Id", IsForeignKey=true)]
		public InteractionResultState InteractionResultState
		{
			get
			{
				return this._InteractionResultState.Entity;
			}
			set
			{
				InteractionResultState previousValue = this._InteractionResultState.Entity;
				if (((previousValue != value) 
							|| (this._InteractionResultState.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionResultState.Entity = null;
						previousValue.InteractionItems.Remove(this);
					}
					this._InteractionResultState.Entity = value;
					if ((value != null))
					{
						value.InteractionItems.Add(this);
						this._ResultState = value.Id;
					}
					else
					{
						this._ResultState = default(Nullable<int>);
					}
					this.SendPropertyChanged("InteractionResultState");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionType_InteractionItem", Storage="_InteractionType1", ThisKey="InteractionType", OtherKey="Id", IsForeignKey=true)]
		public InteractionType InteractionType1
		{
			get
			{
				return this._InteractionType1.Entity;
			}
			set
			{
				InteractionType previousValue = this._InteractionType1.Entity;
				if (((previousValue != value) 
							|| (this._InteractionType1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionType1.Entity = null;
						previousValue.InteractionItems.Remove(this);
					}
					this._InteractionType1.Entity = value;
					if ((value != null))
					{
						value.InteractionItems.Add(this);
						this._InteractionType = value.Id;
					}
					else
					{
						this._InteractionType = default(Nullable<int>);
					}
					this.SendPropertyChanged("InteractionType1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CorrectResponseItems(CorrectResponseItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = this;
		}
		
		private void detach_CorrectResponseItems(CorrectResponseItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = null;
		}
		
		private void attach_EvaluationCommentItems(EvaluationCommentItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = this;
		}
		
		private void detach_EvaluationCommentItems(EvaluationCommentItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = null;
		}
		
		private void attach_ExtensionDataItems(ExtensionDataItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = this;
		}
		
		private void detach_ExtensionDataItems(ExtensionDataItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = null;
		}
		
		private void attach_InteractionObjectiveItems(InteractionObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = this;
		}
		
		private void detach_InteractionObjectiveItems(InteractionObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = null;
		}
		
		private void attach_RubricItems(RubricItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = this;
		}
		
		private void detach_RubricItems(RubricItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractionObjectiveItem")]
	public partial class InteractionObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _InteractionId;
		
		private long _AttemptObjectiveId;
		
		private EntityRef<AttemptObjectiveItem> _AttemptObjectiveItem;
		
		private EntityRef<InteractionItem> _InteractionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnInteractionIdChanging(long value);
    partial void OnInteractionIdChanged();
    partial void OnAttemptObjectiveIdChanging(long value);
    partial void OnAttemptObjectiveIdChanged();
    #endregion
		
		public InteractionObjectiveItem()
		{
			this._AttemptObjectiveItem = default(EntityRef<AttemptObjectiveItem>);
			this._InteractionItem = default(EntityRef<InteractionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionId", DbType="BigInt NOT NULL")]
		public long InteractionId
		{
			get
			{
				return this._InteractionId;
			}
			set
			{
				if ((this._InteractionId != value))
				{
					if (this._InteractionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionIdChanging(value);
					this.SendPropertyChanging();
					this._InteractionId = value;
					this.SendPropertyChanged("InteractionId");
					this.OnInteractionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptObjectiveId", DbType="BigInt NOT NULL")]
		public long AttemptObjectiveId
		{
			get
			{
				return this._AttemptObjectiveId;
			}
			set
			{
				if ((this._AttemptObjectiveId != value))
				{
					if (this._AttemptObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttemptObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._AttemptObjectiveId = value;
					this.SendPropertyChanged("AttemptObjectiveId");
					this.OnAttemptObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptObjectiveItem_InteractionObjectiveItem", Storage="_AttemptObjectiveItem", ThisKey="AttemptObjectiveId", OtherKey="Id", IsForeignKey=true)]
		public AttemptObjectiveItem AttemptObjectiveItem
		{
			get
			{
				return this._AttemptObjectiveItem.Entity;
			}
			set
			{
				AttemptObjectiveItem previousValue = this._AttemptObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._AttemptObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttemptObjectiveItem.Entity = null;
						previousValue.InteractionObjectiveItems.Remove(this);
					}
					this._AttemptObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.InteractionObjectiveItems.Add(this);
						this._AttemptObjectiveId = value.Id;
					}
					else
					{
						this._AttemptObjectiveId = default(long);
					}
					this.SendPropertyChanged("AttemptObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_InteractionObjectiveItem", Storage="_InteractionItem", ThisKey="InteractionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public InteractionItem InteractionItem
		{
			get
			{
				return this._InteractionItem.Entity;
			}
			set
			{
				InteractionItem previousValue = this._InteractionItem.Entity;
				if (((previousValue != value) 
							|| (this._InteractionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionItem.Entity = null;
						previousValue.InteractionObjectiveItems.Remove(this);
					}
					this._InteractionItem.Entity = value;
					if ((value != null))
					{
						value.InteractionObjectiveItems.Add(this);
						this._InteractionId = value.Id;
					}
					else
					{
						this._InteractionId = default(long);
					}
					this.SendPropertyChanged("InteractionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractionResultState")]
	public partial class InteractionResultState : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<InteractionItem> _InteractionItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public InteractionResultState()
		{
			this._InteractionItems = new EntitySet<InteractionItem>(new Action<InteractionItem>(this.attach_InteractionItems), new Action<InteractionItem>(this.detach_InteractionItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionResultState_InteractionItem", Storage="_InteractionItems", ThisKey="Id", OtherKey="ResultState")]
		public EntitySet<InteractionItem> InteractionItems
		{
			get
			{
				return this._InteractionItems;
			}
			set
			{
				this._InteractionItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InteractionItems(InteractionItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionResultState = this;
		}
		
		private void detach_InteractionItems(InteractionItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionResultState = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.InteractionType")]
	public partial class InteractionType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<InteractionItem> _InteractionItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public InteractionType()
		{
			this._InteractionItems = new EntitySet<InteractionItem>(new Action<InteractionItem>(this.attach_InteractionItems), new Action<InteractionItem>(this.detach_InteractionItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionType_InteractionItem", Storage="_InteractionItems", ThisKey="Id", OtherKey="InteractionType")]
		public EntitySet<InteractionItem> InteractionItems
		{
			get
			{
				return this._InteractionItems;
			}
			set
			{
				this._InteractionItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_InteractionItems(InteractionItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionType1 = this;
		}
		
		private void detach_InteractionItems(InteractionItem entity)
		{
			this.SendPropertyChanging();
			entity.InteractionType1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LearnerGlobalObjectiveItem")]
	public partial class LearnerGlobalObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LearnerId;
		
		private long _GlobalObjectiveId;
		
		private System.Nullable<float> _ScaledScore;
		
		private int _SuccessStatus;
		
		private EntityRef<GlobalObjectiveItem> _GlobalObjectiveItem;
		
		private EntityRef<UserItem> _UserItem;
		
		private EntityRef<SuccessStatus> _SuccessStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLearnerIdChanging(long value);
    partial void OnLearnerIdChanged();
    partial void OnGlobalObjectiveIdChanging(long value);
    partial void OnGlobalObjectiveIdChanged();
    partial void OnScaledScoreChanging(System.Nullable<float> value);
    partial void OnScaledScoreChanged();
    partial void OnSuccessStatusChanging(int value);
    partial void OnSuccessStatusChanged();
    #endregion
		
		public LearnerGlobalObjectiveItem()
		{
			this._GlobalObjectiveItem = default(EntityRef<GlobalObjectiveItem>);
			this._UserItem = default(EntityRef<UserItem>);
			this._SuccessStatus1 = default(EntityRef<SuccessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnerId", DbType="BigInt NOT NULL")]
		public long LearnerId
		{
			get
			{
				return this._LearnerId;
			}
			set
			{
				if ((this._LearnerId != value))
				{
					if (this._UserItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLearnerIdChanging(value);
					this.SendPropertyChanging();
					this._LearnerId = value;
					this.SendPropertyChanged("LearnerId");
					this.OnLearnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalObjectiveId", DbType="BigInt NOT NULL")]
		public long GlobalObjectiveId
		{
			get
			{
				return this._GlobalObjectiveId;
			}
			set
			{
				if ((this._GlobalObjectiveId != value))
				{
					if (this._GlobalObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGlobalObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._GlobalObjectiveId = value;
					this.SendPropertyChanged("GlobalObjectiveId");
					this.OnGlobalObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaledScore", DbType="Real")]
		public System.Nullable<float> ScaledScore
		{
			get
			{
				return this._ScaledScore;
			}
			set
			{
				if ((this._ScaledScore != value))
				{
					this.OnScaledScoreChanging(value);
					this.SendPropertyChanging();
					this._ScaledScore = value;
					this.SendPropertyChanged("ScaledScore");
					this.OnScaledScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessStatus", DbType="Int NOT NULL")]
		public int SuccessStatus
		{
			get
			{
				return this._SuccessStatus;
			}
			set
			{
				if ((this._SuccessStatus != value))
				{
					if (this._SuccessStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuccessStatusChanging(value);
					this.SendPropertyChanging();
					this._SuccessStatus = value;
					this.SendPropertyChanged("SuccessStatus");
					this.OnSuccessStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalObjectiveItem_LearnerGlobalObjectiveItem", Storage="_GlobalObjectiveItem", ThisKey="GlobalObjectiveId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GlobalObjectiveItem GlobalObjectiveItem
		{
			get
			{
				return this._GlobalObjectiveItem.Entity;
			}
			set
			{
				GlobalObjectiveItem previousValue = this._GlobalObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._GlobalObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalObjectiveItem.Entity = null;
						previousValue.LearnerGlobalObjectiveItems.Remove(this);
					}
					this._GlobalObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.LearnerGlobalObjectiveItems.Add(this);
						this._GlobalObjectiveId = value.Id;
					}
					else
					{
						this._GlobalObjectiveId = default(long);
					}
					this.SendPropertyChanged("GlobalObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_LearnerGlobalObjectiveItem", Storage="_UserItem", ThisKey="LearnerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserItem UserItem
		{
			get
			{
				return this._UserItem.Entity;
			}
			set
			{
				UserItem previousValue = this._UserItem.Entity;
				if (((previousValue != value) 
							|| (this._UserItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserItem.Entity = null;
						previousValue.LearnerGlobalObjectiveItems.Remove(this);
					}
					this._UserItem.Entity = value;
					if ((value != null))
					{
						value.LearnerGlobalObjectiveItems.Add(this);
						this._LearnerId = value.Id;
					}
					else
					{
						this._LearnerId = default(long);
					}
					this.SendPropertyChanged("UserItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_LearnerGlobalObjectiveItem", Storage="_SuccessStatus1", ThisKey="SuccessStatus", OtherKey="Id", IsForeignKey=true)]
		public SuccessStatus SuccessStatus1
		{
			get
			{
				return this._SuccessStatus1.Entity;
			}
			set
			{
				SuccessStatus previousValue = this._SuccessStatus1.Entity;
				if (((previousValue != value) 
							|| (this._SuccessStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuccessStatus1.Entity = null;
						previousValue.LearnerGlobalObjectiveItems.Remove(this);
					}
					this._SuccessStatus1.Entity = value;
					if ((value != null))
					{
						value.LearnerGlobalObjectiveItems.Add(this);
						this._SuccessStatus = value.Id;
					}
					else
					{
						this._SuccessStatus = default(int);
					}
					this.SendPropertyChanged("SuccessStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LessonStatus")]
	public partial class LessonStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ActivityAttemptItem> _ActivityAttemptItems;
		
		private EntitySet<AttemptObjectiveItem> _AttemptObjectiveItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public LessonStatus()
		{
			this._ActivityAttemptItems = new EntitySet<ActivityAttemptItem>(new Action<ActivityAttemptItem>(this.attach_ActivityAttemptItems), new Action<ActivityAttemptItem>(this.detach_ActivityAttemptItems));
			this._AttemptObjectiveItems = new EntitySet<AttemptObjectiveItem>(new Action<AttemptObjectiveItem>(this.attach_AttemptObjectiveItems), new Action<AttemptObjectiveItem>(this.detach_AttemptObjectiveItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonStatus_ActivityAttemptItem", Storage="_ActivityAttemptItems", ThisKey="Id", OtherKey="LessonStatus")]
		public EntitySet<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this._ActivityAttemptItems;
			}
			set
			{
				this._ActivityAttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LessonStatus_AttemptObjectiveItem", Storage="_AttemptObjectiveItems", ThisKey="Id", OtherKey="LessonStatus")]
		public EntitySet<AttemptObjectiveItem> AttemptObjectiveItems
		{
			get
			{
				return this._AttemptObjectiveItems;
			}
			set
			{
				this._AttemptObjectiveItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.LessonStatus1 = this;
		}
		
		private void detach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.LessonStatus1 = null;
		}
		
		private void attach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.LessonStatus1 = this;
		}
		
		private void detach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.LessonStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MapActivityObjectiveToGlobalObjectiveItem")]
	public partial class MapActivityObjectiveToGlobalObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _ActivityObjectiveId;
		
		private long _GlobalObjectiveId;
		
		private bool _ReadSatisfiedStatus;
		
		private bool _ReadNormalizedMeasure;
		
		private bool _WriteSatisfiedStatus;
		
		private bool _WriteNormalizedMeasure;
		
		private EntityRef<ActivityObjectiveItem> _ActivityObjectiveItem;
		
		private EntityRef<GlobalObjectiveItem> _GlobalObjectiveItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnActivityObjectiveIdChanging(long value);
    partial void OnActivityObjectiveIdChanged();
    partial void OnGlobalObjectiveIdChanging(long value);
    partial void OnGlobalObjectiveIdChanged();
    partial void OnReadSatisfiedStatusChanging(bool value);
    partial void OnReadSatisfiedStatusChanged();
    partial void OnReadNormalizedMeasureChanging(bool value);
    partial void OnReadNormalizedMeasureChanged();
    partial void OnWriteSatisfiedStatusChanging(bool value);
    partial void OnWriteSatisfiedStatusChanged();
    partial void OnWriteNormalizedMeasureChanging(bool value);
    partial void OnWriteNormalizedMeasureChanged();
    #endregion
		
		public MapActivityObjectiveToGlobalObjectiveItem()
		{
			this._ActivityObjectiveItem = default(EntityRef<ActivityObjectiveItem>);
			this._GlobalObjectiveItem = default(EntityRef<GlobalObjectiveItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityObjectiveId", DbType="BigInt NOT NULL")]
		public long ActivityObjectiveId
		{
			get
			{
				return this._ActivityObjectiveId;
			}
			set
			{
				if ((this._ActivityObjectiveId != value))
				{
					if (this._ActivityObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityObjectiveId = value;
					this.SendPropertyChanged("ActivityObjectiveId");
					this.OnActivityObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalObjectiveId", DbType="BigInt NOT NULL")]
		public long GlobalObjectiveId
		{
			get
			{
				return this._GlobalObjectiveId;
			}
			set
			{
				if ((this._GlobalObjectiveId != value))
				{
					if (this._GlobalObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGlobalObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._GlobalObjectiveId = value;
					this.SendPropertyChanged("GlobalObjectiveId");
					this.OnGlobalObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadSatisfiedStatus", DbType="Bit NOT NULL")]
		public bool ReadSatisfiedStatus
		{
			get
			{
				return this._ReadSatisfiedStatus;
			}
			set
			{
				if ((this._ReadSatisfiedStatus != value))
				{
					this.OnReadSatisfiedStatusChanging(value);
					this.SendPropertyChanging();
					this._ReadSatisfiedStatus = value;
					this.SendPropertyChanged("ReadSatisfiedStatus");
					this.OnReadSatisfiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ReadNormalizedMeasure", DbType="Bit NOT NULL")]
		public bool ReadNormalizedMeasure
		{
			get
			{
				return this._ReadNormalizedMeasure;
			}
			set
			{
				if ((this._ReadNormalizedMeasure != value))
				{
					this.OnReadNormalizedMeasureChanging(value);
					this.SendPropertyChanging();
					this._ReadNormalizedMeasure = value;
					this.SendPropertyChanged("ReadNormalizedMeasure");
					this.OnReadNormalizedMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteSatisfiedStatus", DbType="Bit NOT NULL")]
		public bool WriteSatisfiedStatus
		{
			get
			{
				return this._WriteSatisfiedStatus;
			}
			set
			{
				if ((this._WriteSatisfiedStatus != value))
				{
					this.OnWriteSatisfiedStatusChanging(value);
					this.SendPropertyChanging();
					this._WriteSatisfiedStatus = value;
					this.SendPropertyChanged("WriteSatisfiedStatus");
					this.OnWriteSatisfiedStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WriteNormalizedMeasure", DbType="Bit NOT NULL")]
		public bool WriteNormalizedMeasure
		{
			get
			{
				return this._WriteNormalizedMeasure;
			}
			set
			{
				if ((this._WriteNormalizedMeasure != value))
				{
					this.OnWriteNormalizedMeasureChanging(value);
					this.SendPropertyChanging();
					this._WriteNormalizedMeasure = value;
					this.SendPropertyChanged("WriteNormalizedMeasure");
					this.OnWriteNormalizedMeasureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityObjectiveItem_MapActivityObjectiveToGlobalObjectiveItem", Storage="_ActivityObjectiveItem", ThisKey="ActivityObjectiveId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public ActivityObjectiveItem ActivityObjectiveItem
		{
			get
			{
				return this._ActivityObjectiveItem.Entity;
			}
			set
			{
				ActivityObjectiveItem previousValue = this._ActivityObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityObjectiveItem.Entity = null;
						previousValue.MapActivityObjectiveToGlobalObjectiveItems.Remove(this);
					}
					this._ActivityObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.MapActivityObjectiveToGlobalObjectiveItems.Add(this);
						this._ActivityObjectiveId = value.Id;
					}
					else
					{
						this._ActivityObjectiveId = default(long);
					}
					this.SendPropertyChanged("ActivityObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalObjectiveItem_MapActivityObjectiveToGlobalObjectiveItem", Storage="_GlobalObjectiveItem", ThisKey="GlobalObjectiveId", OtherKey="Id", IsForeignKey=true)]
		public GlobalObjectiveItem GlobalObjectiveItem
		{
			get
			{
				return this._GlobalObjectiveItem.Entity;
			}
			set
			{
				GlobalObjectiveItem previousValue = this._GlobalObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._GlobalObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalObjectiveItem.Entity = null;
						previousValue.MapActivityObjectiveToGlobalObjectiveItems.Remove(this);
					}
					this._GlobalObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.MapActivityObjectiveToGlobalObjectiveItems.Add(this);
						this._GlobalObjectiveId = value.Id;
					}
					else
					{
						this._GlobalObjectiveId = default(long);
					}
					this.SendPropertyChanged("GlobalObjectiveItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NavigationCommand")]
	public partial class NavigationCommand : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<SequencingLogEntryItem> _SequencingLogEntryItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public NavigationCommand()
		{
			this._SequencingLogEntryItems = new EntitySet<SequencingLogEntryItem>(new Action<SequencingLogEntryItem>(this.attach_SequencingLogEntryItems), new Action<SequencingLogEntryItem>(this.detach_SequencingLogEntryItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationCommand_SequencingLogEntryItem", Storage="_SequencingLogEntryItems", ThisKey="Id", OtherKey="NavigationCommand")]
		public EntitySet<SequencingLogEntryItem> SequencingLogEntryItems
		{
			get
			{
				return this._SequencingLogEntryItems;
			}
			set
			{
				this._SequencingLogEntryItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.NavigationCommand1 = this;
		}
		
		private void detach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.NavigationCommand1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Nodes")]
	public partial class Node : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _CourseId;
		
		private System.Nullable<int> _ParentId;
		
		private bool _IsFolder;
		
		private int _Position;
		
		private EntitySet<Node> _Nodes;
		
		private EntityRef<Course> _Course;
		
		private EntityRef<Node> _Node1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCourseIdChanging(int value);
    partial void OnCourseIdChanged();
    partial void OnParentIdChanging(System.Nullable<int> value);
    partial void OnParentIdChanged();
    partial void OnIsFolderChanging(bool value);
    partial void OnIsFolderChanged();
    partial void OnPositionChanging(int value);
    partial void OnPositionChanged();
    #endregion
		
		public Node()
		{
			this._Nodes = new EntitySet<Node>(new Action<Node>(this.attach_Nodes), new Action<Node>(this.detach_Nodes));
			this._Course = default(EntityRef<Course>);
			this._Node1 = default(EntityRef<Node>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseId", DbType="Int NOT NULL")]
		public int CourseId
		{
			get
			{
				return this._CourseId;
			}
			set
			{
				if ((this._CourseId != value))
				{
					if (this._Course.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCourseIdChanging(value);
					this.SendPropertyChanging();
					this._CourseId = value;
					this.SendPropertyChanged("CourseId");
					this.OnCourseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ParentId", DbType="Int")]
		public System.Nullable<int> ParentId
		{
			get
			{
				return this._ParentId;
			}
			set
			{
				if ((this._ParentId != value))
				{
					if (this._Node1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnParentIdChanging(value);
					this.SendPropertyChanging();
					this._ParentId = value;
					this.SendPropertyChanged("ParentId");
					this.OnParentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsFolder", DbType="Bit NOT NULL")]
		public bool IsFolder
		{
			get
			{
				return this._IsFolder;
			}
			set
			{
				if ((this._IsFolder != value))
				{
					this.OnIsFolderChanging(value);
					this.SendPropertyChanging();
					this._IsFolder = value;
					this.SendPropertyChanged("IsFolder");
					this.OnIsFolderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Position", DbType="Int NOT NULL")]
		public int Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Node", Storage="_Nodes", ThisKey="Id", OtherKey="ParentId")]
		public EntitySet<Node> Nodes
		{
			get
			{
				return this._Nodes;
			}
			set
			{
				this._Nodes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Course_Node", Storage="_Course", ThisKey="CourseId", OtherKey="Id", IsForeignKey=true)]
		public Course Course
		{
			get
			{
				return this._Course.Entity;
			}
			set
			{
				Course previousValue = this._Course.Entity;
				if (((previousValue != value) 
							|| (this._Course.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Course.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._Course.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._CourseId = value.Id;
					}
					else
					{
						this._CourseId = default(int);
					}
					this.SendPropertyChanged("Course");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Node_Node", Storage="_Node1", ThisKey="ParentId", OtherKey="Id", IsForeignKey=true)]
		public Node Node1
		{
			get
			{
				return this._Node1.Entity;
			}
			set
			{
				Node previousValue = this._Node1.Entity;
				if (((previousValue != value) 
							|| (this._Node1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Node1.Entity = null;
						previousValue.Nodes.Remove(this);
					}
					this._Node1.Entity = value;
					if ((value != null))
					{
						value.Nodes.Add(this);
						this._ParentId = value.Id;
					}
					else
					{
						this._ParentId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Node1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = this;
		}
		
		private void detach_Nodes(Node entity)
		{
			this.SendPropertyChanging();
			entity.Node1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Operation")]
	public partial class Operation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntityRef<Timeline> _Timeline;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Operation()
		{
			this._Timeline = default(EntityRef<Timeline>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._Timeline.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Timeline_Operation", Storage="_Timeline", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public Timeline Timeline
		{
			get
			{
				return this._Timeline.Entity;
			}
			set
			{
				Timeline previousValue = this._Timeline.Entity;
				if (((previousValue != value) 
							|| (this._Timeline.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Timeline.Entity = null;
						previousValue.Operation = null;
					}
					this._Timeline.Entity = value;
					if ((value != null))
					{
						value.Operation = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("Timeline");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageFormat")]
	public partial class PackageFormat : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<PackageItem> _PackageItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public PackageFormat()
		{
			this._PackageItems = new EntitySet<PackageItem>(new Action<PackageItem>(this.attach_PackageItems), new Action<PackageItem>(this.detach_PackageItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageFormat_PackageItem", Storage="_PackageItems", ThisKey="Id", OtherKey="PackageFormat")]
		public EntitySet<PackageItem> PackageItems
		{
			get
			{
				return this._PackageItems;
			}
			set
			{
				this._PackageItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PackageItems(PackageItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageFormat1 = this;
		}
		
		private void detach_PackageItems(PackageItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageFormat1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageGlobalObjectiveItem")]
	public partial class PackageGlobalObjectiveItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _LearnerId;
		
		private long _GlobalObjectiveId;
		
		private System.Nullable<float> _ScaledScore;
		
		private int _SuccessStatus;
		
		private EntityRef<GlobalObjectiveItem> _GlobalObjectiveItem;
		
		private EntityRef<UserItem> _UserItem;
		
		private EntityRef<SuccessStatus> _SuccessStatus1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnLearnerIdChanging(long value);
    partial void OnLearnerIdChanged();
    partial void OnGlobalObjectiveIdChanging(long value);
    partial void OnGlobalObjectiveIdChanged();
    partial void OnScaledScoreChanging(System.Nullable<float> value);
    partial void OnScaledScoreChanged();
    partial void OnSuccessStatusChanging(int value);
    partial void OnSuccessStatusChanged();
    #endregion
		
		public PackageGlobalObjectiveItem()
		{
			this._GlobalObjectiveItem = default(EntityRef<GlobalObjectiveItem>);
			this._UserItem = default(EntityRef<UserItem>);
			this._SuccessStatus1 = default(EntityRef<SuccessStatus>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LearnerId", DbType="BigInt NOT NULL")]
		public long LearnerId
		{
			get
			{
				return this._LearnerId;
			}
			set
			{
				if ((this._LearnerId != value))
				{
					if (this._UserItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLearnerIdChanging(value);
					this.SendPropertyChanging();
					this._LearnerId = value;
					this.SendPropertyChanged("LearnerId");
					this.OnLearnerIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GlobalObjectiveId", DbType="BigInt NOT NULL")]
		public long GlobalObjectiveId
		{
			get
			{
				return this._GlobalObjectiveId;
			}
			set
			{
				if ((this._GlobalObjectiveId != value))
				{
					if (this._GlobalObjectiveItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGlobalObjectiveIdChanging(value);
					this.SendPropertyChanging();
					this._GlobalObjectiveId = value;
					this.SendPropertyChanged("GlobalObjectiveId");
					this.OnGlobalObjectiveIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScaledScore", DbType="Real")]
		public System.Nullable<float> ScaledScore
		{
			get
			{
				return this._ScaledScore;
			}
			set
			{
				if ((this._ScaledScore != value))
				{
					this.OnScaledScoreChanging(value);
					this.SendPropertyChanging();
					this._ScaledScore = value;
					this.SendPropertyChanged("ScaledScore");
					this.OnScaledScoreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SuccessStatus", DbType="Int NOT NULL")]
		public int SuccessStatus
		{
			get
			{
				return this._SuccessStatus;
			}
			set
			{
				if ((this._SuccessStatus != value))
				{
					if (this._SuccessStatus1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSuccessStatusChanging(value);
					this.SendPropertyChanging();
					this._SuccessStatus = value;
					this.SendPropertyChanged("SuccessStatus");
					this.OnSuccessStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GlobalObjectiveItem_PackageGlobalObjectiveItem", Storage="_GlobalObjectiveItem", ThisKey="GlobalObjectiveId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public GlobalObjectiveItem GlobalObjectiveItem
		{
			get
			{
				return this._GlobalObjectiveItem.Entity;
			}
			set
			{
				GlobalObjectiveItem previousValue = this._GlobalObjectiveItem.Entity;
				if (((previousValue != value) 
							|| (this._GlobalObjectiveItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._GlobalObjectiveItem.Entity = null;
						previousValue.PackageGlobalObjectiveItems.Remove(this);
					}
					this._GlobalObjectiveItem.Entity = value;
					if ((value != null))
					{
						value.PackageGlobalObjectiveItems.Add(this);
						this._GlobalObjectiveId = value.Id;
					}
					else
					{
						this._GlobalObjectiveId = default(long);
					}
					this.SendPropertyChanged("GlobalObjectiveItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_PackageGlobalObjectiveItem", Storage="_UserItem", ThisKey="LearnerId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public UserItem UserItem
		{
			get
			{
				return this._UserItem.Entity;
			}
			set
			{
				UserItem previousValue = this._UserItem.Entity;
				if (((previousValue != value) 
							|| (this._UserItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserItem.Entity = null;
						previousValue.PackageGlobalObjectiveItems.Remove(this);
					}
					this._UserItem.Entity = value;
					if ((value != null))
					{
						value.PackageGlobalObjectiveItems.Add(this);
						this._LearnerId = value.Id;
					}
					else
					{
						this._LearnerId = default(long);
					}
					this.SendPropertyChanged("UserItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_PackageGlobalObjectiveItem", Storage="_SuccessStatus1", ThisKey="SuccessStatus", OtherKey="Id", IsForeignKey=true)]
		public SuccessStatus SuccessStatus1
		{
			get
			{
				return this._SuccessStatus1.Entity;
			}
			set
			{
				SuccessStatus previousValue = this._SuccessStatus1.Entity;
				if (((previousValue != value) 
							|| (this._SuccessStatus1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SuccessStatus1.Entity = null;
						previousValue.PackageGlobalObjectiveItems.Remove(this);
					}
					this._SuccessStatus1.Entity = value;
					if ((value != null))
					{
						value.PackageGlobalObjectiveItems.Add(this);
						this._SuccessStatus = value.Id;
					}
					else
					{
						this._SuccessStatus = default(int);
					}
					this.SendPropertyChanged("SuccessStatus1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.PackageItem")]
	public partial class PackageItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _PackageFormat;
		
		private string _Location;
		
		private System.Xml.Linq.XElement _Manifest;
		
		private System.Nullable<long> _Owner;
		
		private string _FileName;
		
		private System.Nullable<System.DateTime> _UploadDateTime;
		
		private EntitySet<ActivityPackageItem> _ActivityPackageItems;
		
		private EntitySet<AttemptItem> _AttemptItems;
		
		private EntitySet<ResourceItem> _ResourceItems;
		
		private EntityRef<UserItem> _UserItem;
		
		private EntityRef<PackageFormat> _PackageFormat1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPackageFormatChanging(int value);
    partial void OnPackageFormatChanged();
    partial void OnLocationChanging(string value);
    partial void OnLocationChanged();
    partial void OnManifestChanging(System.Xml.Linq.XElement value);
    partial void OnManifestChanged();
    partial void OnOwnerChanging(System.Nullable<long> value);
    partial void OnOwnerChanged();
    partial void OnFileNameChanging(string value);
    partial void OnFileNameChanged();
    partial void OnUploadDateTimeChanging(System.Nullable<System.DateTime> value);
    partial void OnUploadDateTimeChanged();
    #endregion
		
		public PackageItem()
		{
			this._ActivityPackageItems = new EntitySet<ActivityPackageItem>(new Action<ActivityPackageItem>(this.attach_ActivityPackageItems), new Action<ActivityPackageItem>(this.detach_ActivityPackageItems));
			this._AttemptItems = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems), new Action<AttemptItem>(this.detach_AttemptItems));
			this._ResourceItems = new EntitySet<ResourceItem>(new Action<ResourceItem>(this.attach_ResourceItems), new Action<ResourceItem>(this.detach_ResourceItems));
			this._UserItem = default(EntityRef<UserItem>);
			this._PackageFormat1 = default(EntityRef<PackageFormat>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageFormat", DbType="Int NOT NULL")]
		public int PackageFormat
		{
			get
			{
				return this._PackageFormat;
			}
			set
			{
				if ((this._PackageFormat != value))
				{
					if (this._PackageFormat1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageFormatChanging(value);
					this.SendPropertyChanging();
					this._PackageFormat = value;
					this.SendPropertyChanged("PackageFormat");
					this.OnPackageFormatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Location", DbType="NVarChar(260) NOT NULL", CanBeNull=false)]
		public string Location
		{
			get
			{
				return this._Location;
			}
			set
			{
				if ((this._Location != value))
				{
					this.OnLocationChanging(value);
					this.SendPropertyChanging();
					this._Location = value;
					this.SendPropertyChanged("Location");
					this.OnLocationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Manifest", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement Manifest
		{
			get
			{
				return this._Manifest;
			}
			set
			{
				if ((this._Manifest != value))
				{
					this.OnManifestChanging(value);
					this.SendPropertyChanging();
					this._Manifest = value;
					this.SendPropertyChanged("Manifest");
					this.OnManifestChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owner", DbType="BigInt")]
		public System.Nullable<long> Owner
		{
			get
			{
				return this._Owner;
			}
			set
			{
				if ((this._Owner != value))
				{
					if (this._UserItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwnerChanging(value);
					this.SendPropertyChanging();
					this._Owner = value;
					this.SendPropertyChanged("Owner");
					this.OnOwnerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FileName", DbType="NVarChar(260) NOT NULL", CanBeNull=false)]
		public string FileName
		{
			get
			{
				return this._FileName;
			}
			set
			{
				if ((this._FileName != value))
				{
					this.OnFileNameChanging(value);
					this.SendPropertyChanging();
					this._FileName = value;
					this.SendPropertyChanged("FileName");
					this.OnFileNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UploadDateTime", DbType="DateTime")]
		public System.Nullable<System.DateTime> UploadDateTime
		{
			get
			{
				return this._UploadDateTime;
			}
			set
			{
				if ((this._UploadDateTime != value))
				{
					this.OnUploadDateTimeChanging(value);
					this.SendPropertyChanging();
					this._UploadDateTime = value;
					this.SendPropertyChanged("UploadDateTime");
					this.OnUploadDateTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageItem_ActivityPackageItem", Storage="_ActivityPackageItems", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<ActivityPackageItem> ActivityPackageItems
		{
			get
			{
				return this._ActivityPackageItems;
			}
			set
			{
				this._ActivityPackageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageItem_AttemptItem", Storage="_AttemptItems", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<AttemptItem> AttemptItems
		{
			get
			{
				return this._AttemptItems;
			}
			set
			{
				this._AttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageItem_ResourceItem", Storage="_ResourceItems", ThisKey="Id", OtherKey="PackageId")]
		public EntitySet<ResourceItem> ResourceItems
		{
			get
			{
				return this._ResourceItems;
			}
			set
			{
				this._ResourceItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserItem_PackageItem", Storage="_UserItem", ThisKey="Owner", OtherKey="Id", IsForeignKey=true)]
		public UserItem UserItem
		{
			get
			{
				return this._UserItem.Entity;
			}
			set
			{
				UserItem previousValue = this._UserItem.Entity;
				if (((previousValue != value) 
							|| (this._UserItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._UserItem.Entity = null;
						previousValue.PackageItems.Remove(this);
					}
					this._UserItem.Entity = value;
					if ((value != null))
					{
						value.PackageItems.Add(this);
						this._Owner = value.Id;
					}
					else
					{
						this._Owner = default(Nullable<long>);
					}
					this.SendPropertyChanged("UserItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageFormat_PackageItem", Storage="_PackageFormat1", ThisKey="PackageFormat", OtherKey="Id", IsForeignKey=true)]
		public PackageFormat PackageFormat1
		{
			get
			{
				return this._PackageFormat1.Entity;
			}
			set
			{
				PackageFormat previousValue = this._PackageFormat1.Entity;
				if (((previousValue != value) 
							|| (this._PackageFormat1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageFormat1.Entity = null;
						previousValue.PackageItems.Remove(this);
					}
					this._PackageFormat1.Entity = value;
					if ((value != null))
					{
						value.PackageItems.Add(this);
						this._PackageFormat = value.Id;
					}
					else
					{
						this._PackageFormat = default(int);
					}
					this.SendPropertyChanged("PackageFormat1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageItem = this;
		}
		
		private void detach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageItem = null;
		}
		
		private void attach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageItem = this;
		}
		
		private void detach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageItem = null;
		}
		
		private void attach_ResourceItems(ResourceItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageItem = this;
		}
		
		private void detach_ResourceItems(ResourceItem entity)
		{
			this.SendPropertyChanging();
			entity.PackageItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ResourceItem")]
	public partial class ResourceItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _PackageId;
		
		private System.Xml.Linq.XElement _ResourceXml;
		
		private EntitySet<ActivityPackageItem> _ActivityPackageItems;
		
		private EntityRef<PackageItem> _PackageItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPackageIdChanging(long value);
    partial void OnPackageIdChanged();
    partial void OnResourceXmlChanging(System.Xml.Linq.XElement value);
    partial void OnResourceXmlChanged();
    #endregion
		
		public ResourceItem()
		{
			this._ActivityPackageItems = new EntitySet<ActivityPackageItem>(new Action<ActivityPackageItem>(this.attach_ActivityPackageItems), new Action<ActivityPackageItem>(this.detach_ActivityPackageItems));
			this._PackageItem = default(EntityRef<PackageItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PackageId", DbType="BigInt NOT NULL")]
		public long PackageId
		{
			get
			{
				return this._PackageId;
			}
			set
			{
				if ((this._PackageId != value))
				{
					if (this._PackageItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPackageIdChanging(value);
					this.SendPropertyChanging();
					this._PackageId = value;
					this.SendPropertyChanged("PackageId");
					this.OnPackageIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceXml", DbType="Xml NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public System.Xml.Linq.XElement ResourceXml
		{
			get
			{
				return this._ResourceXml;
			}
			set
			{
				if ((this._ResourceXml != value))
				{
					this.OnResourceXmlChanging(value);
					this.SendPropertyChanging();
					this._ResourceXml = value;
					this.SendPropertyChanged("ResourceXml");
					this.OnResourceXmlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ResourceItem_ActivityPackageItem", Storage="_ActivityPackageItems", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<ActivityPackageItem> ActivityPackageItems
		{
			get
			{
				return this._ActivityPackageItems;
			}
			set
			{
				this._ActivityPackageItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="PackageItem_ResourceItem", Storage="_PackageItem", ThisKey="PackageId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public PackageItem PackageItem
		{
			get
			{
				return this._PackageItem.Entity;
			}
			set
			{
				PackageItem previousValue = this._PackageItem.Entity;
				if (((previousValue != value) 
							|| (this._PackageItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._PackageItem.Entity = null;
						previousValue.ResourceItems.Remove(this);
					}
					this._PackageItem.Entity = value;
					if ((value != null))
					{
						value.ResourceItems.Add(this);
						this._PackageId = value.Id;
					}
					else
					{
						this._PackageId = default(long);
					}
					this.SendPropertyChanged("PackageItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.ResourceItem = this;
		}
		
		private void detach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.ResourceItem = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.RubricItem")]
	public partial class RubricItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _InteractionId;
		
		private int _Ordinal;
		
		private System.Nullable<bool> _IsSatisfied;
		
		private System.Nullable<float> _Points;
		
		private EntityRef<InteractionItem> _InteractionItem;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnInteractionIdChanging(long value);
    partial void OnInteractionIdChanged();
    partial void OnOrdinalChanging(int value);
    partial void OnOrdinalChanged();
    partial void OnIsSatisfiedChanging(System.Nullable<bool> value);
    partial void OnIsSatisfiedChanged();
    partial void OnPointsChanging(System.Nullable<float> value);
    partial void OnPointsChanged();
    #endregion
		
		public RubricItem()
		{
			this._InteractionItem = default(EntityRef<InteractionItem>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_InteractionId", DbType="BigInt NOT NULL")]
		public long InteractionId
		{
			get
			{
				return this._InteractionId;
			}
			set
			{
				if ((this._InteractionId != value))
				{
					if (this._InteractionItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnInteractionIdChanging(value);
					this.SendPropertyChanging();
					this._InteractionId = value;
					this.SendPropertyChanged("InteractionId");
					this.OnInteractionIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ordinal", DbType="Int NOT NULL")]
		public int Ordinal
		{
			get
			{
				return this._Ordinal;
			}
			set
			{
				if ((this._Ordinal != value))
				{
					this.OnOrdinalChanging(value);
					this.SendPropertyChanging();
					this._Ordinal = value;
					this.SendPropertyChanged("Ordinal");
					this.OnOrdinalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsSatisfied", DbType="Bit")]
		public System.Nullable<bool> IsSatisfied
		{
			get
			{
				return this._IsSatisfied;
			}
			set
			{
				if ((this._IsSatisfied != value))
				{
					this.OnIsSatisfiedChanging(value);
					this.SendPropertyChanging();
					this._IsSatisfied = value;
					this.SendPropertyChanged("IsSatisfied");
					this.OnIsSatisfiedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Points", DbType="Real")]
		public System.Nullable<float> Points
		{
			get
			{
				return this._Points;
			}
			set
			{
				if ((this._Points != value))
				{
					this.OnPointsChanging(value);
					this.SendPropertyChanging();
					this._Points = value;
					this.SendPropertyChanged("Points");
					this.OnPointsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="InteractionItem_RubricItem", Storage="_InteractionItem", ThisKey="InteractionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public InteractionItem InteractionItem
		{
			get
			{
				return this._InteractionItem.Entity;
			}
			set
			{
				InteractionItem previousValue = this._InteractionItem.Entity;
				if (((previousValue != value) 
							|| (this._InteractionItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._InteractionItem.Entity = null;
						previousValue.RubricItems.Remove(this);
					}
					this._InteractionItem.Entity = value;
					if ((value != null))
					{
						value.RubricItems.Add(this);
						this._InteractionId = value.Id;
					}
					else
					{
						this._InteractionId = default(long);
					}
					this.SendPropertyChanged("InteractionItem");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequencingEventType")]
	public partial class SequencingEventType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<SequencingLogEntryItem> _SequencingLogEntryItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SequencingEventType()
		{
			this._SequencingLogEntryItems = new EntitySet<SequencingLogEntryItem>(new Action<SequencingLogEntryItem>(this.attach_SequencingLogEntryItems), new Action<SequencingLogEntryItem>(this.detach_SequencingLogEntryItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SequencingEventType_SequencingLogEntryItem", Storage="_SequencingLogEntryItems", ThisKey="Id", OtherKey="EventType")]
		public EntitySet<SequencingLogEntryItem> SequencingLogEntryItems
		{
			get
			{
				return this._SequencingLogEntryItems;
			}
			set
			{
				this._SequencingLogEntryItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.SequencingEventType = this;
		}
		
		private void detach_SequencingLogEntryItems(SequencingLogEntryItem entity)
		{
			this.SendPropertyChanging();
			entity.SequencingEventType = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SequencingLogEntryItem")]
	public partial class SequencingLogEntryItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private long _AttemptId;
		
		private System.Nullable<long> _ActivityAttemptId;
		
		private int _EventType;
		
		private string _Message;
		
		private int _NavigationCommand;
		
		private System.DateTime _Timestamp;
		
		private EntityRef<ActivityAttemptItem> _ActivityAttemptItem;
		
		private EntityRef<AttemptItem> _AttemptItem;
		
		private EntityRef<SequencingEventType> _SequencingEventType;
		
		private EntityRef<NavigationCommand> _NavigationCommand1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnAttemptIdChanging(long value);
    partial void OnAttemptIdChanged();
    partial void OnActivityAttemptIdChanging(System.Nullable<long> value);
    partial void OnActivityAttemptIdChanged();
    partial void OnEventTypeChanging(int value);
    partial void OnEventTypeChanged();
    partial void OnMessageChanging(string value);
    partial void OnMessageChanged();
    partial void OnNavigationCommandChanging(int value);
    partial void OnNavigationCommandChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    #endregion
		
		public SequencingLogEntryItem()
		{
			this._ActivityAttemptItem = default(EntityRef<ActivityAttemptItem>);
			this._AttemptItem = default(EntityRef<AttemptItem>);
			this._SequencingEventType = default(EntityRef<SequencingEventType>);
			this._NavigationCommand1 = default(EntityRef<NavigationCommand>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AttemptId", DbType="BigInt NOT NULL")]
		public long AttemptId
		{
			get
			{
				return this._AttemptId;
			}
			set
			{
				if ((this._AttemptId != value))
				{
					if (this._AttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._AttemptId = value;
					this.SendPropertyChanged("AttemptId");
					this.OnAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ActivityAttemptId", DbType="BigInt")]
		public System.Nullable<long> ActivityAttemptId
		{
			get
			{
				return this._ActivityAttemptId;
			}
			set
			{
				if ((this._ActivityAttemptId != value))
				{
					if (this._ActivityAttemptItem.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnActivityAttemptIdChanging(value);
					this.SendPropertyChanging();
					this._ActivityAttemptId = value;
					this.SendPropertyChanged("ActivityAttemptId");
					this.OnActivityAttemptIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EventType", DbType="Int NOT NULL")]
		public int EventType
		{
			get
			{
				return this._EventType;
			}
			set
			{
				if ((this._EventType != value))
				{
					if (this._SequencingEventType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEventTypeChanging(value);
					this.SendPropertyChanging();
					this._EventType = value;
					this.SendPropertyChanged("EventType");
					this.OnEventTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Message", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Message
		{
			get
			{
				return this._Message;
			}
			set
			{
				if ((this._Message != value))
				{
					this.OnMessageChanging(value);
					this.SendPropertyChanging();
					this._Message = value;
					this.SendPropertyChanged("Message");
					this.OnMessageChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NavigationCommand", DbType="Int NOT NULL")]
		public int NavigationCommand
		{
			get
			{
				return this._NavigationCommand;
			}
			set
			{
				if ((this._NavigationCommand != value))
				{
					if (this._NavigationCommand1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnNavigationCommandChanging(value);
					this.SendPropertyChanging();
					this._NavigationCommand = value;
					this.SendPropertyChanged("NavigationCommand");
					this.OnNavigationCommandChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ActivityAttemptItem_SequencingLogEntryItem", Storage="_ActivityAttemptItem", ThisKey="ActivityAttemptId", OtherKey="Id", IsForeignKey=true)]
		public ActivityAttemptItem ActivityAttemptItem
		{
			get
			{
				return this._ActivityAttemptItem.Entity;
			}
			set
			{
				ActivityAttemptItem previousValue = this._ActivityAttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._ActivityAttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ActivityAttemptItem.Entity = null;
						previousValue.SequencingLogEntryItems.Remove(this);
					}
					this._ActivityAttemptItem.Entity = value;
					if ((value != null))
					{
						value.SequencingLogEntryItems.Add(this);
						this._ActivityAttemptId = value.Id;
					}
					else
					{
						this._ActivityAttemptId = default(Nullable<long>);
					}
					this.SendPropertyChanged("ActivityAttemptItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AttemptItem_SequencingLogEntryItem", Storage="_AttemptItem", ThisKey="AttemptId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public AttemptItem AttemptItem
		{
			get
			{
				return this._AttemptItem.Entity;
			}
			set
			{
				AttemptItem previousValue = this._AttemptItem.Entity;
				if (((previousValue != value) 
							|| (this._AttemptItem.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttemptItem.Entity = null;
						previousValue.SequencingLogEntryItems.Remove(this);
					}
					this._AttemptItem.Entity = value;
					if ((value != null))
					{
						value.SequencingLogEntryItems.Add(this);
						this._AttemptId = value.Id;
					}
					else
					{
						this._AttemptId = default(long);
					}
					this.SendPropertyChanged("AttemptItem");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SequencingEventType_SequencingLogEntryItem", Storage="_SequencingEventType", ThisKey="EventType", OtherKey="Id", IsForeignKey=true)]
		public SequencingEventType SequencingEventType
		{
			get
			{
				return this._SequencingEventType.Entity;
			}
			set
			{
				SequencingEventType previousValue = this._SequencingEventType.Entity;
				if (((previousValue != value) 
							|| (this._SequencingEventType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SequencingEventType.Entity = null;
						previousValue.SequencingLogEntryItems.Remove(this);
					}
					this._SequencingEventType.Entity = value;
					if ((value != null))
					{
						value.SequencingLogEntryItems.Add(this);
						this._EventType = value.Id;
					}
					else
					{
						this._EventType = default(int);
					}
					this.SendPropertyChanged("SequencingEventType");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="NavigationCommand_SequencingLogEntryItem", Storage="_NavigationCommand1", ThisKey="NavigationCommand", OtherKey="Id", IsForeignKey=true)]
		public NavigationCommand NavigationCommand1
		{
			get
			{
				return this._NavigationCommand1.Entity;
			}
			set
			{
				NavigationCommand previousValue = this._NavigationCommand1.Entity;
				if (((previousValue != value) 
							|| (this._NavigationCommand1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._NavigationCommand1.Entity = null;
						previousValue.SequencingLogEntryItems.Remove(this);
					}
					this._NavigationCommand1.Entity = value;
					if ((value != null))
					{
						value.SequencingLogEntryItems.Add(this);
						this._NavigationCommand = value.Id;
					}
					else
					{
						this._NavigationCommand = default(int);
					}
					this.SendPropertyChanged("NavigationCommand1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SuccessStatus")]
	public partial class SuccessStatus : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ActivityAttemptItem> _ActivityAttemptItems;
		
		private EntitySet<AttemptItem> _AttemptItems;
		
		private EntitySet<AttemptObjectiveItem> _AttemptObjectiveItems;
		
		private EntitySet<LearnerGlobalObjectiveItem> _LearnerGlobalObjectiveItems;
		
		private EntitySet<PackageGlobalObjectiveItem> _PackageGlobalObjectiveItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public SuccessStatus()
		{
			this._ActivityAttemptItems = new EntitySet<ActivityAttemptItem>(new Action<ActivityAttemptItem>(this.attach_ActivityAttemptItems), new Action<ActivityAttemptItem>(this.detach_ActivityAttemptItems));
			this._AttemptItems = new EntitySet<AttemptItem>(new Action<AttemptItem>(this.attach_AttemptItems), new Action<AttemptItem>(this.detach_AttemptItems));
			this._AttemptObjectiveItems = new EntitySet<AttemptObjectiveItem>(new Action<AttemptObjectiveItem>(this.attach_AttemptObjectiveItems), new Action<AttemptObjectiveItem>(this.detach_AttemptObjectiveItems));
			this._LearnerGlobalObjectiveItems = new EntitySet<LearnerGlobalObjectiveItem>(new Action<LearnerGlobalObjectiveItem>(this.attach_LearnerGlobalObjectiveItems), new Action<LearnerGlobalObjectiveItem>(this.detach_LearnerGlobalObjectiveItems));
			this._PackageGlobalObjectiveItems = new EntitySet<PackageGlobalObjectiveItem>(new Action<PackageGlobalObjectiveItem>(this.attach_PackageGlobalObjectiveItems), new Action<PackageGlobalObjectiveItem>(this.detach_PackageGlobalObjectiveItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_ActivityAttemptItem", Storage="_ActivityAttemptItems", ThisKey="Id", OtherKey="SuccessStatus")]
		public EntitySet<ActivityAttemptItem> ActivityAttemptItems
		{
			get
			{
				return this._ActivityAttemptItems;
			}
			set
			{
				this._ActivityAttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_AttemptItem", Storage="_AttemptItems", ThisKey="Id", OtherKey="SuccessStatus")]
		public EntitySet<AttemptItem> AttemptItems
		{
			get
			{
				return this._AttemptItems;
			}
			set
			{
				this._AttemptItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_AttemptObjectiveItem", Storage="_AttemptObjectiveItems", ThisKey="Id", OtherKey="SuccessStatus")]
		public EntitySet<AttemptObjectiveItem> AttemptObjectiveItems
		{
			get
			{
				return this._AttemptObjectiveItems;
			}
			set
			{
				this._AttemptObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_LearnerGlobalObjectiveItem", Storage="_LearnerGlobalObjectiveItems", ThisKey="Id", OtherKey="SuccessStatus")]
		public EntitySet<LearnerGlobalObjectiveItem> LearnerGlobalObjectiveItems
		{
			get
			{
				return this._LearnerGlobalObjectiveItems;
			}
			set
			{
				this._LearnerGlobalObjectiveItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SuccessStatus_PackageGlobalObjectiveItem", Storage="_PackageGlobalObjectiveItems", ThisKey="Id", OtherKey="SuccessStatus")]
		public EntitySet<PackageGlobalObjectiveItem> PackageGlobalObjectiveItems
		{
			get
			{
				return this._PackageGlobalObjectiveItems;
			}
			set
			{
				this._PackageGlobalObjectiveItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = this;
		}
		
		private void detach_ActivityAttemptItems(ActivityAttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = null;
		}
		
		private void attach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = this;
		}
		
		private void detach_AttemptItems(AttemptItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = null;
		}
		
		private void attach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = this;
		}
		
		private void detach_AttemptObjectiveItems(AttemptObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = null;
		}
		
		private void attach_LearnerGlobalObjectiveItems(LearnerGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = this;
		}
		
		private void detach_LearnerGlobalObjectiveItems(LearnerGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = null;
		}
		
		private void attach_PackageGlobalObjectiveItems(PackageGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = this;
		}
		
		private void detach_PackageGlobalObjectiveItems(PackageGlobalObjectiveItem entity)
		{
			this.SendPropertyChanging();
			entity.SuccessStatus1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TimeLimitAction")]
	public partial class TimeLimitAction : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<ActivityPackageItem> _ActivityPackageItems;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TimeLimitAction()
		{
			this._ActivityPackageItems = new EntitySet<ActivityPackageItem>(new Action<ActivityPackageItem>(this.attach_ActivityPackageItems), new Action<ActivityPackageItem>(this.detach_ActivityPackageItems));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(63) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TimeLimitAction_ActivityPackageItem", Storage="_ActivityPackageItems", ThisKey="Id", OtherKey="TimeLimitAction")]
		public EntitySet<ActivityPackageItem> ActivityPackageItems
		{
			get
			{
				return this._ActivityPackageItems;
			}
			set
			{
				this._ActivityPackageItems.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.TimeLimitAction1 = this;
		}
		
		private void detach_ActivityPackageItems(ActivityPackageItem entity)
		{
			this.SendPropertyChanging();
			entity.TimeLimitAction1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Timeline")]
	public partial class Timeline : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.DateTime _StartDate;
		
		private System.DateTime _EndDate;
		
		private System.Nullable<int> _CurriculumAssignmentRef;
		
		private System.Nullable<int> _OperationRef;
		
		private System.Nullable<int> _StageRef;
		
		private EntityRef<Operation> _Operation;
		
		private EntityRef<CurriculumAssignment> _CurriculumAssignment;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnStartDateChanging(System.DateTime value);
    partial void OnStartDateChanged();
    partial void OnEndDateChanging(System.DateTime value);
    partial void OnEndDateChanged();
    partial void OnCurriculumAssignmentRefChanging(System.Nullable<int> value);
    partial void OnCurriculumAssignmentRefChanged();
    partial void OnOperationRefChanging(System.Nullable<int> value);
    partial void OnOperationRefChanged();
    partial void OnStageRefChanging(System.Nullable<int> value);
    partial void OnStageRefChanged();
    #endregion
		
		public Timeline()
		{
			this._Operation = default(EntityRef<Operation>);
			this._CurriculumAssignment = default(EntityRef<CurriculumAssignment>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					if (this._CurriculumAssignment.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StartDate", DbType="DateTime NOT NULL")]
		public System.DateTime StartDate
		{
			get
			{
				return this._StartDate;
			}
			set
			{
				if ((this._StartDate != value))
				{
					this.OnStartDateChanging(value);
					this.SendPropertyChanging();
					this._StartDate = value;
					this.SendPropertyChanged("StartDate");
					this.OnStartDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime NOT NULL")]
		public System.DateTime EndDate
		{
			get
			{
				return this._EndDate;
			}
			set
			{
				if ((this._EndDate != value))
				{
					this.OnEndDateChanging(value);
					this.SendPropertyChanging();
					this._EndDate = value;
					this.SendPropertyChanged("EndDate");
					this.OnEndDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurriculumAssignmentRef", DbType="Int")]
		public System.Nullable<int> CurriculumAssignmentRef
		{
			get
			{
				return this._CurriculumAssignmentRef;
			}
			set
			{
				if ((this._CurriculumAssignmentRef != value))
				{
					this.OnCurriculumAssignmentRefChanging(value);
					this.SendPropertyChanging();
					this._CurriculumAssignmentRef = value;
					this.SendPropertyChanged("CurriculumAssignmentRef");
					this.OnCurriculumAssignmentRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OperationRef", DbType="Int")]
		public System.Nullable<int> OperationRef
		{
			get
			{
				return this._OperationRef;
			}
			set
			{
				if ((this._OperationRef != value))
				{
					this.OnOperationRefChanging(value);
					this.SendPropertyChanging();
					this._OperationRef = value;
					this.SendPropertyChanged("OperationRef");
					this.OnOperationRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StageRef", DbType="Int")]
		public System.Nullable<int> StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					this.OnStageRefChanging(value);
					this.SendPropertyChanging();
					this._StageRef = value;
					this.SendPropertyChanged("StageRef");
					this.OnStageRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Timeline_Operation", Storage="_Operation", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public Operation Operation
		{
			get
			{
				return this._Operation.Entity;
			}
			set
			{
				Operation previousValue = this._Operation.Entity;
				if (((previousValue != value) 
							|| (this._Operation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Operation.Entity = null;
						previousValue.Timeline = null;
					}
					this._Operation.Entity = value;
					if ((value != null))
					{
						value.Timeline = this;
					}
					this.SendPropertyChanged("Operation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CurriculumAssignment_Timeline", Storage="_CurriculumAssignment", ThisKey="Id", OtherKey="Id", IsForeignKey=true)]
		public CurriculumAssignment CurriculumAssignment
		{
			get
			{
				return this._CurriculumAssignment.Entity;
			}
			set
			{
				CurriculumAssignment previousValue = this._CurriculumAssignment.Entity;
				if (((previousValue != value) 
							|| (this._CurriculumAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurriculumAssignment.Entity = null;
						previousValue.Timeline = null;
					}
					this._CurriculumAssignment.Entity = value;
					if ((value != null))
					{
						value.Timeline = this;
						this._Id = value.Id;
					}
					else
					{
						this._Id = default(int);
					}
					this.SendPropertyChanged("CurriculumAssignment");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Curriculums")]
	public partial class Curriculum : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private bool _IsDeleted;
		
		private EntityRef<CurriculumAssignment> _CurriculumAssignment;
		
		private EntitySet<Stage> _Stages;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Curriculum()
		{
			this._CurriculumAssignment = default(EntityRef<CurriculumAssignment>);
			this._Stages = new EntitySet<Stage>(new Action<Stage>(this.attach_Stages), new Action<Stage>(this.detach_Stages));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Curriculum_CurriculumAssignment", Storage="_CurriculumAssignment", ThisKey="Id", OtherKey="Id", IsUnique=true, IsForeignKey=false)]
		public CurriculumAssignment CurriculumAssignment
		{
			get
			{
				return this._CurriculumAssignment.Entity;
			}
			set
			{
				CurriculumAssignment previousValue = this._CurriculumAssignment.Entity;
				if (((previousValue != value) 
							|| (this._CurriculumAssignment.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CurriculumAssignment.Entity = null;
						previousValue.Curriculum = null;
					}
					this._CurriculumAssignment.Entity = value;
					if ((value != null))
					{
						value.Curriculum = this;
					}
					this.SendPropertyChanged("CurriculumAssignment");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Curriculum_Stage", Storage="_Stages", ThisKey="Id", OtherKey="CurriculumRef")]
		public EntitySet<Stage> Stages
		{
			get
			{
				return this._Stages;
			}
			set
			{
				this._Stages.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Stages(Stage entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = this;
		}
		
		private void detach_Stages(Stage entity)
		{
			this.SendPropertyChanging();
			entity.Curriculum = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stages")]
	public partial class Stage : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _CurriculumRef;
		
		private bool _IsDeleted;
		
		private EntitySet<Theme> _Themes;
		
		private EntityRef<Curriculum> _Curriculum;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnCurriculumRefChanging(int value);
    partial void OnCurriculumRefChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Stage()
		{
			this._Themes = new EntitySet<Theme>(new Action<Theme>(this.attach_Themes), new Action<Theme>(this.detach_Themes));
			this._Curriculum = default(EntityRef<Curriculum>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CurriculumRef", DbType="Int NOT NULL")]
		public int CurriculumRef
		{
			get
			{
				return this._CurriculumRef;
			}
			set
			{
				if ((this._CurriculumRef != value))
				{
					if (this._Curriculum.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCurriculumRefChanging(value);
					this.SendPropertyChanging();
					this._CurriculumRef = value;
					this.SendPropertyChanged("CurriculumRef");
					this.OnCurriculumRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stage_Theme", Storage="_Themes", ThisKey="Id", OtherKey="StageRef")]
		public EntitySet<Theme> Themes
		{
			get
			{
				return this._Themes;
			}
			set
			{
				this._Themes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Curriculum_Stage", Storage="_Curriculum", ThisKey="CurriculumRef", OtherKey="Id", IsForeignKey=true)]
		public Curriculum Curriculum
		{
			get
			{
				return this._Curriculum.Entity;
			}
			set
			{
				Curriculum previousValue = this._Curriculum.Entity;
				if (((previousValue != value) 
							|| (this._Curriculum.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Curriculum.Entity = null;
						previousValue.Stages.Remove(this);
					}
					this._Curriculum.Entity = value;
					if ((value != null))
					{
						value.Stages.Add(this);
						this._CurriculumRef = value.Id;
					}
					else
					{
						this._CurriculumRef = default(int);
					}
					this.SendPropertyChanged("Curriculum");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Themes(Theme entity)
		{
			this.SendPropertyChanging();
			entity.Stage = this;
		}
		
		private void detach_Themes(Theme entity)
		{
			this.SendPropertyChanging();
			entity.Stage = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Themes")]
	public partial class Theme : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private System.DateTime _Created;
		
		private System.DateTime _Updated;
		
		private int _StageRef;
		
		private int _CourseRef;
		
		private int _SortOrder;
		
		private bool _IsDeleted;
		
		private EntityRef<Stage> _Stage;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCreatedChanging(System.DateTime value);
    partial void OnCreatedChanged();
    partial void OnUpdatedChanging(System.DateTime value);
    partial void OnUpdatedChanged();
    partial void OnStageRefChanging(int value);
    partial void OnStageRefChanged();
    partial void OnCourseRefChanging(int value);
    partial void OnCourseRefChanged();
    partial void OnSortOrderChanging(int value);
    partial void OnSortOrderChanged();
    partial void OnIsDeletedChanging(bool value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public Theme()
		{
			this._Stage = default(EntityRef<Stage>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Created", DbType="DateTime NOT NULL")]
		public System.DateTime Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Updated", DbType="DateTime NOT NULL")]
		public System.DateTime Updated
		{
			get
			{
				return this._Updated;
			}
			set
			{
				if ((this._Updated != value))
				{
					this.OnUpdatedChanging(value);
					this.SendPropertyChanging();
					this._Updated = value;
					this.SendPropertyChanged("Updated");
					this.OnUpdatedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StageRef", DbType="Int NOT NULL")]
		public int StageRef
		{
			get
			{
				return this._StageRef;
			}
			set
			{
				if ((this._StageRef != value))
				{
					if (this._Stage.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStageRefChanging(value);
					this.SendPropertyChanging();
					this._StageRef = value;
					this.SendPropertyChanged("StageRef");
					this.OnStageRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CourseRef", DbType="Int NOT NULL")]
		public int CourseRef
		{
			get
			{
				return this._CourseRef;
			}
			set
			{
				if ((this._CourseRef != value))
				{
					this.OnCourseRefChanging(value);
					this.SendPropertyChanging();
					this._CourseRef = value;
					this.SendPropertyChanged("CourseRef");
					this.OnCourseRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SortOrder", DbType="Int NOT NULL")]
		public int SortOrder
		{
			get
			{
				return this._SortOrder;
			}
			set
			{
				if ((this._SortOrder != value))
				{
					this.OnSortOrderChanging(value);
					this.SendPropertyChanging();
					this._SortOrder = value;
					this.SendPropertyChanged("SortOrder");
					this.OnSortOrderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit NOT NULL")]
		public bool IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Stage_Theme", Storage="_Stage", ThisKey="StageRef", OtherKey="Id", IsForeignKey=true)]
		public Stage Stage
		{
			get
			{
				return this._Stage.Entity;
			}
			set
			{
				Stage previousValue = this._Stage.Entity;
				if (((previousValue != value) 
							|| (this._Stage.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stage.Entity = null;
						previousValue.Themes.Remove(this);
					}
					this._Stage.Entity = value;
					if ((value != null))
					{
						value.Themes.Add(this);
						this._StageRef = value.Id;
					}
					else
					{
						this._StageRef = default(int);
					}
					this.SendPropertyChanged("Stage");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[Group]")]
	public partial class Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<GroupUser> _GroupUsers;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Group()
		{
			this._GroupUsers = new EntitySet<GroupUser>(new Action<GroupUser>(this.attach_GroupUsers), new Action<GroupUser>(this.detach_GroupUsers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupUser", Storage="_GroupUsers", ThisKey="Id", OtherKey="GroupRef")]
		public EntitySet<GroupUser> GroupUsers
		{
			get
			{
				return this._GroupUsers;
			}
			set
			{
				this._GroupUsers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.Group = this;
		}
		
		private void detach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.[User]")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _Id;
		
		private string _Username;
		
		private string _Password;
		
		private string _Email;
		
		private string _OpenId;
		
		private string _Name;
		
		private int _RoleRef;
		
		private bool _IsApproved;
		
		private EntitySet<GroupUser> _GroupUsers;
		
		private EntityRef<Role> _Role;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(System.Guid value);
    partial void OnIdChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnOpenIdChanging(string value);
    partial void OnOpenIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnRoleRefChanging(int value);
    partial void OnRoleRefChanged();
    partial void OnIsApprovedChanging(bool value);
    partial void OnIsApprovedChanged();
    #endregion
		
		public User()
		{
			this._GroupUsers = new EntitySet<GroupUser>(new Action<GroupUser>(this.attach_GroupUsers), new Action<GroupUser>(this.detach_GroupUsers));
			this._Role = default(EntityRef<Role>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true, IsDbGenerated=true)]
		public System.Guid Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_OpenId", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string OpenId
		{
			get
			{
				return this._OpenId;
			}
			set
			{
				if ((this._OpenId != value))
				{
					this.OnOpenIdChanging(value);
					this.SendPropertyChanging();
					this._OpenId = value;
					this.SendPropertyChanged("OpenId");
					this.OnOpenIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(200) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleRef", DbType="Int NOT NULL")]
		public int RoleRef
		{
			get
			{
				return this._RoleRef;
			}
			set
			{
				if ((this._RoleRef != value))
				{
					if (this._Role.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleRefChanging(value);
					this.SendPropertyChanging();
					this._RoleRef = value;
					this.SendPropertyChanged("RoleRef");
					this.OnRoleRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsApproved", DbType="Bit NOT NULL")]
		public bool IsApproved
		{
			get
			{
				return this._IsApproved;
			}
			set
			{
				if ((this._IsApproved != value))
				{
					this.OnIsApprovedChanging(value);
					this.SendPropertyChanging();
					this._IsApproved = value;
					this.SendPropertyChanged("IsApproved");
					this.OnIsApprovedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupUser", Storage="_GroupUsers", ThisKey="Id", OtherKey="UserRef")]
		public EntitySet<GroupUser> GroupUsers
		{
			get
			{
				return this._GroupUsers;
			}
			set
			{
				this._GroupUsers.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Role", ThisKey="RoleRef", OtherKey="Id", IsForeignKey=true)]
		public Role Role
		{
			get
			{
				return this._Role.Entity;
			}
			set
			{
				Role previousValue = this._Role.Entity;
				if (((previousValue != value) 
							|| (this._Role.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Role.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Role.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleRef = value.Id;
					}
					else
					{
						this._RoleRef = default(int);
					}
					this.SendPropertyChanged("Role");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_GroupUsers(GroupUser entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupUsers")]
	public partial class GroupUser : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupRef;
		
		private System.Guid _UserRef;
		
		private EntityRef<Group> _Group;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupRefChanging(int value);
    partial void OnGroupRefChanged();
    partial void OnUserRefChanging(System.Guid value);
    partial void OnUserRefChanged();
    #endregion
		
		public GroupUser()
		{
			this._Group = default(EntityRef<Group>);
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupRef", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int GroupRef
		{
			get
			{
				return this._GroupRef;
			}
			set
			{
				if ((this._GroupRef != value))
				{
					if (this._Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupRefChanging(value);
					this.SendPropertyChanging();
					this._GroupRef = value;
					this.SendPropertyChanged("GroupRef");
					this.OnGroupRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserRef", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid UserRef
		{
			get
			{
				return this._UserRef;
			}
			set
			{
				if ((this._UserRef != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserRefChanging(value);
					this.SendPropertyChanging();
					this._UserRef = value;
					this.SendPropertyChanged("UserRef");
					this.OnUserRefChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Group_GroupUser", Storage="_Group", ThisKey="GroupRef", OtherKey="Id", IsForeignKey=true)]
		public Group Group
		{
			get
			{
				return this._Group.Entity;
			}
			set
			{
				Group previousValue = this._Group.Entity;
				if (((previousValue != value) 
							|| (this._Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Group.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._Group.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._GroupRef = value.Id;
					}
					else
					{
						this._GroupRef = default(int);
					}
					this.SendPropertyChanged("Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_GroupUser", Storage="_User", ThisKey="UserRef", OtherKey="Id", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.GroupUsers.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.GroupUsers.Add(this);
						this._UserRef = value.Id;
					}
					else
					{
						this._UserRef = default(System.Guid);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Role")]
	public partial class Role : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<User> _Users;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Role()
		{
			this._Users = new EntitySet<User>(new Action<User>(this.attach_Users), new Action<User>(this.detach_Users));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Role_User", Storage="_Users", ThisKey="Id", OtherKey="RoleRef")]
		public EntitySet<User> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = this;
		}
		
		private void detach_Users(User entity)
		{
			this.SendPropertyChanging();
			entity.Role = null;
		}
	}
}
#pragma warning restore 1591
