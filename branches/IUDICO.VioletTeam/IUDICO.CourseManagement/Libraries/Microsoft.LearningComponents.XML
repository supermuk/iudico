<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Microsoft.LearningComponents</name>
    </assembly>
    <members>
        <member name="T:Microsoft.LearningComponents.AudioCaptioning">
            <summary>
            AudioCaptioning
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AudioCaptioning.Off">
            <summary>
            Off (-1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AudioCaptioning.NoChange">
            <summary>
            NoChange (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AudioCaptioning.On">
            <summary>
            On (1).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.CompletionStatus">
            <summary>
            CompletionStatus
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.CompletionStatus.Unknown">
            <summary>
            Unknown (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.CompletionStatus.Completed">
            <summary>
            Completed (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.CompletionStatus.Incomplete">
            <summary>
            Incomplete (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.CompletionStatus.NotAttempted">
            <summary>
            NotAttempted (3).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ExitMode">
            <summary>
            ExitMode
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ExitMode.Undetermined">
            <summary>
            Undetermined (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ExitMode.Logout">
            <summary>
            Logout (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ExitMode.Normal">
            <summary>
            Normal (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ExitMode.TimeOut">
            <summary>
            TimeOut (3).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ExitMode.Suspended">
            <summary>
            Suspended (4).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DisplayMode">
            <summary>
            DisplayMode
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DisplayMode.Normal">
            <summary>
            Normal (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DisplayMode.Browse">
            <summary>
            Browse (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DisplayMode.Review">
            <summary>
            Review (2).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SuccessStatus">
            <summary>
            SuccessStatus
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SuccessStatus.Unknown">
            <summary>
            Unknown (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SuccessStatus.Failed">
            <summary>
            Failed (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SuccessStatus.Passed">
            <summary>
            Passed (2).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.TimeLimitAction">
            <summary>
            TimeLimitAction
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.TimeLimitAction.ContinueNoMessage">
            <summary>
            ContinueNoMessage (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.TimeLimitAction.ContinueWithMessage">
            <summary>
            ContinueWithMessage (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.TimeLimitAction.ExitNoMessage">
            <summary>
            ExitNoMessage (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.TimeLimitAction.ExitWithMessage">
            <summary>
            ExitWithMessage (3).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.InteractionType">
            <summary>
            InteractionType
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Other">
            <summary>
            Other (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.FillIn">
            <summary>
            FillIn (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Likert">
            <summary>
            Likert (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.LongFillIn">
            <summary>
            LongFillIn (3).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Matching">
            <summary>
            Matching (4).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.MultipleChoice">
            <summary>
            MultipleChoice (5).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Numeric">
            <summary>
            Numeric (6).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Performance">
            <summary>
            Performance (7).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Sequencing">
            <summary>
            Sequencing (8).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.TrueFalse">
            <summary>
            TrueFalse (9).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Essay">
            <summary>
            Essay (10).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionType.Attachment">
            <summary>
            Attachment (11).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.InteractionResultState">
            <summary>
            InteractionResultState
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionResultState.None">
            <summary>
            None (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionResultState.Correct">
            <summary>
            Correct (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionResultState.Incorrect">
            <summary>
            Incorrect (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionResultState.Neutral">
            <summary>
            Neutral (3).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionResultState.Numeric">
            <summary>
            Numeric (4).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionResultState.Unanticipated">
            <summary>
            Unanticipated (5).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.PackageFormat">
            <summary>
            PackageFormat
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.PackageFormat.Lrm">
            <summary>
            Lrm (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.PackageFormat.V1p2">
            <summary>
            V1p2 (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.PackageFormat.V1p3">
            <summary>
            V1p3 (2).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.LessonStatus">
            <summary>
            LessonStatus
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LessonStatus.NotAttempted">
            <summary>
            NotAttempted (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LessonStatus.Browsed">
            <summary>
            Browsed (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LessonStatus.Completed">
            <summary>
            Completed (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LessonStatus.Failed">
            <summary>
            Failed (3).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LessonStatus.Incomplete">
            <summary>
            Incomplete (4).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LessonStatus.Passed">
            <summary>
            Passed (5).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.NavigationCommand">
            <summary>
            NavigationCommand
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.None">
            <summary>
            None (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.Abandon">
            <summary>
            Abandon (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.AbandonAll">
            <summary>
            AbandonAll (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.ChoiceStart">
            <summary>
            ChoiceStart (3).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.Choose">
            <summary>
            Choose (4).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.Continue">
            <summary>
            Continue (5).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.ExitAll">
            <summary>
            ExitAll (6).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.Previous">
            <summary>
            Previous (7).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.ResumeAll">
            <summary>
            ResumeAll (8).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.Start">
            <summary>
            Start (9).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.SuspendAll">
            <summary>
            SuspendAll (10).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigationCommand.UnqualifiedExit">
            <summary>
            UnqualifiedExit (11).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SequencingEventType">
            <summary>
            SequencingEventType
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingEventType.FinalNavigation">
            <summary>
            FinalNavigation (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingEventType.IntermediateNavigation">
            <summary>
            IntermediateNavigation (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingEventType.Rollup">
            <summary>
            Rollup (2).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.AttemptStatus">
            <summary>
            AttemptStatus
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttemptStatus.Active">
            <summary>
            Active (0).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttemptStatus.Abandoned">
            <summary>
            Abandoned (1).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttemptStatus.Completed">
            <summary>
            Completed (2).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttemptStatus.Suspended">
            <summary>
            Suspended (3).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal">
            <summary>
            Contains schema-related constants.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.ActivityAttemptItem">
            <summary>
            Contains constants related to the ActivityAttemptItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityAttemptItem.MaxLocationLength">
            <summary>
            Maximum length of the Location property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityAttemptItem.MaxSuspendDataLength">
            <summary>
            Maximum length of the SuspendData property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.ActivityObjectiveItem">
            <summary>
            Contains constants related to the ActivityObjectiveItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityObjectiveItem.MaxKeyLength">
            <summary>
            Maximum length of the Key property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.ActivityPackageItem">
            <summary>
            Contains constants related to the ActivityPackageItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityPackageItem.MaxActivityIdFromManifestLength">
            <summary>
            Maximum length of the ActivityIdFromManifest property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityPackageItem.MaxPrimaryResourceFromManifestLength">
            <summary>
            Maximum length of the PrimaryResourceFromManifest property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityPackageItem.MaxLaunchDataLength">
            <summary>
            Maximum length of the LaunchData property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityPackageItem.MaxResourceParametersLength">
            <summary>
            Maximum length of the ResourceParameters property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ActivityPackageItem.MaxTitleLength">
            <summary>
            Maximum length of the Title property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.PackageGlobalObjectiveItem">
            <summary>
            Contains constants related to the PackageGlobalObjectiveItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.AttemptItem">
            <summary>
            Contains constants related to the AttemptItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.AttemptObjectiveItem">
            <summary>
            Contains constants related to the AttemptObjectiveItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.AttemptObjectiveItem.MaxDescriptionLength">
            <summary>
            Maximum length of the Description property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.AttemptObjectiveItem.MaxKeyLength">
            <summary>
            Maximum length of the Key property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLearnerItem">
            <summary>
            Contains constants related to the CommentFromLearnerItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLearnerItem.MaxCommentLength">
            <summary>
            Maximum length of the Comment property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLearnerItem.MaxLocationLength">
            <summary>
            Maximum length of the Location property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLearnerItem.MaxTimestampLength">
            <summary>
            Maximum length of the Timestamp property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLmsItem">
            <summary>
            Contains constants related to the CommentFromLmsItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLmsItem.MaxCommentLength">
            <summary>
            Maximum length of the Comment property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLmsItem.MaxLocationLength">
            <summary>
            Maximum length of the Location property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CommentFromLmsItem.MaxTimestampLength">
            <summary>
            Maximum length of the Timestamp property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.CorrectResponseItem">
            <summary>
            Contains constants related to the CorrectResponseItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.CorrectResponseItem.MaxResponsePatternLength">
            <summary>
            Maximum length of the ResponsePattern property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.EvaluationCommentItem">
            <summary>
            Contains constants related to the EvaluationCommentItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.EvaluationCommentItem.MaxCommentLength">
            <summary>
            Maximum length of the Comment property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.EvaluationCommentItem.MaxLocationLength">
            <summary>
            Maximum length of the Location property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.EvaluationCommentItem.MaxTimestampLength">
            <summary>
            Maximum length of the Timestamp property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.ExtensionDataItem">
            <summary>
            Contains constants related to the ExtensionDataItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ExtensionDataItem.MaxNameLength">
            <summary>
            Maximum length of the Name property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ExtensionDataItem.MaxAttachmentValueLength">
            <summary>
            Maximum length of the AttachmentValue property in bytes.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.ExtensionDataItem.MaxStringValueLength">
            <summary>
            Maximum length of the StringValue property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.GlobalObjectiveItem">
            <summary>
            Contains constants related to the GlobalObjectiveItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.GlobalObjectiveItem.MaxKeyLength">
            <summary>
            Maximum length of the Key property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.GlobalObjectiveItem.MaxDescriptionLength">
            <summary>
            Maximum length of the Description property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.InteractionItem">
            <summary>
            Contains constants related to the InteractionItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.InteractionItem.MaxInteractionIdFromCmiLength">
            <summary>
            Maximum length of the InteractionIdFromCmi property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.InteractionItem.MaxTimestampLength">
            <summary>
            Maximum length of the Timestamp property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.InteractionItem.MaxDescriptionLength">
            <summary>
            Maximum length of the Description property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.InteractionItem.MaxLearnerResponseStringLength">
            <summary>
            Maximum length of the LearnerResponseString property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.InteractionObjectiveItem">
            <summary>
            Contains constants related to the InteractionObjectiveItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.LearnerGlobalObjectiveItem">
            <summary>
            Contains constants related to the LearnerGlobalObjectiveItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.MapActivityObjectiveToGlobalObjectiveItem">
            <summary>
            Contains constants related to the MapActivityObjectiveToGlobalObjectiveItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.PackageItem">
            <summary>
            Contains constants related to the PackageItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.PackageItem.MaxLocationLength">
            <summary>
            Maximum length of the Location property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.RubricItem">
            <summary>
            Contains constants related to the RubricItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.ResourceItem">
            <summary>
            Contains constants related to the ResourceItem item type.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.SequencingLogEntryItem">
            <summary>
            Contains constants related to the SequencingLogEntryItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.SequencingLogEntryItem.MaxMessageLength">
            <summary>
            Maximum length of the Message property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.BaseSchemaInternal.UserItem">
            <summary>
            Contains constants related to the UserItem item type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.UserItem.MaxKeyLength">
            <summary>
            Maximum length of the Key property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.UserItem.MaxNameLength">
            <summary>
            Maximum length of the Name property in characters.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.BaseSchemaInternal.UserItem.MaxLanguageLength">
            <summary>
            Maximum length of the Language property in characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Activity">
            <summary>
            Represents a SCORM activity.
            </summary>
            <remarks>
            This class contains all information necessary to represent an activity, including the 
            <Typ>LearningDataModel</Typ>.  Activities are stored in a tree structure and are a superset
            of the <Typ>TableOfContentsElement</Typ> class.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.TableOfContentsElement">
            <summary>
            Represents an element in the Table of Contents
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.TableOfContentsElement.#ctor">
            <summary>
            Internal constructor added so no 3rd parties can extend this class
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.Title">
            <summary>
            Gets the title for this table of contents element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.Children">
            <summary>
            Gets the children of this table of contents element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.IsValidChoiceNavigationDestination">
            <summary>
            Gets whether or not this table of contents element is valid to navigate to via Choice navigation.
            </summary>
            <remarks>
            This value is only guaranteed valid at the time immediately after the calling of
            <c>LoadTableOfContents</c>.  Changes made to the current activity's data model or
            navigations performed after this call may change whether or not this element is 
            actually valid to navigate to, but this will not be reflected in this value unless
            or until <c>LoadTableOfContents</c> is called again.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.ResourceType">
            <summary>
            Gets the type of the resource associated with this table of contents element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.ActivityId">
            <summary>
            Gets a unique identifier for the activity associated with this table of contents element.
            </summary>
            <remarks>
            Using this identifier within <c>NavigateTo</c> instead of the activity's string identifier
            will result in improved performance.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.IsVisible">
            <summary>
            Gets whether or not this table of contents element is displayed when the structure of the package is displayed or rendered.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.TableOfContentsElement.HasVisibleChildren">
            <summary>
            Gets whether or not this table of contents element has at least one descendant child, any level deep, with a value of
            <c>true</c> for <Mth>IsVisible</Mth>.
            </summary>
            <remarks>
            This value is used to determine how to display the UI of nodes - whether the node should be displayed as having available
            children or not.
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_owner">
            <summary>
            The Navigator object that owns this activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_parent">
            <summary>
            The parent of this activity.  This is null for the root activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_next">
            <summary>
            The next sibling activity.  This is null for a right-most activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_previous">
            <summary>
            The previous sibling activity.  This is null for a left-most activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_children">
            <summary>
            A list of the children of this activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_rawStaticXml">
            <summary>
            An xml block in Static Activity XML format.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_dataModel">
            <summary>
            The activity's data model.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_activityId">
            <summary>
            A unique identifier for this activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_randomPlacement">
            <summary>
            Random placement of this activity within its parent, or -1 if the original placement is to be used.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_objectivesGlobalToSystem">
            <summary>
            True if objectives are global to the system for this activity tree.  This is only valid for the root
            activity, it should be ignored for all other activities.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_sequencing">
            <summary>
            Static sequencing data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_isValidToNavigateTo">
            <summary>
            Whether or not this activity is valid to navigate to.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_internalActivityId">
            <summary>
            Internal activity id, used for saving data to the database.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.#ctor(Microsoft.LearningComponents.Navigator,System.Int64,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentDelegate,Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentGuidDelegate,System.Int32,System.Boolean,Microsoft.LearningComponents.DataModel.DataModelWriteValidationMode,System.String,System.String,System.String,Microsoft.LearningComponents.AudioCaptioning,System.Single,System.Single)">
            <summary>
            Initializes an Activity object.
            </summary>
            <param name="owner">The owner of this actitity tree.</param>
            <param name="activityId">The unique identifier of this activity.</param>
            <param name="rawStaticData">Refers to an xml block in Static Activity XML format.</param>
            <param name="rawSequencingData">Refers to an xml block in Sequencing Activity XML format.</param>
            <param name="rawDynamicData">Refers to an xml block in Dynamic Activity XML format.</param>
            <param name="commentsFromLms">Refers to an xml block in LMS Comments XML format.</param>
            <param name="wrap">Delegate to wrap attachments.</param>
            <param name="wrapGuid">Delegate to wrap guids that represent attachments.</param>
            <param name="randomPlacement">Random placement of this activity within its parent, or -1 if the original placement is to be used.</param>
            <param name="objectivesGlobalToSystem">Whether or not objectives are global to the system within this activity tree.</param>
            <param name="writeValidationMode">Validation mode to determine if the data model is writable.</param>
            <param name="learnerId">The unique identifier of the learner.</param>
            <param name="learnerName">The name of the learner.</param>
            <param name="learnerLanguage">The language code for the learner.</param>
            <param name="learnerCaption">The AudioCaptioning setting for the learner.</param>
            <param name="learnerAudioLevel">The audio level setting for the learner.</param>
            <param name="learnerDeliverySpeed">The delivery speed setting for the learner.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.UpdateScore(System.Nullable{System.Single},System.Nullable{System.Single})">
            <summary>
            Updates the total score for the entire activity tree.
            </summary>
            <param name="oldScore">The previous score for this activity.</param>
            <param name="newScore">The new score for this activity.</param>
            <remarks>
            This method must only be called for SCORM 1.2 or LRM packages.
            The value passed is intended to be added to the previous
            value of Navigator.TotalPoints.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.#ctor(Microsoft.LearningComponents.Navigator,System.Int64,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.Int32)">
            <summary>
            Initializes an Activity object for cloning.
            </summary>
            <param name="owner">The owner of this actitity tree.</param>
            <param name="activityId">The unique identifier of this activity.</param>
            <param name="rawStaticData">Refers to an xml block in Static Activity XML format.</param>
            <param name="rawSequencingData">Refers to an xml block in Sequencing Activity XML format.</param>
            <param name="randomPlacement">Random placement of this activity within its parent, or -1 if the original placement is to be used.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.CloneForNavigationTest">
            <summary>
            Clones this activity by copying only the data needed for sequencing/navigation.
            </summary>
            <returns>A new activity with data similar enough for sequencing/navigation purposes.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.OnDataModelChanged">
            <summary>
            Called via delegate when the data model changes
            </summary>
            <remarks>
            This method merely adds this activity to the collection of dirty activities in the 
            <Typ>Navigator</Typ> that owns this activity.  Later, it is the responsibility of that 
            <Typ>Navigator</Typ> to save these dirty activities if the view mode supports saving.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.GetResourceType(System.Xml.XPath.XPathNavigator)">
            <summary>
            Gets the resource type from the specified navigator
            </summary>
            <param name="parent">The navigator that holds the resourceType attribute</param>
            <returns>The resource type</returns>
            <remarks>Added to get around the FxCop warning CA2214, which complains about 
            calling a virtual method in a constructor.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.SetValidToNavigateTo(System.Boolean)">
            <summary>
            Sets whether or not this activity is valid to navigate to.
            </summary>
            <param name="isValidToNavigateTo">Whether or not this activity is valid to navigate to.</param>
            <remarks>
            We can't just make an internal set for this property because that conflicts with
            the abstract get accessor.
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.Activity.m_prerequisites">
            <summary>
            The prerequisites for the activity.  This value is only valid for SCORM 1.2
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.AddChild(Microsoft.LearningComponents.Activity)">
            <summary>
            Adds a child activity to this activity.
            </summary>
            <param name="child">The activity to add as a child.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.RemoveChild(System.Int32)">
            <summary>
            Removes a child activity at the specified index position.
            </summary>
            <param name="index">The location to remove the child activity from.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.CompareActivities(Microsoft.LearningComponents.TableOfContentsElement,Microsoft.LearningComponents.TableOfContentsElement)">
            <summary>
            Compares two activites for their position within their parent.
            </summary>
            <param name="elem1">First activity to compare.</param>
            <param name="elem2">Second activity to compare.</param>
            <returns>Less than 0 if elem1 is less than elem2, 0 if they are equal, greater than 0 
            if elem1 is greater than elem2.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Activity.SortChildren">
            <summary>
            Sorts children and makes sure their <Prp>Next</Prp>/<Prp>Previous</Prp> pointers are correct.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.ObjectivesGlobalToSystem">
            <summary>
            Gets whether or not objectives are global to the system for this activity tree.  This is only valid for the root
            activity, it should be ignored for all other activities.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Title">
            <summary>
            Gets the title for this table of contents element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Children">
            <summary>
            Gets the children of this table of contents element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.IsValidChoiceNavigationDestination">
            <summary>
            Gets whether or not this table of contents element is valid to navigate to.
            </summary>
            <remarks>
            This value is only guaranteed valid at the time immediately after the calling of
            <c>LoadTableOfContents</c>.  Changes made to the current activity's data model or
            navigations performed after this call may change whether or not this element is 
            actually valid to navigate to, but this will not be reflected in this value unless
            or until <c>LoadTableOfContents</c> is called again.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.ResourceType">
            <summary>
            Gets the type of the resource associated with this table of contents element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.ActivityId">
            <summary>
            Gets a unique identifier for the activity associated with this table of contents element.
            </summary>
            <remarks>
            Using this identifier within <c>NavigateTo</c> instead of the activity's string identifier
            will result in improved performance.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.DataModel">
            <summary>
            Gets the data model associated with this activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Key">
            <summary>
            Gets the string identifier of this activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Parameters">
            <summary>
            Gets the parameters to be passed to the resource associated with this activity at launch time.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.ResourceKey">
            <summary>
            Gets the string identifier for the resource associated with this activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.DefaultResourceFile">
            <summary>
            Gets the default file from the resource associated with this activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.HidePreviousUI">
            <summary>
            Gets whether the UI should hide the "previous" button.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.HideContinueUI">
            <summary>
            Gets whether the UI should hide the "continue" (e.g. "next") button.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.HideExitUI">
            <summary>
            Gets whether the UI should hide the "exit" button.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.HideAbandonUI">
            <summary>
            Gets whether the UI should hide the "abandon" button.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Parent">
            <summary>
            Gets or sets the parent activity of this activity
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Next">
            <summary>
            Gets or sets the next activity of this activity
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Previous">
            <summary>
            Gets or sets the next activity of this activity
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.InternalActivityId">
            <summary>
            Internal activity id, used for saving data to the database.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Position">
            <summary>
            Gets an activities actual current position within the parent, possibly modified by random placement.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.IsVisible">
            <summary>
            Gets whether or not this activity is displayed when the structure of the package is displayed or rendered.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.HasVisibleChildren">
            <summary>
            Gets whether or not this table of contents element has at least one descendant child, any level deep, with a value of
            <c>true</c> for <Mth>IsVisible</Mth>.
            </summary>
            <remarks>
            This value is used to determine how to display the UI of nodes - whether the node should be displayed as having available
            children or not.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.IsLeaf">
            <summary>
            Gets whether or not this activity is a leaf activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.IsLastActivityInTree">
            <summary>
            Gets whether or not this activity is the last activity in the tree.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.NextInPreorderTraversal">
            <summary>
            Gets the next activity in the tree, in preorder traversal order.  
            If there is no next activity, null is returned.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.PreviousInPreorderTraversal">
            <summary>
            Gets the previous activity in the tree, in preorder traversal order.  
            If there is no previous activity, null is returned.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Prerequisites">
            <summary>
            Gets the prerequisites for the activity.  This value is only valid for SCORM 1.2
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.Sequencing">
            <summary>
            Gets the static sequencing information
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.PrimaryObjective">
            <summary>
            Gets the primary objective associated with this activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Activity.RandomPlacement">
            <summary>
            Gets or sets the random placement of this activity within its parent
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.FormDataProcessor">
            <summary>
            Represents a processor that can save posted form data in the approriate format.
            FormDataProcessors read and process data based on Interactions.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.#ctor(Microsoft.LearningComponents.RloProcessFormDataContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context">Context in which data from a posted form is processed.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process form data sent from client for the current interaction.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ProcessRandomAccessView(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Random Access view version of ProcessFormData.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ValidateFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Returns if the posted form data is valid for the current Interaction, otherwise
            throws <Typ>InvalidFormDataException</Typ>.
            </summary>
            <param name="formData">Form data containing the responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ValidateRandomAccessView(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Validates that item scores, rubrics, and instructor comments are valid.
            </summary>
            <param name="formData">Form data containing the responses.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the form data processor to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.AppendLearnerResponse(System.Text.StringBuilder,System.String)">
            <summary>
            Helper function to append one learner response string (which is not encoded)
            to the buffer that will be assigend to Interaction.LearnerResponse.
            </summary>
            <param name="sb">Buffer to add the encoded learner response data to.</param>
            <param name="learnerResponse">The response from the learner.</param>
            <returns>The encoded value that can be added to Interaction.LearnerResponse. Does not include
            initial separator.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ExtractLearnerResponse(System.Object,System.Int32)">
            <summary>
            Helper function to extract one learner response out of an Interaction.LearnerResponse, by ordinal.
            </summary>
            <param name="learnerResponse">Interaction.LearnerResponse</param>
            <param name="ordinal">Ordinal of response to obtain.</param>
            <returns>The learner response string at the ordinal requested, or String.Empty if none exists.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.GetPostedEvaluationPointsForInteraction(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the posted instructor evaluation poitns for the interaction.  If there is no posted value, returns null.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The posted score isn't a valid float.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ConvertPostedTextAreaDataToDatabaseFormat(System.String)">
            <summary>
            Converts a posted value for a textarea into a format to be stored in the database.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ConvertDatabaseFormatToTextArea(System.String)">
            <summary>
            Converts a value stored in the database that originally came from a posted textarea 
            into a value for posting to an html page inside a textarea.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FormDataProcessor.ConvertDatabaseFormatToHtml(System.String)">
            <summary>
            Converts a value stored in the database that originally came from a posted textarea 
            into a value for posting to an html page (but not inside a textarea.)
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.FormDataProcessor.Context">
            <summary>
            Gets the current context of form data processing.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.FormDataProcessor.Interaction">
            <summary>
            Gets and sets the interaction associated with the current data being procesed.
            </summary>
            <remarks>This is set by AssessmentItemManager. Used by subclasses. </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor">
            <summary>
            Represents processor to multiple-choice interactions, which corresponds to the <c>AssessmentItemType.Radio</c>
            or <c>AssessmentItemType.Checkbox</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.#ctor(Microsoft.LearningComponents.RloProcessFormDataContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.SetExecuteViewResponses(System.Nullable{System.Single},Microsoft.LearningComponents.InteractionResultState,System.String)">
            <summary>
            Helper method.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process form data sent from client for the current interaction.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the form data processor to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.ValidateFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Returns if the posted form data is valid for the current Interaction, otherwise
            throws <Typ>InvalidFormDataException</Typ>.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.MaxPoints(Microsoft.LearningComponents.DataModel.Interaction,System.String)">
            <summary>
            Returns the extension data's maxpoints value for the ordinal, or 0 if it doesn't exist.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.MultipleChoiceFormDataProcessor.GetExecuteViewResults(System.Collections.Specialized.NameValueCollection,System.Nullable{System.Single}@,Microsoft.LearningComponents.InteractionResultState@,System.String@)">
            <summary>
            Returns the score, InteractionResultState, and learner response for the posted form data for this interaction.
            </summary>
            <remarks>
            For a radio button, the learner response is the form field name of the radio button.  For a checkbox, the
            learner response is a "[,]" separated list of the form field names.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.FileAttachmentFormDataProcessor">
            <summary>
            Represents processor to FileAttachment interactions, which correspond to 
            File attachment AssessmentItemType.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.#ctor(Microsoft.LearningComponents.RloProcessFormDataContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.ExecuteViewProcessFormData(System.Collections.Specialized.NameValueCollection,Microsoft.LearningComponents.FileAttachmentFormDataProcessor.GetFileDelegate)">
            <summary>
            Internal version of <c>ProcessFormData</c> for execute view.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,Microsoft.LearningComponents.FileAttachmentFormDataProcessor.GetFileDelegate)">
            <summary>
            Internal version of <c>ProcessFormData</c> for easier unit testing purposes.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.ValidateFormData(Microsoft.LearningComponents.FileAttachmentFormDataProcessor.GetFileDelegate)">
            <summary>
            Internal version of ValidateFormData that takes a delegate.
            </summary>
            <param name="getFileDelegate">Delegate to get the file stream and name.</param>
        </member>
        <member name="F:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.m_files">
            <summary>
            Set at the beginning of ProcessFormData() and ValidateFormData() and used by the GetStream() delegate.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.GetFile(System.String,System.IO.Stream@,System.String@)">
            <summary>
            Returns a stream from the m_files state data.  If the file is not in m_files, stream is returned as null.
            The length of the stream will be 0 if no file was chosen for upload, and the filename will be String.Empty.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process form data sent from client for the current interaction.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the form data processor to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.ValidateFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Returns if the posted form data is valid for the current Interaction, otherwise
            throws <Typ>InvalidFormDataException</Typ>.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.FileAttachmentFormDataProcessor.GetFileDelegate">
            <summary>
            Delegate to pass to the internal versions of ProcessFormData() and ValidateFormData(), which allows for
            easier unit testing.
            </summary>
            <param name="fieldName">Form field that identifies which file to retrieve from the posted files.</param>
            <param name="stream">Stream for the file, or null if not found.</param>
            <param name="filename">File name for the file, or String.Empty if not found.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.EssayFormDataProcessor">
            <summary>
            Represents processor to Essay interactions, which corresponds to the <c>AssessmentItemType.TextArea</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.EssayFormDataProcessor.#ctor(Microsoft.LearningComponents.RloProcessFormDataContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.EssayFormDataProcessor.ExecuteViewProcessFormData(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Execute view version of ProcessFormData.
            </summary>
            <param name="formData">Form data containing the learner responses, or null if called from ProcessSessionEnd.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.EssayFormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process form data sent from client for the current interaction.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.EssayFormDataProcessor.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the form data processor to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.EssayFormDataProcessor.ValidateFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Returns if the posted form data is valid for the current Interaction, otherwise
            throws <Typ>InvalidFormDataException</Typ>.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.FillInFormDataProcessor">
            <summary>
            Represents processor to fill in the blank interactions, which corresponds to the <c>AssessmentItemType.Text</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.#ctor(Microsoft.LearningComponents.RloProcessFormDataContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.ExecuteViewProcessFormData(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Execute view version of ProcessFormData.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.IsCorrectResponse(System.String,System.String,System.Boolean)">
            <summary>
            Returns true if the supplied <paramref name="correctResponsePattern"/> contains the
            <paramref name="learnerResponse"/> according to the casing rules of
            <paramref name="ignoreCase"/>
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process form data sent from client for the current interaction.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the form data processor to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.GetCorrectResponses(Microsoft.LearningComponents.DataModel.Interaction,System.Collections.Generic.List{System.String}@,System.Boolean@,System.Boolean@)">
            <summary>
            Returns the correct responses for the interaction.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FillInFormDataProcessor.ValidateFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Returns if the posted form data is valid for the current Interaction, otherwise
            throws <Typ>InvalidFormDataException</Typ>.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.MatchingFormDataProcessor">
            <summary>
            Represents processor to matching interactions, which corresponds to the <c>AssessmentItemType.Select</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.MatchingFormDataProcessor.#ctor(Microsoft.LearningComponents.RloProcessFormDataContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.MatchingFormDataProcessor.ExecuteViewProcessFormData(System.String[])">
            <summary>
            Process form data sent from client for the current interaction for execute view.
            </summary>
            <param name="values">String array returned from GetPostedValues, or null if called from ProcessSessionEnd.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.MatchingFormDataProcessor.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process form data sent from client for the current interaction.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <remarks>Interaction must be set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.MatchingFormDataProcessor.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the form data processor to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.MatchingFormDataProcessor.ValidateFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Returns if the posted form data is valid for the current Interaction, otherwise
            throws <Typ>InvalidFormDataException</Typ>.
            </summary>
            <param name="formData">Form data containing the learner responses.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.MatchingFormDataProcessor.GetPostedValues(System.Collections.Specialized.NameValueCollection)">
            <summary>
            Returns the posted values, by ordinal, for the &lt;select&gt; that represents this interaction.
            Returns null if there are no response options in the interaction extension data.
            Otherwise, returns a string[] with a length equal to the response option count.  Each array member
            will be the option value, where "0" represents
            the blank choice and other values are the other selections.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">The <paramref name="formData"/> did not have
            the correct name/value pairs expected by the interaction.</exception>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.Correct">
            <summary>
            An image showing a check mark.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.Incorrect">
            <summary>
            An image showing an 'x'.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.BoxOff">
            <summary>
            A checkbox unchecked.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.BoxOffCorrect">
            <summary>
            A checkbox correctly unchecked.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.BoxOn">
            <summary>
            A checked checkbox.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.BoxOnCorrect">
            <summary>
            A correctly checked checkbox.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.BoxOnWrong">
            <summary>
            An incorrectly checked checkbox.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.ButtonOnCorrect">
            <summary>
            An image showing a radio button that has been selected and determined to be correct.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.ButtonOnWrong">
            <summary>
            An image showing a radio button that has been selected and determined to be incorrect.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.ButtonOffCorrect">
            <summary>
            An image showing a radio button that was not selected but should have been the correct response.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImageFileName.ButtonOff">
            <summary>
            An image showing a radio button that was not selected.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.InteractionExtensionDataKeys">
            <summary>
            Strings used for extension data keys in interactions.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionExtensionDataKeys.ResponseOptionCount">
            <summary>
            The number of response options contributing to this Interaction.  Only used for some assessment item types.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionExtensionDataKeys.AssessmentItemType">
            <summary>
            Keeps track of the first non-score assessment item type contributing to this Interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionExtensionDataKeys.PageRendered">
            <summary>
            Indicates the page has been rendered at least once if the key exists in the learning data model extension data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.InteractionExtensionDataKeys.PageAutograded">
            <summary>
            Indicates the page has been autograded at least once if the key exists in the learning data model extension data.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.InteractionExtensionDataKeys.AutogradeResponse(System.String)">
            <summary>
            Key used by the autograding to add comments (e.g. correct answers) to the review view.  The lack of a comment
            of this type for a particular ordinal indicates the answer to the corresponding ordinal was a correct one.
            </summary>
            <param name="ordinal">ordinal of the assessment item.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.InteractionExtensionDataKeys.MaxPoints(System.String)">
            <summary>
            Key for an assessment item value, based on the ordinal.
            </summary>
            <param name="ordinal">ordinal of the assessment item.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.InteractionExtensionDataKeys.FileAttachment(System.String)">
            <summary>
            Key for a file attachment.  Value will contain either (bool)false if there is no file,
            or byte[] file.
            </summary>
            <param name="ordinal">ordinal of the assessment item.</param>
            <returns>Key.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.InteractionExtensionDataKeys.FileExtension(System.String)">
            <summary>
            File extension for the file attachment.
            </summary>
            <param name="ordinal">ordinal of the assessment item.</param>
            <returns>File extension.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.InteractionExtensionDataKeys.MatchingOptionValue(System.Int32)">
            <summary>
            Holds the value for a matching type interaction for the given ordinal.
            </summary>
            <param name="itemCount"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.LearningComponents.AssessmentItemRenderer">
            <summary>
            Represents a handler to render assessment items in various views. This includes 
            adding initial data into the data model for the assessment item.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">An ordinal indicating the number of times the same assessment item type has 
            previously appeared with the same assessment item id, during the current rendering process.
            </param>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false may be returned in an error case, for instance when
            attempting to add a checkbox type when the interaction has already been added with a radio button
            type.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemRenderer.InstructorComments(System.Int32)">
            <summary>
            Returns the instructor comments for the requested ordinal, or String.Empty if none.
            </summary>
            <param name="ordinal"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemRenderer.RenderInstructorCommentsFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the instructor comments form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemRenderer.RenderInstructorComments(System.Text.StringBuilder,System.Int32)">
            <summary>
            Renders the instructor comments.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemRenderer.RenderContext">
            <summary>
            The context given to the constructor, as a <Typ>RloRenderContext.</Typ>
            </summary>
            <exception cref="T:Microsoft.LearningComponents.LearningComponentsInternalException">The context given to the contructor is not a <Typ>RloRenderContext</Typ>.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemRenderer.DataModelContext">
            <summary>
            Sets the current context.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemRenderer.IsSameAsInteractionType">
            <summary>
            Returns true if the assessment item's type is the same as that contained within the interaction
            stored in the learning data model associated with the assessment item's id.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemRenderer.AssessmentItem">
            <summary>
            Gets and sets the assessment item currently being processed. This is the &lt;img&gt; assessment item
            included in the raw LRM content.
            </summary>
            <remarks>
            This is set by AssessmentItemManager. Used by subclasses.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemRenderer.Interaction">
            <summary>
            Return the Interaction that is associated with the assessment item that is currently being rendered.
            </summary>
            <remarks>
            If an interacation does not already exist for this assessment item id, the returned interaction is
            a newly created one, containing extension data for assessment item count equal to 0, but no
            extension data for assessment item type.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemRenderer.CorrectResponse">
            <summary>
            Returns the <Typ>CorrectResponse</Typ> for the interaction associated with this renderer.
            </summary>
            <remarks>
            For these renderer's, there is only ever one correct response although cmi.interactions.n.correct_responses
            supports multiple values.  This property simply returns the first correct response in the list of
            correct responses in the Interaction.  To override this behavior, access <c>Interaction.CorrectResponses</c>
            directly.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.AssessmentItem">
            <summary>
             An assessment item from raw LRM content. 
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AssessmentItem.regexBadId">
            <summary>
            Used by IsLegalId().
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.IsLegalId(System.String)">
            <summary>
            Returns true if id is a legal syntactic id of an assessment markup.
            </summary>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.GetCols(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the "cols" value or a default of 40 if the value isn't in the dictionary.
            </summary>
            <param name="parsedValues"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.GetMaxPts(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            Returns the "maxpts" value, or a default value of 0 if the value isn't in the dictionary, or 1000 if greater
            than 1000, or -1000 if less than -1000.
            </summary>
            <param name="parsedValues"></param>
            <returns></returns>
        </member>
        <member name="F:Microsoft.LearningComponents.AssessmentItem.regexHiByteChars">
            <summary>
            Used by DecodeHiByteChars - finds "~xxxx" where 'x' is a hex character.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.DecodeHiByteChars(System.String)">
            <summary>
            The LRE authoring app encodes hibyte chars as ~xxxx where xxxx is the hex representation of the unicode character
            value. This function decodes them and returns the decoded string.
            </summary>
            <param name="text">Text to decode.  This should already by decoded by HttpUtility.UrlDecode(), in order to convert
            e.g. %7e into ~.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.CollapseWhitespace(System.String)">
            <summary>
            Collapse any whitespace between words in the answer into one space.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.LrdgDecodeString(System.String)">
            <summary>
            Decodes the string p according to the rules in the LRDG regarding assessment markup argument value rules.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItem.Parse(System.String)">
            <summary>
            Use an assessmentItem from an LRM page.htm to create an AssessmentItem object. 
            </summary>
            <param name="assessmentItem">The src attribute value of the img tag that corresponds to the assessment item.</param>
            <returns>The object representing the parsed value.</returns>
            <remarks>
            If more than one of the same name/value pairs exists with the same name, only the first is used.
            </remarks>
            <exception cref="T:System.FormatException">Thrown if the <paramref name="assessmentItem"/> cannot be parsed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.Type">
            <summary>
            Specifies the assessment markup type. 
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.Id">
            <summary>
            Specifies the question (assessment item) number.
            </summary>
            <remarks>
            All sub-items within a given question must have the same id= value. The id= value can not be 
            longer than 31 characters. The characters are limited to digits (0-9), letters (a-z and A-Z), 
            periods (.), hyphens (-), colons (:), and underscores (_).
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.RenderKey">
            <summary>
            Used by LrmRloHandler during rendering as a dictionary key.  It combines the Id and Type
            to create the key.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.Cols">
            <summary>
            Specifies the width in characters of the associated form element.
            </summary>
            <remarks>
            Depending on the element, this value is used as the value for the cols or size attribute of the HTML element.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.Rows">
            <summary>
            Specifies the height (in lines) of the associated form element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.AKey">
            <summary>
            Answer key.
            </summary>
            <remarks>
            For Text assessment markup, akey= (if provided) specifies an answer key that indicates the correct 
            answer for automatic grading. Semicolons are used to separate multiple correct answers (for example, 
            "akey=color;colour"). Autograding matching is case-insensitive. If one student types "Color" in the 
            previous example, and another student types "colour," both answers will be graded as correct. During 
            grading, if akey= is not provided, the teacher must grade the question manually, either by entering 
            a grade in the space provided by the Item Score assessment markup, or by selecting the appropriate 
            check boxes provided by Rubric assessment markup.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.Uak">
            <summary>
            Unordered answer key.  If true, student answers may appear in any order.
            </summary>
            <remarks>
            This argument is used by Text assessment markup to indicate that the student answers may appear 
            in any order (among all sub-items in a question). For example, if the question is "name the three 
            primary colors," and three Text sub-items are provided, one sub-item can have "akey=red", the second 
            can have "akey=green", and the third can have "akey=blue", and all can have Uak == true, which means the 
            student will get full credit for entering "red", "green", and "blue" in the three text boxes in any order.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.MaxPoints">
            <summary>
            Maximum points.
            </summary>
            <remarks>
            A floating-point number (positive, negative, or zero) that specifies the maximum number of points 
            for an item. maxpts= is used in Item Score assessment markup to indicate the score for a given 
            item. It is also used in Radio, Check Box, and Rubric assessment markup to specify a number 
            of points (positive or negative) for that particular sub-item. The points must be within the 
            range: -1000 &lt;= maxpts &gt;= 1000.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItem.Text">
            <summary>
            For a Select assessment markup, text= specifies the text of one of the lines in the drop-down 
            list box and the correct answer for this sub-item.
            </summary>
            <remarks>
            For example, if a question has three Select sub-items, with "text=Beta" on the first, "text=Gamma" 
            on the second, and "text=Alpha" on the third, then in Assigned view (that is, while the student 
            is working on the learning resource) each of the three sub-items will appear as a drop-down list 
            box with these four lines: "" (blank), "Alpha", "Beta", and "Gamma" (sorted alphabetically, 
            with "" selected by default).
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.AssessmentItem.AiStrings">
            <summary>
            Common strings used during AssessmentItem parsing
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.TextAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the text assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.LearnerAnswer(System.Int32)">
            <summary>
            Returns the currently submitted answer for the given ordinal
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.CorrectAnswer(System.String)">
            <summary>
            Returns an html encoded string to be used as the correct answer comment text, or String.Empty if none.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.LearnerAnswerCorrect(System.String)">
            <summary>
            Returns true if the learner's answer was correct.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.
            <para>If this assessment doesn't match the type expected by the Interaction, 
            this method returns an empty string.</para>
            </remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.TextAreaAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the text area assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAreaAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAreaAssessmentRenderer.LearnerAnswer(System.Int32)">
            <summary>
            Returns the currently submitted answer, as stored, for the given ordinal.
            </summary>
            <remarks>
            For this text area type, note that occurances of the string "&lt;br&gt;" should be converted to "%0d%0a"
            for Execute view.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAreaAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAreaAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.
            <para>If this assessment doesn't match the type expected by the Interaction, 
            this method returns an empty string.</para>
            </remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.TextAreaAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.RadioAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the radio button assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RadioAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.RadioAssessmentRenderer.IsLearnerAnswer(System.Int32)">
            <summary>
            Returns true if the learner checked this ordinal's response.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RadioAssessmentRenderer.RenderFormFieldName(System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.RadioAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the radio button.  E.g. the "index" of the radio
            button in a group of radio buttons, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.
            <para>If this assessment doesn't match the type expected by the Interaction, 
            this method returns an empty string.</para>
            </remarks>
            <returns>HTML that should be inserted in place of a radio assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.RadioAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.RadioAssessmentRenderer.LearnerResponse">
            <summary>
            Returns the Interaction.LearnerResponse, or String.Empty if none.  This value corresponds to the string
            ordinal of the chosen radio button.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.CheckboxAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the checkbox assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.CheckboxAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.CheckboxAssessmentRenderer.IsLearnerAnswer(System.String)">
            <summary>
            Returns true if this is the currently submitted answer.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.CheckboxAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="F:Microsoft.LearningComponents.CheckboxAssessmentRenderer.reviewHtml">
            <summary>
            Template for review view html. {0} is the img src and {1} is the alt text.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.CheckboxAssessmentRenderer.GetReviewHtml(System.String,System.String)">
            <summary>
            Convenience method to format the review HTML.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.CheckboxAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.
            <para>If this assessment doesn't match the type expected by the Interaction, 
            this method returns an empty string.</para>
            </remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.CheckboxAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.ItemScoreAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the item score assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.ItemScoreAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.ItemScoreAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ItemScoreAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.</remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ItemScoreAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.ItemScoreAssessmentRenderer.MaxScore">
            <summary>
            Returns the max score of the Interaction, or zero if none.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ItemScoreAssessmentRenderer.LearnerScore">
            <summary>
            Gets the learner's score (as a string in the CurrentUICulture) from the evaluation, 
            or "--" (two dashes) or String.Empty (if the view is RandomAccess) if there is no score.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SelectAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the select assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.CreateAlphabeticalList(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create an alphabetical list of values, discarding duplicates (case sensitive).
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.CreateOrdinalList(System.Collections.Generic.IDictionary{System.String,System.Object})">
            <summary>
            Create a list of options from ExtensionData in the same order they appear in the original file.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.RenderOptions(System.Text.StringBuilder,System.Int32)">
            <summary>
            Add &lt;option&gt; tags, sorted by alphabetical order of the option values.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.LearnerAnswer(System.Int32)">
            <summary>
            Returns the currently submitted answer for the given ordinal.
            Also returns String.Empty if the learner didn't answer.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.CorrectAnswer(System.String)">
            <summary>
            Returns an html encoded string to be used as the correct answer comment text, or String.Empty if none.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.LearnerAnswerCorrect(System.String)">
            <summary>
            Returns true if the learner's answer was correct.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SelectAssessmentRenderer.m_reviewHtml">
            <summary>
            HTML for review view. 
            {0} is the learner answer - for incorrect answers this should include the &lt;STRIKE&gt; tag.
            {1} is the image src.
            {2} is the alt text.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SelectAssessmentRenderer.m_correctAnswerHtml">
            <summary>
            HTML for the correct answer text to include after m_reviewHtml when ShowCorrectAnswers is true.
            {0} is the text "Correct answer:".
            {1} is the correct answer text.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.GetReviewHtml(System.Int32)">
            <summary>
            Returns the review HTML depending on the correctness of the learner response and whether
            ShowCorrectAnswers is true.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.
            <para>If this assessment doesn't match the type expected by the Interaction, 
            this method returns an empty string.</para>
            </remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.SelectAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.RubricAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the rubric assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RubricAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="F:Microsoft.LearningComponents.RubricAssessmentRenderer.htmlFormat">
            <summary>
            HTML to use in a String.Format when rendering.
            {0} is the img src.
            {1} is the img alt text.
            {2} is the point value.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RubricAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.RubricAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.</remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.RubricAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.RubricAssessmentRenderer.MaxPoints">
            <summary>
            Returns a string value for max points that is in the current culture's ui.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.FileAssessmentRenderer">
            <summary>
            AssessmentItemRenderer for the file assessment type.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAssessmentRenderer.#ctor(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Constructor.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAssessmentRenderer.CurrentFileExtension(System.String)">
            <summary>
            Returns the currently uploaded file extension for outputting to HTML, or null if none.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAssessmentRenderer.CurrentFilePath(System.String)">
            <summary>
            Returns the current file path for outputting file attachment references in HTML.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAssessmentRenderer.RenderFormFieldName(System.String,System.String)">
            <summary>
            Returns a name for use in the form field.
            </summary>
            <param name="interactionId">Interaction id.</param>
            <param name="ordinal">Ordinal.</param>
            <returns>Name</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAssessmentRenderer.Render(System.Int32)">
            <summary>
            Gets the HtmlString that replaces the assessment item in the content.
            </summary>
            <param name="ordinal">The ordinal of the item.  E.g. the "index" of the item
            in a group of items, beginning with 0 and incrementing from there.</param>
            <remarks>This method doesn't check for the validity of <paramref name="ordinal"/>.  E.g.
            one could pass a negative value and the method would work, but this would most likely
            produce undesireable results.
            <para>If this assessment doesn't match the type expected by the Interaction, 
            this method returns an empty string.</para>
            </remarks>
            <returns>HTML that should be inserted in place of a assessment item IMG tag.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.FileAssessmentRenderer.TryAddToDataModel">
            <summary>
            Adds the current Interaction to the data model.
            </summary>
            <remarks>AssessmentItem must be set before calling this method.</remarks>
            <returns>True if successfully added.  A false is returned if the interaction is not of the correct type.</returns>
        </member>
        <member name="T:Microsoft.SharePointLearningKit.Localization.ILocalizationProvider">
            <summary>
            Main contract for providing localization information to SLK resources
            </summary>
        </member>
        <member name="P:Microsoft.SharePointLearningKit.Localization.ILocalizationProvider.CurrentCulture">
            <summary>
            Gets the current culture from the provider prespective
            </summary>
        </member>
        <member name="M:Microsoft.SharePointLearningKit.Localization.LocalizationManager.#cctor">
            <summary>
            Initializing static members
            </summary>
        </member>
        <member name="M:Microsoft.SharePointLearningKit.Localization.LocalizationManager.GetCurrentCulture">
            <summary>
            Creates the current cluture from the current localization provider
            </summary>
            <returns>Current culture if a localization provider is configured or the english default culture</returns>
        </member>
        <member name="M:Microsoft.SharePointLearningKit.Localization.LocalizationManager.CreateCurrentProvider">
            <summary>
            Creates the localization provider that is configured in configuration file
            </summary>
            <returns>refrence to configured localization provider object or null if nothing configured</returns>
        </member>
        <member name="M:Microsoft.SharePointLearningKit.Localization.LocalizationManager.CreateDefaultCulture">
            <summary>
            Creates default english culture
            </summary>
            <returns>Refrence to default english culture object</returns>
        </member>
        <member name="P:Microsoft.SharePointLearningKit.Localization.LocalizationManager.CurrentProvider">
            <summary>
            Gets the current localozation provider for the current web-application
            </summary>
        </member>
        <member name="P:Microsoft.SharePointLearningKit.Localization.LocalizationManager.DefaultCulture">
            <summary>
            Gets the default culture object 
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.AIResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.AttachedFileHtml">
            <summary>
              Looks up a localized string similar to There is an attached {0} file..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.BrowseHtml">
            <summary>
              Looks up a localized string similar to Browse....
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ChooseFileToAttachHtml">
            <summary>
              Looks up a localized string similar to Choose a file to attach:.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.CorrectAnswerColonHtml">
            <summary>
              Looks up a localized string similar to Correct answer:.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.CorrectAnswerHtml">
            <summary>
              Looks up a localized string similar to Correct answer.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.CorrectAnswerSeparatorHtml">
            <summary>
              Looks up a localized string similar to  or .
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.DetachFileHtml">
            <summary>
              Looks up a localized string similar to Detach File.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.FileAttachmentNotFound">
            <summary>
              Looks up a localized string similar to A requested file attachment could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.FileNotFound">
            <summary>
              Looks up a localized string similar to A requested file could not be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.HeadExecuteViewScript">
             <summary>
               Looks up a localized string similar to &lt;script language=&quot;javascript&quot;&gt;
            var ECS_ViewType=2;
            
             //=============================================================================
             //  Handles calls to detach an attached file.  The id of this question will
             //  be sent in the hidDetach field.   At the server end, if this value is
             //  non-zero, then there is a file to be detached..
            
            function OnDetach( attachmentId )
            {
            	// attachmentId is of the form &lt;interactionId&gt;*A*&lt;attachmentOrdinal&gt;
            
            	var oForm = document.forms[&quot;frmPage&quot;];
            	oForm.elemen [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.HeadGradingViewScript">
             <summary>
               Looks up a localized string similar to &lt;script language=&quot;javascript&quot; type=&quot;text/javascript&quot;&gt;
            var ECS_ViewType=6;
            
            function mlc_RoundTwoDecimalPlaces(val)
            {
            	return (Math.round( val * 100 ) / 100);
            }
            
            function mlc_CultureStringToDouble(score)
            {
            	var re = new RegExp( &quot;^[\\+\\-]?[0-9]*(\\x&lt;%=DecimalSeparatorHex%&gt;)?[0-9]*$&quot; );
            	var check = score.match(re);
            	if( check == null ) return NaN;
            	else return parseFloat(score.replace( &quot;&lt;%=DecimalSeparator%&gt;&quot;, &quot;.&quot; ));
            }
            
            function mlc_DoubleToCultureString(dbl)
            {
            	// convert a double into a  [rest of string was truncated]&quot;;.
             </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.IncorrectAnswerHtml">
            <summary>
              Looks up a localized string similar to Incorrect answer.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.InstructorCommentsColonHtml">
            <summary>
              Looks up a localized string similar to Instructor comments:.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.InstructorCommentTooLong">
            <summary>
              Looks up a localized string similar to &quot;The text entered is formatted incorrectly or greater than the maximum {0} characters.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.InvalidFormFieldValue">
            <summary>
              Looks up a localized string similar to The value, {0}, of the form field, {1}, is invalid..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.InvalidId">
            <summary>
              Looks up a localized string similar to The value of the id is invalid in the assessment markup: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.InvalidOptionValue">
            <summary>
              Looks up a localized string similar to The posted &lt;option&gt; value, {0}, is out of range for the &lt;select&gt; tag with name=&quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.InvalidType">
            <summary>
              Looks up a localized string similar to The type attribute has an invalid value in the assessment markup: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.MissingFormField">
            <summary>
              Looks up a localized string similar to The form field, {0}, is missing..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.NoFileAttachedHtml">
            <summary>
              Looks up a localized string similar to No file attached..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.NoScoreHtml">
            <summary>
              Looks up a localized string similar to --.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ReplaceFileHtml">
            <summary>
              Looks up a localized string similar to Replace the attached file with another file:.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ReviewViewScript">
             <summary>
               Looks up a localized string similar to &lt;script language=&quot;javascript&quot;&gt;
            var ECS_ViewType=4;
            &lt;/script&gt;.
             </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ScoreOutOfRange">
            <summary>
              Looks up a localized string similar to &quot;The score entered is formatted incorrectly or outside the allowable range of -1000 to 1000.&quot;.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.StudentNotSelectedHtml">
            <summary>
              Looks up a localized string similar to Not selected.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.StudentNotSelectedIncorrectHtml">
            <summary>
              Looks up a localized string similar to This is the correct answer but it was not selected.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.StudentSelectedCorrectHtml">
            <summary>
              Looks up a localized string similar to Correct answer.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.StudentSelectedHtml">
            <summary>
              Looks up a localized string similar to Selected.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.StudentSelectedIncorrectHtml">
            <summary>
              Looks up a localized string similar to Incorrect answer.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.Unanswered">
            <summary>
              Looks up a localized string similar to &lt;Unanswered&gt;.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ViewFileHtml">
            <summary>
              Looks up a localized string similar to View File.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AIResources.ViewTheAttachedFileHtml">
            <summary>
              Looks up a localized string similar to View the attached file..
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.AssessmentItemManager">
            <summary>
            Creates dictionaries of FormDataProcessor's and AssessmentItemRenderer's, so that only single instances
            of them exist to process form data and render assessment items.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemManager.#ctor">
            <summary>
            Used when rendering. 
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemManager.GetRenderer(Microsoft.LearningComponents.AssessmentItem)">
            <summary>
            Gets the renderer that can render an assessmentItem.
            </summary>
            <param name="assessmentItem">The assessment item to render. This is the &lt;img&gt; element that is in 
            the original LRM content.</param>
            <remarks>RenderContext must have been set prior to calling this method.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.AssessmentItemManager.GetFormDataProcessor(Microsoft.LearningComponents.DataModel.Interaction)">
            <summary>
            Gets the processor that can process posted data related to the specified interaction, or <c>null</c> if none.
            </summary>
            <remarks>ProcessFormContext must have been set prior to calling this method.  If this
            interaction's InteractionType does not have a value (such as when it represents a rubric or item score
            with no associated assessment) this method returns <c>null</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemManager.RenderContext">
            <summary>
            Gets the RenderContext, or <c>null</c> if the current context is not a <Typ>RloRenderContext</Typ>.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemManager.DataModelContext">
            <summary>
            Sets or gets m_dataModelContext.  When setting m_dataModelContext for the first time, creates
            m_renderers.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AssessmentItemManager.ProcessFormContext">
            <summary>
            Sets or gets m_pfContext.  When setting m_pfContext for the first time, sets m_formProcessors.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.IAttachment">
            <summary>
            Provides a means of returning a <c>Guid</c> from an object that has a GUID identifier.
            </summary>
            <remarks>
            Used by internal code that already has a guid associated with an attachment.  If this interface does
            not exist on the attachment, then a new guid will be generated.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.IAttachment.GetBytes">
            <summary>
            Creates a new stream object that is able to read from the object.  The caller may only call
            <c>Read</c> and <c>Seek</c> on the returned <c>Stream</c>.
            </summary>
            <returns>A newly created Stream.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.IAttachment.Guid">
            <summary>
            Gets the GUID associated with this attachment.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.SetEnumAttribute``1(System.Xml.XPath.XPathNavigator,System.String,System.Nullable{``0})">
            <summary>
            Sets an XML attribute based on an enum value.  If the attribute does not already exist, it is created.
            </summary>
            <typeparam name="T">The enum to use</typeparam>
            <param name="elementNav">An XPathNavigator that points to the XML element to which the attribute belongs.</param>
            <param name="attribute">The name of the XML attribute.</param>
            <param name="value">The value of the enum to set.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.GetEnumAttribute``1(System.Xml.XPath.XPathNavigator,System.String,System.Nullable{``0})">
            <summary>
            Gets an XML attribute based on an enum value.  If the attribute does not exist, a default value is returned.
            </summary>
            <typeparam name="T">The enum to use</typeparam>
            <param name="elementNav">An XPathNavigator that points to the XML element to which the attribute belongs.</param>
            <param name="attribute">The name of the XML attribute.</param>
            <param name="defaultValue">The value to return in case the attribute does not exist.</param>
            <returns>A correctly typed enum value based on the XML data provided.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.GetAttribute``1(System.Xml.XPath.XPathNavigator,System.String,``0)">
            <summary>
            Gets an XML attribute of a specified type.  If that attribute does not exist, a default value is returned.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <param name="elementNav">An XPathNavigator that points to the XML element to which the attribute belongs.</param>
            <param name="attribute">The name of the XML attribute.</param>
            <param name="defaultValue">The value to return in case the attribute does not exist.</param>
            <returns>A correctly typed value based on the XML data provided.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.GetNullableAttribute``1(System.Xml.XPath.XPathNavigator,System.String,System.Nullable{``0})">
            <summary>
            Gets an XML attribute of a specified type.  If that attribute does not exist, a default value is returned.
            </summary>
            <typeparam name="T">The type of the data.</typeparam>
            <param name="elementNav">An XPathNavigator that points to the XML element to which the attribute belongs.</param>
            <param name="attribute">The name of the XML attribute.</param>
            <param name="defaultValue">The value to return in case the attribute does not exist.</param>
            <returns>A correctly typed value based on the XML data provided.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.SetAttribute(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Sets an XML attribute based on a value.  If the attribute does not already exist, it is created.
            </summary>
            <param name="elementNav">An XPathNavigator that points to the XML element to which the attribute belongs.</param>
            <param name="attribute">The name of the XML attribute.</param>
            <param name="value">The value to set, already converted to a string.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.SetIdentifier(System.Xml.XPath.XPathNavigator,System.String,System.String,System.String,Microsoft.LearningComponents.DataModel.DataModelUtilities.ValidateIdentifier)">
            <summary>
            Validates and sets an identifier, which must be unique within the list.
            </summary>
            <param name="elementNav">XPathNavigator that points to the element that represents the current object.</param>
            <param name="parentElementName">The name of the parent element of the list.</param>
            <param name="elementName">The name of the element that represents the object.</param>
            <param name="identifier">The new identifier to be set.</param>
            <param name="validationDelegate">Delegate to perform simple validation on the identifier.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelUtilities.CreateNavigator(System.String,System.String[])">
            <summary>
            Creates a new writable navigator to a newly created XML block.
            </summary>
            <remarks>
            The xml block created is always of the form:
            <code>
            &lt;rootElement&gt;
                &lt;element1&gt;
                &lt;element2&gt;
                ...
            &lt;/rootElement&gt;
            </code>
            </remarks>
            <param name="rootElement">The name of the root element for the newly created xml block</param>
            <param name="elements">The list of child elements for the newly created xml block</param>
            <returns>An XPathNavigator that points to the root element.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelUtilities.ValidateIdentifier">
            <summary>
            Delegate to validate the identifier.
            </summary>
            <param name="identifier">Identifier to validate.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelListElement">
            <summary>
            Abstract class used internally for list elements based on XML nodes.  This cannot be an interface because
            that would make its members public, and we don't want that.  The class itself must be public so that public
            classes can inherit from it, but since all its members are internal that should be okay.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelListElement.UniqueId">
            <summary>
            Gets the string unique identifier for the object.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelListElement.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelListElement.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelListElement.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelListElement.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelList`1">
            <summary>
            An <c>IList</c> implementation on top of a given XML block.
            </summary>
            
            <remarks>
            <para>
            The caller initializes a <c>DataModelList</c> by passing it XML such as the following:
            </para>
            <code>
            &lt;examples&gt;
                 &lt;example id="foo"/&gt;
                 &lt;example id="bar"/&gt;
            &lt;/examples&gt;
            </code>
            <para>
            In this example, if the <c>DataModelList</c> were enumerated, the returned objects
            would refer to the second-level elements, i.e.<c>&lt;example id="foo"/&gt;</c> and
            <c>&lt;example id="bar"/&gt;</c>, assuming "example" is used for the <c>elementName</c>
            parameter of the constructor.
            </para>
            <para>
            <c>DataModelList</c> optionally checks for uniqueness of a caller-specified attribute,
            such as <c>"id"</c> in the example above.  This is specified using the
            <c>uniqueIdAttribute</c> parameter of the constructor.
            </para>
            <para>
            The <c>elementName</c> parameter of the constructor must be in the the default
            (blank) namespace.
            </para>
            <para>
            This class is used by LearningDataModel to implement lists such as
            <c>LearningDataModel.Objectives</c>, <c>LearningDataModel.CommentsFromLearner</c>, etc.
            </para>
            </remarks>
            <typeparam name="T">The type of element in the list.  <c>T</c> must support DataModelListElement.</typeparam>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_dataModel">
            <summary>
            The owning data model, in order to call the DataChanged delegate.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_nav">
            <summary>
            XPathNavigator that points to the owning element of the list, e.g.
            &lt;examples&gt; in the example in the documentation for this class.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_elementName">
            <summary>
            The name of the XML sub-element that represents an element in the list.
            This is a local name, without a prefix.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_uniqueIdAttribute">
            <summary>
            The name of an attribute on the sub-element that indicates a unique identifier.  
            If no unique identifier exists, this must be String.Empty.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_isInDataModel">
            <summary>
            True if the list is part of the data model, indicating that the data model must be notified
            when changes are made to the list.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_list">
            <summary>
            The list of real objects, not created until needed.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelList`1.m_createObject">
            <summary>
            The delegate used to create new objects of type <c>T</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelList`1.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.String,System.String,System.Boolean,Microsoft.LearningComponents.DataModel.DataModelList{`0}.CreateObject)">
             <summary>
             Initializes a list class used by LearningDataModel that uses an XML block as list elements.  The list itself
             is represented by an element that contains a group of sub-elements.
             </summary>
            
             <remarks>
             See the documentation for the <Typ>DataModelList</Typ> for an example.
             </remarks>
             
             <param name="dataModel">The LearningDataModel that owns this list.</param>
             <param name="nav">An XPathNavigator that points to the owning XML element of the list.</param>
             <param name="elementName">The name of the second-level XML element that represents an element in the list.</param>
             <param name="uniqueIdAttribute">The name of an attribute on second-level XML elements that indicates the unique identifier for that element.  
             If no unique identifier exists, this must be String.Empty.</param>
             <param name="isInDataModel">Whether or not this list belongs to the data model, and thus sends notifcations when changes are made.</param>
             <param name="createObject">A delegate that can construct a new object of type <c>T</c>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelList`1.Validate(`0)">
            <summary>
            An internal helper method to validate additions to the list.
            </summary>
            <param name="item">The item that is to be added to the list</param>
            <exception cref="T:System.ArgumentException">Thrown if there is no unique identifier defined on the object to be added, 
            or if the identifier already exists in the list, or if the data model of the object being added is not the same as the
            data model of this list.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelList`1.CreateListIfNecessary">
            <summary>
            Creates the collection of actual objects, if it is not already created.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelList`1.DetachItemFromList(`0)">
            <summary>
            Detaches an item from the list.  It will no longer be part of any list, the data model, and any changes made
            to it will not be reflected anywhere else.
            </summary>
            <param name="item">Item to detach from the list.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelList`1.IsInDataModel">
            <summary>
            True if the list is part of the data model, indicating that the data model must be notified
            when changes are made to the list.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelList`1.CreateObject">
            <summary>
            A delegate that can be used to create a new object of type <c>T</c>.
            </summary>
            <remarks>
            We can't just use the <c>new()</c> constraint on this class since that would require a public
            constructor, which we don't want for security (attack surface) reasons.
            </remarks>
            <param name="dataModel">LearningDataModel used to initialize the object.</param>
            <param name="nav">XPathNavigator that points to the XML representation of the object.</param>
            <param name="isInDataModel">Indicates whether the child is marked as in the data model or not.</param>
            <returns>A newly created object of type T.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1">
            <summary>
            An <c>IList</c> implementation on top of a given XML block.
            </summary>
            
            <remarks>
            <para>
            The caller initializes a <c>DataModelList</c> by passing it XML such as the following:
            </para>
            <code>
            &lt;examples&gt;
                 &lt;example id="foo"/&gt;
                 &lt;example id="bar"/&gt;
            &lt;/examples&gt;
            </code>
            <para>
            In this example, if the <c>DataModelList</c> were enumerated, the returned objects
            would refer to the second-level elements, i.e.<c>&lt;example id="foo"/&gt;</c> and
            <c>&lt;example id="bar"/&gt;</c>, assuming "example" is used for the <c>elementName</c>
            parameter of the constructor.
            </para>
            <para>
            <c>DataModelList</c> optionally checks for uniqueness of a caller-specified attribute,
            such as <c>"id"</c> in the example above.  This is specified using the
            <c>uniqueIdAttribute</c> parameter of the constructor.
            </para>
            <para>
            The <c>elementName</c> parameter of the constructor must be in the the default
            (blank) namespace.
            </para>
            <para>
            This class is used by LearningDataModel to implement lists such as
            <c>LearningDataModel.Interactions</c>.
            </para>
            </remarks>
            <typeparam name="T">The type of element in the list.  <c>T</c> must support DataModelListElement.</typeparam>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.m_dataModel">
            <summary>
            The owning data model, in order to call the DataChanged delegate.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.m_nav">
            <summary>
            XPathNavigator that points to the owning element of the list, e.g.
            &lt;examples&gt; in the example in the documentation for this class.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.m_elementName">
            <summary>
            The name of the XML sub-element that represents an element in the list.
            This is a local name, without a prefix.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.m_uniqueIdAttribute">
            <summary>
            The name of an attribute on the sub-element that indicates a unique identifier.  
            If no unique identifier exists, this must be String.Empty.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.m_isInDataModel">
            <summary>
            True if the list is part of the data model, indicating that the data model must be notified
            when changes are made to the list.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.m_initialLoad">
            <summary>
            Set during the constructor to allow the use of the Add() without invoking the underlying
            code to add the xml (which already exists in the list) to the list again.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.String,System.String,System.Boolean,Microsoft.LearningComponents.DataModel.DataModelKeyedList{`0}.CreateObject)">
             <summary>
             Initializes a list class used by LearningDataModel that uses an XML block as list elements.  The list itself
             is represented by an element that contains a group of sub-elements.
             </summary>
            
             <remarks>
             See the documentation for the <Typ>DataModelList</Typ> for an example.
             </remarks>
             
             <param name="dataModel">The LearningDataModel that owns this list.</param>
             <param name="nav">An XPathNavigator that points to the owning XML element of the list.</param>
             <param name="elementName">The name of the second-level XML element that represents an element in the list.</param>
             <param name="uniqueIdAttribute">The name of an attribute on second-level XML elements that indicates the unique identifier for that element.  
             This must not be String.Empty.</param>
             <param name="isInDataModel">Whether or not this list belongs to the data model, and thus sends notifcations when changes are made.</param>
             <param name="createObject">A delegate that can construct a new object of type <c>T</c>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.Validate(`0)">
            <summary>
            An internal helper method to validate additions to the list.
            </summary>
            <param name="item">The item that is to be added to the list</param>
            <exception cref="T:System.ArgumentException">Thrown if there is no unique identifier defined on the object to be added, 
            or if the identifier already exists in the list, or if the data model of the object being added is not the same as the
            data model of this list.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.DetachItemFromList(`0)">
            <summary>
            Detaches an item from the list.  It will no longer be part of any list, the data model, and any changes made
            to it will not be reflected anywhere else.
            </summary>
            <param name="item">Item to detach from the list.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.ChangeKey(`0,System.String)">
            <summary>
            Allows a key to be changed.
            </summary>
            <param name="item">Item who's key is being changed</param>
            <param name="newKey">The new key</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.IsInDataModel">
            <summary>
            True if the list is part of the data model, indicating that the data model must be notified
            when changes are made to the list.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelKeyedList`1.CreateObject">
            <summary>
            A delegate that can be used to create a new object of type <c>T</c>.
            </summary>
            <remarks>
            We can't just use the <c>new()</c> constraint on this class since that would require a public
            constructor, which we don't want for security (attack surface) reasons.
            </remarks>
            <param name="dataModel">LearningDataModel used to initialize the object.</param>
            <param name="nav">XPathNavigator that points to the XML representation of the object.</param>
            <param name="isInDataModel">Indicates whether the child is marked as in the data model or not.</param>
            <returns>A newly created object of type T.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary">
             <summary>
             An <c>IDictionary</c> implementation on top of a <c>&lt;extensionData&gt;</c> XML block.
             </summary>
            
             <remarks>
             <para>
             See DataModel.doc for the schema of <c>&lt;extensionData&gt;</c>.
             </para>
             <para>
             While this class is initialized from XML data and eventually stored as xml data, it is not stored
             always as xml data due to complications with attachments (i.e. it is difficult to accurately represent
             the data of the attachment within an XML only representation).
             </para>
             <para>
             </para>
             </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.m_extensions">
            <summary>
            A regular dictionary class used internally for storage of the actual data
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.m_nav">
            <summary>
            An XPathNavigator that points the the owning &lt;extensionData&gt; element that represents this dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.m_dataModel">
            <summary>
            The owning data model of this dictionary.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.m_isInDataModel">
            <summary>
            True if the list is part of the data model, indicating that the data model must be notified
            when changes are made to the list.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean)">
            <summary>
            Initializes a custom dictionary class for use by LearningDataModel.  Unlike DataModelList,
            this class is only used for one purpose so the XML elements are pre-defined.
            </summary>
            <param name="dataModel">The owning data model of this dictionary.</param>
            <param name="nav">An XPathNavigator that points the the owning &lt;extensionData&gt; element that represents this dictionary.</param>
            <param name="isInDataModel">Whether or not this list belongs to the data model, and thus sends notifcations when changes are made.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.RefreshXml">
            <summary>
            Refreshes the &lt;extensionData&gt; node that is represented by this class,
            i.e. copies the information from <c>m_extensions</c> back into <c>m_nav</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.ConvertToDataModelExtensionValue(System.Object)">
            <summary>
            Converts a value to one of the types listed in <c>DataModelExtensionType</c>; throws a
            <c>ArgumentException</c> if the value can't be converted to one of those types.
            In most cases, the conversion is a no-op -- this method just does validation.
            In the case of an attachment (a byte[] array), a wrapper for the attachment is 
            returned (see Remarks).
            </summary>
            <remarks>
            <para>
            If <paramref name="value"/> is one of the primitive data model extension types
            (string, int, bool, double, DateTime), then that value is returned directly.  If 
            a float is passed, it is converted to a double.  The only other type supported is 
            byte[] array, and in this case this method will call the
            <Prp>LearningDataModel.WrapAttachment</Prp> delegate to "wrap" the value in
            an object that implements <c>IAttachment</c>.
            </para>
            <para>
            This method should only be called when adding a new object is to the dictionary.
            Otherwise, the exception text may be misleading.
            </para>
            </remarks>
            <param name="value">The object to validate for type</param>
            <returns>The same object, or a wrapper for that object if it is an attachment</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.ConvertFromDataModelExtensionValue(System.Object)">
            <summary>
            Converts an element in the dictionary into a value that can be returned to the user.
            </summary>
            <param name="value">A value stored in the internal dictionary.</param>
            <returns>A value ready to be used by the end user</returns>
            <remarks>This method does not do any conversion of any item except for attachments, which
            are converted from an IAttachment object to a byte array.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.IsInDataModel">
            <summary>
            True if the list is part of the data model, indicating that the data model must be notified
            when changes are made to the list.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelExtensionDictionary.DataModelExtensionType">
            <summary>
            A simple list of supported types
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.DataModelWriteValidationMode">
            <summary>
            This enumeration defines what the DataModel should do when any data is written to it.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.EntryMode">
            <summary>
            This enumeration defines the various states an activity's data model may be in upon the entry of the activity.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.EntryMode.AbInitio">
            <summary>
            Indicates that the learner has not accessed this RLO during the current learner attempt
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.EntryMode.Resume">
            <summary>
            Indicates that (1) the learner has previously accessed the RLO, and (2) upon exiting, the cmi.exit data model element was "suspend" or "logout"
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.EntryMode.AllOtherConditions">
            <summary>
            Indicates that (1) the learner has previously accessed the RLO, and (2) upon exiting, the cmi.exit data model element was NOT "suspend" or "logout"
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.LearningDataModel">
            <summary>
            An in-memory representation of the data model associated with one activity of one attempt of one package.
            </summary>
            <remarks>
            <para>
            <c>LearningDataModel</c> represents the SCORM RTE data model data associated with one activity.
            In other words, a <c>LearningDataModel</c> instance represents information related to one learner's
            execution of one RLO within an attempt of one package.
            </para>
            <para>
            <c>LearningDataModel</c> exposes the data model on an object derived from <Typ>LearningSession</Typ>.
            An application cannot directly create an instance of <c>LearningDataModel</c> or save the data stored within it.
            Instead, the application uses the <c>CurrentActivityDataModel</c> property of 
            <Typ>Microsoft.LearningComponents.Storage.StoredLearningSession</Typ> to load a data model into memory, and one of various methods of
            <Typ>Microsoft.LearningComponents.Storage.StoredLearningSession</Typ> (such as <c>CommitChanges</c>) to save the data.
            </para>
            <para>
            An activity's data model includes both read-only and read/write data.  Read-only data comes from
            the package manifest or application and is not set by calls to <c>LearningDataModel</c>.
            Read/write data can be set the application or the RLO by calls to <c>LearningDataModel</c>.
            Some read/write data (including some objective information) is initialized from the package
            manifest but is read/write and can be overwritten by the application or RLO.  A data model may
            also become entirely read-only in certain views (e.g. Review view) or if the data model is not
            associated with the currently active activity.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_format">
            <summary>
            The format of the package for this LearningDataModel.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_verifier">
            <summary>
            A class that will verify settable properties.  Which class is used depends on whether the
            package version is SCORM 1.2 or 2004.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_staticData">
            <summary>
            XML representation of static data.  This XML data will never be written to.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_sequencingData">
            <summary>
            XML representation of dynamic sequencing data.  See the constructor for more information about
            the difference between <c>m_sequencingData</c> and <c>m_dynamicData</c>.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_tracked">
            <summary>
            Represents the Tracked value in the SequencingData.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_objectiveSetByContent">
            <summary>
            Represents the Objective Set by Content value in the SequencingData.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_completionSetByContent">
            <summary>
            Represents the Completion Set by Content value in the SequencingData.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_dynamicData">
            <summary>
            XML representation of dynamic data not related to sequencing.  See the constructor for more information
            about the difference between <c>m_sequencingData</c> and <c>m_dynamicData</c>.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_dynamicDataIsValid">
            <summary>
            Whether or not either a non-null dynamic data parameter was passed to the constructor
            or the <Mth>SetDynamicData</Mth> method has been called.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_commentsFromLmsAreValid">
            <summary>
            Whether the comments from lms data is valid or not.  If this value is false, the 
            <Mth>SetDynamicData</Mth> method may override any existing data within m_commentsFromLms.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_updateScore">
            <summary>
            Called when either the primary Score.Scaled changes (in V1p3 content) or when
            EvaluationPoints changes (in Lrm or V1p2 content).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_wrapAttachmentGuid">
            <summary>
            The delegate called to wrap a <Typ>Guid</Typ> with the interfaces required internally for attachments.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_wrapAttachment">
            <summary>
            The delegate called to wrap a byte[] array with the interfaces required internally for attachments.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_internalActivityId">
            <summary>
            it is sometimes necessary for the data model to know what activity it is attached to, though
            this is really only necessary when saving attachment extension data to the database.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_commentsFromLearner">
            <summary>
            List of comments from learner (cmi.comments_from_learner)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_commentsFromLms">
            <summary>
            List of comments from LMS (cmi.comments_from_lms)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_interactions">
            <summary>
            List of interactions (cmi.interactions)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_extensionData">
            <summary>
            Dictionary of extension data information
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_learner">
            <summary>
            Learner information
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_score">
            <summary>
            The score associated with this data model
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_objectives">
            <summary>
            List of objectives (cmi.objectives)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_navigationRequest">
            <summary>
            NavigationRequest information (cmi.exit, adl.nav.request)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_writeValidationMode">
            <summary>
            Determines how to check whether write is valid or not.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_advancedAccess">
            <summary>
            Set during ExpandDataModelCache and ReconstituteDataModelCache to allow extra
            information to be set/retrieved with regard to attachments.  Also always allows 
            write access to the data model.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_learnerId">
            <summary>
            private stored versions of the learner information, so it can be reset
            when necessary (upon re-entry to this activity).
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.#ctor(Microsoft.LearningComponents.PackageFormat,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentDelegate,Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentGuidDelegate,Microsoft.LearningComponents.DataModel.DataModelWriteValidationMode,System.String,System.String,System.String,Microsoft.LearningComponents.AudioCaptioning,System.Single,System.Single)">
            <summary>
            Creates a new LearningDataModel.
            </summary>
            <remarks>
            <para>
            All learner data passed is assumed to be in SCORM 2004 format, whether or not this LearningDataModel is
            to be used for SCORM 1.2 or not.  This is how they are stored in the database.
            </para>
            <para>
            When <c>Navigator</c> performs a navigation operation, it only needs to initialize
            <paramref name="staticData"/> and <paramref name="sequencingData"/>, but not
            <paramref name="dynamicData"/>, so the latter isn't loaded in that case.
            <paramref name="dynamicData"/> contains all data related to an activity that isn't
            in <paramref name="staticData"/> or <paramref name="sequencingData"/>.
            </para>
            </remarks>
            <param name="format">The SCORM version, used for validation of values.</param>
            <param name="staticData">Static data, originally derived from the manifest (plus other data
            not from the manifest, e.g. comments_from_lms, currently in the internal XML format documented in
            DataModel.doc.  This is a "&lt;item&gt;" element.  This corresponds to the
            ActivityPackageItem.DataModelCache column.  This may not be null.</param>
            <param name="sequencingData">Dynamic data, used for sequencing; also an "&lt;item&gt;" element.  This
            corresponds to the ActivityAttemptItem.SequencingDataCache column.  This may be null, in which case
            defaults are used.</param>
            <param name="dynamicData">Dynamic data which is not used for sequencing; also an "&lt;item&gt;" element.
            This corresponds to the ActivityAttemptItem.DataModelCache column.  This may be null, in which case
            defaults are used.</param>
            <param name="commentsFromLms">An xml block in LMS Comments XML format.</param>
            <param name="wrapAttachment">A delegate to wrap attachments.</param>
            <param name="wrapAttachmentGuid">A delegate to wrap guids as attachments.</param>
            <param name="writeValidationMode">Validation mode to determine if the data model is writable.</param>
            <param name="learnerId">The unique identifier of the learner.</param>
            <param name="learnerName">The name of the learner.</param>
            <param name="learnerLanguage">The language code for the learner.</param>
            <param name="learnerCaption">The AudioCaptioning setting for the learner.</param>
            <param name="learnerAudioLevel">The audio level setting for the learner.</param>
            <param name="learnerDeliverySpeed">The delivery speed setting for the learner.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CheckIfWriteIsAllowed">
            <summary>
            Throws an InvalidOperationException if this data model cannot be written to.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.SetDynamicData(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator)">
            <summary>
            Sets the dynamic data not used for sequencing for this data model.
            </summary>
            <param name="dynamicData">Dynamic data which is not used for sequencing; also an "&lt;item&gt;" element.
            This corresponds to the ActivityAttemptItem.DataModelCache column.  This may be null, in which case
            defaults are used.</param>
            <param name="commentsFromLms">An xml block in LMS Comments XML format.</param>
            <remarks>
            Initially these fields are filled with defaults.  When an activity becomes the current activity,
            these fields are read from the database and filled in as necessary.  The values read from the
            database, and thus passed to this function may still be null.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CopyStaticObjectives">
            <summary>
            Copies static objective information from <c>m_staticData</c> to the dynamic data xml
            (<c>m_sequencingData</c>).
            </summary>
            <remarks>
            <para>
            The actual XML is not copied directly, but massaged into a more easily usable format.  See DataModel.doc
            for the actual representation.
            </para>
            <para>
            Note that the data within the <Typ>ManifestReaderSequencing</Typ> object is presumed to be
            pre-validated.  No error conditions are checked for in this method.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateDefaultPrimaryObjective(System.Xml.XPath.XPathNavigator)">
            <summary>
            Creates a primary objective with all default attributes
            </summary>
            <remarks>
            <para>
            By always creating a primary objective, several other sections of code that rely on having a 
            primary objective are made easier to deal with.
            </para>
            </remarks>
            <param name="to">XPathNavigator that points to the parent element within "sequencing data" XML to which
            children &lt;objective&gt; items should be added.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CopyObjective(Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader,System.Xml.XPath.XPathNavigator)">
            <summary>
            Copies static information about a single objective from "static data" XML to "sequencing data" XML.
            </summary>
            <remarks>
            <para>
            The actual XML is not copied directly, but massaged into a more easily usable format.  See DataModel.doc
            for the actual representation.
            </para>
            <para>
            Note that the data within the <Typ>ManifestReaderSequencingObjective</Typ> object is presumed to be
            pre-validated.  No error conditions are checked for in this method.
            </para>
            </remarks>
            <param name="obj">The objective</param>
            <param name="to">XPathNavigator that points to the parent element within "sequencing data" XML to which
            children &lt;objective&gt; items should be added.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.Export(System.Xml.XPath.XPathNavigator@,System.Xml.XPath.XPathNavigator@)">
            <summary>
            Retrieves the LearningDataModel's dynamic xml data, so that it may be persisted.
            </summary>
            <param name="sequencingData">Dynamic XML data necessary for sequencing.</param>
            <param name="dynamicData">Dynamic XML data not necessary for sequencing.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CallDataChanged">
            <summary>
            Meant to be called by internal classes when data changes, this merely calls the <c>m_dataChange</c> delegate
            associated with this LearningDataStore.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateComment">
             <summary>
             Creates a <Typ>Comment</Typ> object, which may then be used to be added to the
             <Prp>CommentsFromLearner</Prp> list.
             </summary>
             <example>
             The following example demonstrates creating a new comment and adding it to the
             <Prp>CommentsFromLearner</Prp> collection.
             <code>
             LearningSession session = ... ; // get LearningSession object
            
             Comment c = session.CurrentActivityDataModel.CreateComment();
             c.Location = "Question #3";
             c.CommentText = "I don't understand this question.";
             c.Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.ffZ");
             session.CurrentActivityDataModel.CommentsFromLearner.Add(c);
             </code>
             </example>
             <returns>A new Comment object associated with this <Typ>LearningDataModel</Typ>.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateInteraction">
             <summary>
             Creates a <Typ>Interaction</Typ> object, which may then be used to be added to
             the <Prp>Interactions</Prp> list.
             </summary>
             <example>
             The following example demonstrates creating a new interaction and adding it to the
             <Prp>Interactions</Prp> collection.
             <code>
             LearningSession session = ... ; // get LearningSession object
            
             Interaction i = session.CurrentActivityDataModel.CreateInteraction();
             i.Id = "interaction1"; // A unique identifier is required before this is added to the list
             i.InteractionType = InteractionType.TrueFalse;
             session.CurrentActivityDataModel.Interactions.Add(i);
             </code></example>
             <returns>A new <Typ>Interaction</Typ> object associated with this <Typ>LearningDataModel</Typ>.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateObjective">
             <summary>
             Creates a <Typ>Objective</Typ> object, which may then be used to be added to
             the <Prp>Objectives</Prp> list.
             </summary>
             <example>
             The following example demonstrates creating a new objective and adding it to the
             <Prp>Objectives</Prp> collection.
             <code>
             LearningSession session = ... ; // get LearningSession object
            
             Objective o = session.CurrentActivityDataModel.CreateObjective();
             o.Id = "objective1"; // A unique identifier is required before this is added to the list
             o.Description = "a description of objective 1";
             session.CurrentActivityDataModel.Objectives.Add(o);
             </code>
             </example>
             <returns>A new <Typ>Objective</Typ> object associated with this <Typ>LearningDataModel</Typ>.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateRubric">
             <summary>
             Creates a <Typ>Rubric</Typ> object, which may then be used to be added to
             an <Prp>Interaction.Rubrics</Prp> list.
             </summary>
             <example>
             The following example demonstrates creating a new rubric and adding it to an
             <Prp>Interaction.Rubrics</Prp> collection.
             <code>
             LearningSession session = ... ; // get LearningSession object
            
             Interaction i = session.CurrentActivityDataModel.CreateInteraction();
             i.Id = "interaction1"; // A unique identifier is required before this is added to the list
             i.InteractionType = InteractionType.TrueFalse;
             Rubric r = session.CurrentActivityDataModel.CreateRubric();
             r.Points = 3;
             i.Rubrics.Add(r);
             session.CurrentActivityDataModel.Interactions.Add(i);
             </code>
             </example>
             <returns>A new <Typ>Rubric</Typ> object associated with this <Typ>LearningDataModel</Typ>.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateInteractionObjective">
             <summary>
             Creates a <Typ>InteractionObjective</Typ> object, which may then be used to be added to
             the <Prp>../Interaction.Objectives</Prp> list.
             </summary>
             <example>
             The following example demonstrates creating a new interaction objective and adding it to the
             <Prp>../Interaction.Objectives</Prp> collection.
             <code>
             LearningSession session = ... ; // get LearningSession object
            
             InteractionObjective o = session.CurrentActivityDataModel.CreateInteractionObjective();
             o.Id = "objective1"; // A unique identifier is required before this is added to the list
             session.CurrentActivityDataModel.Interactions[0].Objectives.Add(o);
             </code></example>
             <returns>A new <Typ>InteractionObjective</Typ> object associated with this <Typ>LearningDataModel</Typ>.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.CreateCorrectResponse">
             <summary>
             Creates a <c>CorrectResponse</c> object, which may then be used to be added to
             the <Prp>../Interaction.CorrectResponses</Prp> list.
             </summary>
             <example>
             The following example demonstrates creating a new correct response and adding it to the
             <Prp>../Interaction.CorrectResponses</Prp> collection.
             <code>
             LearningSession session = ... ; // get LearningSession object
            
             CorrectResponse c = session.CurrentActivityDataModel.CreateCorrectResponse();
             c.Pattern = "true";
             session.CurrentActivityDataModel.Interactions[0].CorrectResponses.Add(c);
             </code></example>
             <returns>A new <Typ>CorrectResponse</Typ> object associated with this <Typ>LearningDataModel</Typ>.</returns>
             <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.InitializeForDeliveryAfterSuspend">
            <summary>
            Initializes necessary data model elements for delivery as required by SCORM, after the
            activity was suspended
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.InitializeForDelivery">
            <summary>
            Initializes necessary data model elements for delivery as required by SCORM.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.ClearAttemptProgressInfo">
            <summary>
            Clears attempt progress information for the current attempt, used by sequencing when 
            useCurrentAttemptProgressInfo is true.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.ClearAttemptObjectiveInfo">
            <summary>
            Clears attempt objective information for the current attempt, used by sequencing when 
            useCurrentAttemptProgressInfo is true.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.InteractionListContains(System.String)">
            <summary>
            Determines whether or not the interactions list contains an element with the 
            passed identifier.
            </summary>
            <param name="interactionId">The identifier to search for within the interactions list.</param>
            <returns>True if one or more elements with the requested interaction identifier exists within
            the interactions list.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearningDataModel.InteractionListElement(System.String)">
            <summary>
            Returns the first interaction element found with the requested identifier within 
            the interactions list.
            </summary>
            <param name="interactionId">The identifier to search for within the interactions list.</param>
            <returns>The first interaction element found within the interactions list with the requested 
            identifier, or null if no corresponding item is found.</returns>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.LearningDataModel.m_primaryObjective">
            <summary>
            Cached primary objective
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.SequencingData">
            <summary>
            XML representation of dynamic sequencing data.  See the constructor for more information about
            the difference between <c>m_sequencingData</c> and <c>m_dynamicData</c>.
            </summary>
            <remarks>
            This needs to be exposed because the <Typ>Activity</Typ> class may need to clone the data 
            contained within.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Tracked">
            <summary>
            Represents the Tracked value in the SequencingData.  Set by the Activity upon creation of the
            LearningDataModel.  Used to restrict Objective Progress Information for untracked activities,
            as per SCORM SN 4.2.1 and the SCORM 2004 Addendum Version 1.2 section 2.25.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ObjectiveSetByContent">
            <summary>
            Represents the Objective Set by Content value in the SequencingData.  Set by the Activity upon creation of the
            LearningDataModel.  When <c>true</c>, prevents setting Objective Progress Status.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.CompletionSetByContent">
            <summary>
            Represents the Completion Set by Content value in the SequencingData.  Set by the Activity upon creation of the
            LearningDataModel.  When <c>true</c>, prevents setting Attempt Progress Status.
            </summary>
        </member>
        <member name="E:Microsoft.LearningComponents.DataModel.LearningDataModel.m_dataChange">
            <summary>
            Occurs when any data model elements change.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.UpdateScore">
            <summary>
            Gets or sets the delegate called when either the primary Score.Scaled 
            changes (in V1p3 content) or when EvaluationPoints changes (in Lrm or V1p2 content).
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.InternalActivityId">
            <summary>
            it is sometimes necessary for the data model to know what activity it is attached to, though
            this is really only necessary when saving attachment extension data to the database.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.AdvancedAccess">
            <summary>
            Set during ExpandDataModelCache and ReconstituteDataModelCache to allow extra
            information to be set/retrieved with regard to attachments.  Also always allows 
            write access to the data model.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.DynamicDataIsValid">
            <summary>
            Gets or sets whether the dynamic data is valid or not.  If this value is false, the 
            <Mth>SetDynamicData</Mth> method may override any existing data within m_dynamicData.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.CommentsFromLmsAreValid">
            <summary>
            Gets or sets whether the comments from lms data is valid or not.  If this value is false, the 
            <Mth>SetDynamicData</Mth> method may override any existing data within m_commentsFromLms.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachment">
            <summary>
            Gets the delegate called to wrap a byte[] array with the interfaces required internally for attachments.
            </summary>
            <remarks>
            This delegate is called when a new attachment (i.e. a byte[] array) is assigned to
            extension data.  A wrapper class must be generated what supports IAttachment.  A new 
            Guid should be generated for the attachment at this time in order to be returned 
            from IAttachment.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentGuid">
            <summary>
            Gets the delegate called to wrap a <c>Guid</c> with the interfaces required internally for attachments.
            </summary>
            <remarks>
            This delegate is called when there is already an attachment referred to in the existing XML that will 
            initialize the extension data.  In this case only the GUID is saved within the xml, and it is up to the 
            wrapper class to be able to read from some source associated with that GUID and create a Stream from it.
            IAttachment must be supported by the wrapper class returned.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.DataChange">
            <summary>
            The delegate called when data has been changed.
            </summary>
            <remarks>
            This delegate, if set, is called every time any data is added, removed, or altered in the
            data model.  The exact information of what was changed is not conveyed, only the fact that
            a change has occurred.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Format">
            <summary>
            Gets format of the package associated with this data model
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.CommentsFromLearner">
            <summary>
            Gets the list of comments from the learner about the learning experience.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_learner.</para>
            <para>In SCORM 1.2, this corresponds to cmi.comments.</para>
            <para>
            Each activity has the option to store any number of comments from the learner, on a per 
            attempt basis.  These comments consist of freeform text and an optional timestamp and 
            location information.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.CommentsFromLms">
            <summary>
            Gets the list of comments generated by the LMS intended to be seen by all learners.  
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_lms.</para>
            <para>In SCORM 1.2, this corresponds to cmi.comments_from_lms.</para>
            <para>
            Similar in structure and concept to the <Typ>CommentsFromLearner</Typ>, however these 
            comments are not writable at runtime and are not stored on a per-attempt basis but apply
            to all attempts on a particular activity.
            </para>
            <para>
            There is no specific API to set these comments, they must be written to LearningStore
            directly.  Each time an attempt starts on an activity the appropriate rows for this 
            activity are read from LearningStore and this list is populated.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.CompletionStatus">
            <summary>
            Gets or sets whether the learner has completed the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.completion_status.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This value indicates whether or not the learner has completed the current
            RLO.  This value may or may not correspond to the value actually set,
            but may be determined from the <Typ>ProgressMeasure</Typ> and/or <Typ>CompletionThreshold</Typ>
            values, as determined by the table in the SCORM 2004 RTE documentation, table
            "4.2.4.1a: Completion Status Determination".
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the CompletionStatus enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Entry">
            <summary>
            Gets or sets the entry mode for this RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.entry.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.entry.</para>
            <para>
            If this RLO has not yet been accessed, this should be EntryMode.AbInitio.  Otherwise, this
            value is dependant on how previous attempts on this activity were exited.
            </para>
            <para>
            This value is set automatically as part of the sequencing process, so it should not ever be necessary to
            set this property manually, although this is permitted.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the EntryMode enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.CompletionThreshold">
            <summary>
            Gets the threshold which indicates whether the RLO should be considered complete.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.completion_threshold.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This value may be used to determine whether the RLO is considered complete.  See the 
            description of <Typ>CompletionStatus</Typ>.  This value is initialized from the manifest
            and may not be changed.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.MasteryScore">
            <summary>
            Gets the threshold which indicates whether the RLO should be considered complete.
            </summary>
            <remarks>
            <para>In SCORM 2004, this is invalid.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_data.mastery_score.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Credit">
            <summary>
            Gets the credit setting for the data model.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.credit.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.credit.</para>
            <para>
            This value defaults to true, and may not be changed at run-time.  It may only be changed
            by altering the Credit column of the appropriate ActivityPackageItem.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Interactions">
            <summary>
            Gets the list of responses to individual questions or tasks.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.</para>
            <para>
            The property represents a collection of individual questions and learner responses
            to those questions, keyed by a unique string identifier.  This data is set by
            the RLO and returned to the application.  Whether or not and how the application
            uses this information is undefined.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.LaunchData">
            <summary>
            Gets the data from the manifest intended to provide an RLO with some initial launch information.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.launch_data.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.launch_data.</para>
            <para>
            This data represents a string stored in the manifest that is passed to the RLO on each new
            attempt.  It may not be written to, and the format of the data is completely freeform.
            </para>
            <para>If the value has not been set before in the manifest, null is returned.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Learner">
            <summary>
            Gets learner information and learner preferences.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner*.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student*.</para>
            <para>
            This object identifies the learner and provides a means to store preferences for that 
            learner.  Learner preferences are stored globally and used to initialize these values, 
            and changes made to these values will never affect any other RLO, or any other attempt 
            on the current RLO.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.LessonStatus">
            <summary>
            Gets or sets the current student status as determined by the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this is invalid.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.lesson_status.</para>
            <para>
            See SCORM 1.2 RTE document section 3.4.4.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to, 
            or if this is not a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the LessonStatus enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Location">
            <summary>
            Gets or sets location information which may be used as a bookmark within a RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.location.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.lesson_location.</para>
            <para>
            A string designed to be opaque to the application, for use only by the RLO.  This may be used, for
            example, as a bookmark to return to a specific location after the RLO has been suspended and
            resumed.
            </para>
            <para>
            For SCORM 2004 packages, this string is limited to a length defined by 
            BaseSchemaInternal.ActivityAttemptItem.MaxLocationLength.  For SCORM 1.2 packages, this
            string is limited to 255 characters.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is too long.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.MaxTimeAllowed">
            <summary>
            Gets the maximum time allowed for this RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.max_time_allowed.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_data.max_time_allowed.</para>
            <para>
            This value corresponds to the amount of time the learner is allowed to use an RLO in this attempt.  Automatic 
            checking and validation of this limit is not supported by default.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Objectives">
            <summary>
            Gets the list of objectives for the activity, used to track RLO defined goals.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.</para>
            <para>In SCORM 1.2, this corresponds to cmi.objectives.</para>
            <para>
            This property corresponds to a list of objectives, keyed by unique identifer.  This list 
            is initialized originally from data in the manifest, but it may be added to or modified 
            at runtime by an RLO.
            </para>
            <para>
            Objectives contain many indicators to determine whether or not they have been satisfied
            and have optional scoring information as well.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ProgressMeasure">
            <summary>
            Gets or sets the measure of the progress the learner has made toward completing the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.progress_measure.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property represents a measure of the progress made by the learner toward completion of the
            RLO.  Setting this value will affect the value of <Typ>CompletionStatus</Typ>.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is not a SCORM 2004 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is less than 0.0 or greater than 1.0.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ScaledPassingScore">
            <summary>
            Gets the scaled score required to master the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.scaled_passing_score.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property represents the score required to successfully complete the RLO.  This value 
            affects the value of <Typ>SuccessStatus</Typ>.  The value originates in the manifest and must
            be scaled to a value from -1.0 to 1.0 inclusive.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.Score">
            <summary>
            Gets the score for the data model.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.score.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.score.</para>
            <para>
            Setting the Score.Scaled property will affect the value of <Typ>SuccessStatus</Typ>.  Also, setting any of these values will 
            alter the corresponding values on the primary objective, as defined within the manifest.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.SuccessStatus">
            <summary>
            Gets or sets whether the learner has mastered the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.success_status.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This value indicates whether or not the learner has succeeded in current
            RLO.  This value may or may not correspond to the value actually set,
            but may be determined from the <Typ>Score.Scaled</Typ> and/or <Typ>ScaledPassingScore</Typ>
            values, as determined by the table in the SCORM 2004 RTE documentation, table
            "4.2.22.1a: Success Status Determination".
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is not a SCORM 2004 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is not a valid value for the SuccessStatus enumeration.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.PrimaryObjective">
            <summary>
            Gets the primary objective associated with this data model
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.SuspendData">
            <summary>
            Gets or sets data used to persist the current RLO state during a suspension.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.suspend_data.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.suspend_data.</para>
            <para>
            A string designed to be opaque to the application, for use only by the RLO.  This may 
            be used to store any data necessary to restart the RLO after a suspend operation.
            </para>
            <para>If the value has not been set before being accessed, null is returned.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.ActivityAttemptItem.MaxSuspendDataLength characters in SCORM 2004 packages,
            or longer than 4096 characters in SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.TimeLimitAction">
            <summary>
            Gets the action to take if <c>MaxTimeAllowed</c> is exceeded.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.time_limit_action.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_data.time_limit_action.</para>
            <para>
            Indicates what the RLO should do upon a timeout.  If this value is not specified within the
            manifest, the default value of TimeLimitAction.ContinueNoMessage is returned.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.TotalTime">
            <summary>
            Gets or sets the sum of all time spent in this RLO prior to the current session.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.total_time.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.total_time.</para>
            <para>
            This value represents the sum total of all the learner's session times (<Typ>SessionTime</Typ>) 
            accumulated for prior attempts on this RLO within the context of this learner attempt.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.SessionTime">
            <summary>
            Gets or sets the session time for the current session of the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.session_time.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.session_time.</para>
            <para>
            This value represents the amount of time spent in the current attempt on the RLO.  The RLO
            is responsible for setting this value, this is never automatically generated.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.EvaluationPoints">
            <summary>
            Gets or sets the points assigned by autograding or by the instructor for this activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is infinity or not a number.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.NavigationRequest">
            <summary>
            Gets the navigation request.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to adl.nav.request and cmi.exit.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.exit.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ExtensionData">
            <summary>
            Gets the extension data.
            </summary>
            <remarks>
            <para>
            Extension data does not correspond to any SCORM defined variables.  It is used to store information
            on a per activity basis that cannot be stored in SCORM specifc variables.
            </para>
            <para>
            Only certain types of data are valid within the extension data.  These include <Typ>Boolean</Typ>, 
            <Typ>Int32</Typ>, <Typ>DateTime</Typ>, <Typ>Double</Typ>, <Typ>String</Typ>, and <Typ>byte</Typ>[] array.
            If a <Typ>Single</Typ> is passed, this will automatically be converted to a <Typ>Double</Typ>.
            </para>
            <para>
            All keys into this dictionary are unique, and if the same key is used twice it will overwrite the value 
            and possibly the type information associated with that element.  SCORM naming conventions are recommended
            but not required for key (i.e. variable) names.
            </para>
            </remarks>
            <example>
            <code>
            // assigns a boolean value of true to "foo.bar.something"
            session.CurrentActivityDataModel.ExtensionData["foo.bar.something"] = true;
            
            // assigns a double value of 3.1415927 to "foo.bar.something"
            // this changes the type as well as the value of the variable "foo.bar.something"
            session.CurrentActivityDataModel.ExtensionData["foo.bar.something"] = 3.1415927
            </code>
            <code>
            byte[] attachment = ReadFileAsByteArray("c:\\assignment.doc");
            session.CurrentActivityDataModel.ExtensionData["foo.bar.attachment"] = attachment;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ActivityProgressStatus">
            <summary>
            Gets or sets whether the activity progress information is meaningful for the activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <remarks>Always returns <c>false</c> for activities that are not tracked.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ActivityAbsoluteDuration">
            <summary>
            Gets or sets the cumulative duration of all attempts on this activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ActivityExperiencedDuration">
            <summary>
            Gets or sets the cumulative duration of all attempts on this activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ActivityAttemptCount">
            <summary>
            Gets the number of attempts on the activity.
            </summary>
            <remarks>
            Returns the number of attempts on this activity, including the currently active attempt.  This
            number gets incremented each time a new attempt begins on an activity, before it is delivered
            for execution.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.AttemptProgressStatus">
            <summary>
            Gets or sets an indication of whether the attempt progress information is meaningful.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <remarks>Always returns <c>false</c> for activities that are not tracked.
            <para>When <c>CompletionSetByContent == true</c>, setting this property will have no affect.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.AttemptCompletionStatus">
            <summary>
            Gets or sets an indication of whether the attempt is completed.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.AttemptAbsoluteDuration">
            <summary>
            Gets or sets the duration of this attempt on this activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.AttemptExperiencedDuration">
            <summary>
            Gets or sets the duration of this attempt on this activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ActivityIsActive">
            <summary>
            Gets or sets an indication of whether the activity is active.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.LearningDataModel.ActivityIsSuspended">
            <summary>
            Gets or sets an indication of whether the activity is suspended.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.LearningDataModel.DataChangeDelegate">
            <summary>
            Delegate definition for a function that will be called when any data is changed.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.LearningDataModel.UpdateScoreDelegate">
            <summary>
            Delegate definition for a function that will be called when the overall score for this
            activity is updated.
            </summary>
            <param name="oldScore">The previous score for this activity.</param>
            <param name="newScore">The new score for this activity.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentGuidDelegate">
            <summary>
            Delegate called when an <Typ>IAttachment</Typ> is required from a <Typ>Guid</Typ>, so that the caller of this
            <Typ>LearningDataModel</Typ> can load the data of the attachment.
            </summary>
            <param name="guid">Guid that corresponds to an attachment.</param>
            <param name="internalActivityId">Internal activity id used when saving attachments to the database.</param>
            <returns>An object that implements <Typ>IAttachment</Typ>.</returns>
            <remarks>
            This delegate is called on construction of <Typ>DataModelExtensionDictionary</Typ>.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.LearningDataModel.WrapAttachmentDelegate">
            <summary>
            Delegate called when a new <Typ>Guid</Typ> is required for a byte[] array that represents an attachment.
            </summary>
            <param name="attachment">A byte[] array that represents an attachment.</param>
            <param name="internalActivityId">Internal activity id used when saving attachments to the database.</param>
            <returns>An object that implements <Typ>IAttachment</Typ>.</returns>
            <remarks>
            This delegate is called on each "set value" call for attachments.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Comment">
            <summary>
            Represents a comment from the learner.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_learner.</para>
            <para>In SCORM 1.2, this corresponds to cmi.comments.</para>
            <para>
            See <Prp>LearningDataModel.CommentsFromLearner</Prp> for more information about the usage of this class.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Comment.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Comment.m_nav">
            <summary>
            An XPathNavigator that points to a &lt;comment&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Comment.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Comment.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Comment.m_isInList">
            <summary>
            Whether or not this object is already part of a DataModelList.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Comment.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new Comment object that is already part of the data model.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;comment&gt; element.</param>
            <param name="isInDataModel">Whether or not this should notify the data model of changes made to it.</param>
            <param name="isInList">Whether or not this object is already part of a <Typ>DataModelList</Typ>.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.CommentText">
            <summary>
            Gets or sets the textual comment itself.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_learner.n.comment.</para>
            <para>In SCORM 1.2, this corresponds to cmi.comments.</para>
            <para>
            Freeform text defined by the RLO, indicating a comment from the learner.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is greater than BaseSchemaInternal.CommentFromLearnerItem.MaxCommentLength for SCORM 2004 packages, 
            or greater than 4096 characters for SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.Location">
            <summary>
            Gets or sets the point in the RLO to which the comment applies.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_learner.n.location.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property represents an RLO defined location string, perhaps as a bookmark to indicate
            where the comment belongs.  The format of this string is freeform and its use is optional.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to, or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is greater than BaseSchemaInternal.CommentFromLearnerItem.MaxLocationLength</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.Timestamp">
            <summary>
            Gets or sets the point in time at which the comment was most recently changed.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_learner.n.timestamp.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property indicates when the comment was created or most recently changed.
            </para>
            <para>
            This field is a string in the same format as the SCORM specification for timestamps.  This 
            may be achieved easily within C# by code as shown in the example.
            </para>
            </remarks>
            <example>
            <code>
                // this saves the timestamp with the current timezone information
                session.CurrentActivityDataModel.CommentsFromLearner[0].Timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.ffzzz");
            
                // this saves a UTC timestamp, which is recommended to avoid issues with timezones
                session.CurrentActivityDataModel.CommentsFromLearner[0].Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.ffZ");
            
                // this saves timestamp with no specific timezone information
                session.CurrentActivityDataModel.CommentsFromLearner[0].Timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
            </code>
            <para>If the value has not been set before it is accessed, null is returned.</para>
            </example>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to, or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the year is less than 1970 or greater than 2038.</exception>
            <exception cref="T:System.FormatException">Thrown if the passed string is not in the correct format.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.UniqueId">
            <summary>
            This property is unsupported for this class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Comment.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.CommentFromLms">
            <summary>
            Represents a read-only comment from the LMS.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_lms.</para>
            <para>In SCORM 1.2, this corresponds to cmi.comments_from_lms.</para>
            <para>
            See <Prp>LearningDataModel.CommentsFromLms</Prp> for more information about the usage of this class.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CommentFromLms.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CommentFromLms.m_nav">
            <summary>
            An XPathNavigator that points to a &lt;comment&gt; element.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentFromLms.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator)">
            <summary>
            Initializes a new CommentFromLms object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;comment&gt; element.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.CommentText">
            <summary>
            Gets the textual comment itself.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_lms.n.comment.</para>
            <para>In SCORM 1.2, this corresponds to cmi.comments_from.learner.</para>
            <para>
            Freeform text describing a comment that applies to all attempts on this activity.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.Location">
            <summary>
            Gets the point in the RLO to which the comment applies.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_lms.n.location.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property represents an RLO defined location string, perhaps as a bookmark to indicate
            where the comment belongs.  The format of this string is freeform and its use is optional.
            </para>
            <para>If the value has not been set, null is returned.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.Timestamp">
            <summary>
            Gets the point in time at which the comment was most recently changed.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.comments_from_lms.n.timestamp.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This value represents the point in time at which the comment was created or most recently changed.
            </para>
            <para>If the value has not been set, null is returned.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.UniqueId">
            <summary>
            This property is unsupported for this class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            This value is always true for this class as the data model exposes this list as completely read-only.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CommentFromLms.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            This value is always true for this class as the data model exposes this list as completely read-only.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Learner">
            <summary>
            A class representing the learner data for the data model.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner*.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student*.</para>
            <para>
            This object identifies the learner and provides a means to store preferences for that 
            learner.  Learner preferences are stored globally and used to initialize these values, 
            and changes made to these values will never affect any other activity.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_nav">
            <summary>
            An XPathNavigator that points to a &lt;learner&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_id">
            <summary>
            Unique identifier for this learner
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_name">
            <summary>
            Learner name.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_language">
            <summary>
            default value for language
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_audioCaptioning">
            <summary>
            default value for audio captioning
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_audioLevel">
            <summary>
            default value for audio level.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Learner.m_deliverySpeed">
            <summary>
            default level for delivery speed
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Learner.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.String,System.String,System.String,Microsoft.LearningComponents.AudioCaptioning,System.Single,System.Single)">
            <summary>
            Initializes a new Learner object.
            </summary>
            <remarks>
            All parameters for this constructor are assumed to be in compliant to SCORM 2004 ranges, whether or
            not the data model in question is actually SCORM 2004.  This is because this is the way they are stored within
            LearningStore.  If this is a SCORM 1.2 object, these values will be converted to appropriate values.
            </remarks>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;learner&gt; element.</param>
            <param name="learnerId">The unique identifier of the learner, as a URI.</param>
            <param name="learnerName">The name of the learner.</param>
            <param name="learnerLanguage">The language preference of the learner.</param>
            <param name="learnerCaption">The audio captioning preference of the learner.</param>
            <param name="learnerAudioLevel">The audio level preference of the learner.</param>
            <param name="learnerDeliverySpeed">The delivery speed preference of the learner.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Learner.Id">
            <summary>
            Gets an identifier that represents the learner uniquely.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner_id.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.student_id.</para>
            <para>
            This property is a unique identifier for the user, defined by MLC.  Any properties other 
            than uniqueness are not guaranteed for the contents of the string.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Learner.Name">
            <summary>
            Gets the name provided for the learner by the LMS.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner_name.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.student_name.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Learner.AudioLevel">
            <summary>
            Gets or sets the audio level preference of the learner.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner_preference.audio_level.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_preference.audio.</para>
            <para>
            In SCORM 2004, this property is a multiplier value that specifies an intended change in perceived 
            audio volume level relative to an implementation-specific reference level where 1 indicates “no change”.  
            For example, the value 0 specifies "off", the value of 0.5 represents half volume and a value of 2
            indicates double volume.
            </para>
            <para>
            In SCORM 1.2, any negative number represents audio being "off", 0 indicates no change of status, and a number
            from 1 to 100 indicates a volume level from softest to loudest.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is less than 0.0 for SCORM 2004 packages, or if 
            it is not an integer or is less than -32768 or greater than 100 for SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Learner.Language">
            <summary>
            Gets or sets the learner's preferred language, for those RLO's with multi-language capability.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner_preference.language.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_preference.language.</para>
            <para>In SCORM 2004, this value corresponds to a standard language code as per iso-646.</para>
            <para>In SCORM 1.2, this value is freeform text, e.g. "English", "French".</para>
            <para>In either case, an empty string indicates the use of the default system language.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longet than BaseSchemaInternal.UserItem.MaxLanguageLength 
            for SCORM 2004 packages, or longer than 255 characters for SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Learner.DeliverySpeed">
            <summary>
            Gets or sets the delivery speed preference of the learner.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner_preference.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_preference.speed.</para>
            <para>
            In SCORM 2004, this proeprty represents a multiplier that specifies the learner’s preferred 
            relative speed of content delivery expressed as a change in speed relative to an 
            implementation-specific reference speed. For example, 2 is twice as fast as 
            the reference speed and 0.5 is one half the reference speed. The default value is 1.
            </para>
            <para>
            In SCORM 1.2, this is a number from -100 to 100, where -100 is the slowest speed, 0 is no change, and
            100 is the fastest speed.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if this valus is less than 0.0 for SCORM 2004 packages, or less than -100
            or greater than 100 for SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Learner.AudioCaptioning">
            <summary>
            Gets or sets whether captioning text corresponding to audio is displayed.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.learner_preference.audio_captioning.</para>
            <para>In SCORM 1.2, this corresponds to cmi.student_preference.text.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the AudioCaptioning enumerator is passed.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Interaction">
            <summary>
            A class representing a single interaction for the data model.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.*.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.*.</para>
            <para>
            The interactions data model element defines a set of learner responses that can 
            be passed from the RLO to the application. Interactions are intended to be responses to 
            individual questions or tasks that the RLO developer wants to record. The application
            has no implied behavior for any data including within the Interaction class.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_nav">
            <summary>
            An XPathNavigator that points to a &lt;interaction&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_score">
            <summary>
            The score associated with this interaction
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_evaluation">
            <summary>
            Represents an external evaluation of a learner's response to an interation.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_extensionData">
            <summary>
            Extension data associated with this interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_objectives">
            <summary>
            A list of objective IDs associated with this interaction
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_correctResponses">
            <summary>
            A list of correct response patterns associated with this interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_rubrics">
            <summary>
            A list of rubrics associated with this interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_result">
            <summary>
            A judgment of the correctness of the learner response.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_isInList">
            <summary>
            Whether or not this object is already part of a DataModelList.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Interaction.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new Interaction object that already belongs to this data model.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;comment&gt; element.</param>
            <param name="isInDataModel">Whether or not this should notify the data model of changes made to it.</param>
            <param name="isInList">Whether or not this object is already part of a <Typ>DataModelList</Typ>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Interaction.ResetNavigator">
            <summary>
            Resets all internal data fields that are dependent upon the navigator, called when the navigator changes
            for any reason.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Interaction.m_v1p2UniqueId">
            <summary>
            Internally generated unique Id for SCORM 1.2 only.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Id">
            <summary>
            Gets or sets the unique identifier of this interaction.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.id.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.id.</para>
            <para>
            This property represents the unique string identifier for this interaction.  This identifier
            is only required to be unique within the context of this particular data model.
            </para>
            <para>
            This value must be set prior to this object's insertion into the <c>LearningDataModel.Interactions</c>
            list.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this interaction is already part of a list.</exception>
            <exception cref="T:System.ArgumentException">In SCORM 2004 packages, thrown if the value passed is empty or is a duplicate, or if the string is not a valid URI.  In SCORM 1.2 packages, this is thrown if the value passed is empty or if any of the characters in the string are not alphanumeric or - or _.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.InteractionItem.MaxInteractionIdFromCmiLength characters in SCORM 2004 packages,
            or longer than 255 in SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Rubrics">
            <summary>
            Gets the list of rubrics associated with this interaction.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Evaluation">
            <summary>
            Gets the instructor's evalutation associated with this interaction.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.InteractionType">
            <summary>
            Gets or sets which type of interaction this object corresponds to.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.type.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.type.</para>
            <para>
            Indicates the type of interaction that this instance represents and determines how the response should
            be interpreted.
            </para>
            <para>
            If this property has not yet been set, null will be returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the InteractionType enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Objectives">
            <summary>
            Gets the list of objectives associated with this interaction.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.type.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.type.</para>
            <para>
            The objectives referred to in this list are merely identifiers and do not contain
            all the data of an <Typ>Objective</Typ> object.
            </para>
            <para>
            The objective identifiers may or may not correspond to the objective identifiers 
            found in the <c>LearningDataModel.Objectives</c> data model element. Whether or not there 
            is a relationship to the objective identifiers is implementation specific. The RLO may be 
            designed to track this information and relationship.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Timestamp">
            <summary>
            Gets or sets the point in time at which the interaction was first made available to the learner.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.timespan.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.time.</para>
            <para>
            This property represents the point in time which the interaction was first made available
            to the learner for interaction and response.
            </para>
            <para>
            This field is in the same format as the SCORM specification for timestamps.  This may be achieved
            easily within C# by code like the example.
            </para>
            </remarks>
            <example>
            <code>
                // this saves the timestamp with the current timezone information
                session.CurrentActivityDataModel.Interactions[0].Timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss.ffzzz");
            
                // this saves a UTC timestamp, which is recommended to avoid issues with timezones
                session.CurrentActivityDataModel.Interactions[0].Timestamp = DateTime.UtcNow.ToString("yyyy-MM-ddTHH:mm:ss.ffZ");
            
                // this saves timestamp with no specific timezone information
                session.CurrentActivityDataModel.Interactions[0].Timestamp = DateTime.Now.ToString("yyyy-MM-ddTHH:mm:ss");
            
                // In SCORM 1.2, the timestamp is simply a 24-hour clock, so the following format should be used
                session.CurrentActivityDataModel.Interactions[0].Timestamp = DateTime.Now.ToString("HH:mm:ss");
            </code>
            </example>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">In SCORM 2004 packages, thrown if the year is less than 1970 or greater than 2038.</exception>
            <exception cref="T:System.FormatException">Thrown if the passed string is not in the correct format.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.CorrectResponses">
            <summary>
            Gets the list of correct responses associated with this interaction.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.correct_responses.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.correct_responses.</para>
            <para>
            The <Prp>CorrectResponses</Prp> collection is a list of correct responses 
            for an interaction. Depending on the type <Prp>InteractionType</Prp> of interaction, the 
            number of correct response patterns required to be supported varies. For SCORM 2004, refer 
            to RTE Section 4.2.9.1: Correct Responses Pattern Data Model Element Specifics for more 
            details on each type.  For SCORM 1.2, see the description of the 
            cmi.interactions.n.correct_responses.n.pattern data model element.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Weighting">
            <summary>
            Gets or sets the weight given to the interaction used to compute the value for a score.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.weighting.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.weighting.</para>
            <para>
            This property represents a weight that may be applied to the value of a score for this interaction.
            </para>
            <para>
            If this value has not been set, null will be returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.LearnerResponse">
            <summary>
            Gets or sets the data generated when a learner responds to the interaction.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.learner_response.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.student_response.</para>
            <para>
            This property represents the data generated by the learner's response to an interaction.  The
            object type and format of the response is dependent upon the <Prp>InteractionType</Prp> of this
            interaction.
            </para>
            <para>
            If <Prp>InteractionType</Prp> is <c>InteractionType.TrueFalse</c>, this value will be returned 
            as a <c>Boolean</c> and is expected to be set as a <c>Boolean</c>.  If <Prp>InteractionType</Prp>
            is <c>InteractionType.Numeric</c>, this value will be returned as a <c>Single</c> and is expected
            to be set as a <c>Single</c>.  Otherwise, a string value is returned and expected.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the value passed is not the correct type.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value is a string and is longer than BaseSchemaInternal.InteractionItem.MaxLearnerResponseStringLength in SCORM 2004 packages, 
            or greater than 255 characters in SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Result">
            <summary>
            Gets a judgment of the correctness of the learner response.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.result.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.result.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Latency">
            <summary>
            Gets or sets the elapsed time between the time the interaction was made available to the learner 
            and the time of the first response.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.latency.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.latency.</para>
            <para>
            This property represents the amount of time elapsed between the <Prp>Timestamp</Prp> and the
            time of the first learner response.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Description">
            <summary>
            Gets or sets a brief informative description of the interaction.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.description.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>If the value is accessed before it is set, null is returned</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.InteractionItem.MaxDescriptionLength characters.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Score">
            <summary>
            Gets the score for the interaction.
            </summary>
            <remarks>
            <para>This has no corresponding value in any SCORM setting.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.ExtensionData">
            <summary>
            Gets the extension data.
            </summary>
            <remarks>
            <para>
            Extension data does not correspond to any SCORM defined variables.  It is used to store information
            on a per activity basis that cannot be stored in SCORM specifc variables.
            </para>
            <para>
            Only certain types of data are valid within the extension data.  These include <Typ>Boolean</Typ>, 
            <Typ>Int32</Typ>, <Typ>DateTime</Typ>, <Typ>Double</Typ>, <Typ>String</Typ>, and <Typ>byte</Typ>[] array.
            If a <Typ>Single</Typ> is passed, this will automatically be converted to a <Typ>Double</Typ>.
            </para>
            <para>
            All keys into this dictionary are unique, and if the same key is used twice it will overwrite the value 
            and possibly the type information associated with that element.  SCORM naming conventions are recommended
            but not required for key (i.e. variable) names.
            </para>
            </remarks>
            <example>
            <code>
            // assigns a boolean value of true to "foo.bar.something"
            session.CurrentActivityDataModel.ExtensionData["foo.bar.something"] = true;
            
            // assigns a double value of 3.1415927 to "foo.bar.something"
            // this changes the type as well as the value of the variable "foo.bar.something"
            session.CurrentActivityDataModel.ExtensionData["foo.bar.something"] = 3.1415927
            </code>
            <code>
            byte[] attachment = ReadFileAsByteArray("c:\\assignment.doc");
            session.CurrentActivityDataModel.ExtensionData["foo.bar.attachment"] = attachment;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.UniqueId">
            <summary>
            Gets the unique identifier for this class, for use internally by the <Typ>DataModelList</Typ> class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Interaction.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Evaluation">
            <summary>
            Represents an external evaluation of a learner's response to an interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Evaluation.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Evaluation.m_nav">
            <summary>
            An XPathNavigator that points to an &lt;result&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Evaluation.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Evaluation.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Evaluation.m_comments">
            <summary>
            A list of comments associated with this evaluation
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Evaluation.Points">
            <summary>
            Gets or sets the points assigned by the instructor for this evaluation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is infinity or not a number.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Evaluation.Comments">
            <summary>
            Gets the list of comments made by the instructor associated with this evaluation.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Evaluation.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Rubric">
            <summary>
            Represents a rubric in the list of rubrics belonging to a particular interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Rubric.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Rubric.m_nav">
            <summary>
            An XPathNavigator that points to an &lt;objective&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Rubric.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Rubric.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Rubric.m_isInList">
            <summary>
            Whether or not this object is already part of a DataModelList.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Rubric.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new Rubric object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;objective&gt; element.</param>
            <param name="isInDataModel">Whether or not this should notify the data model of changes made to it.</param>
            <param name="isInList">Whether or not this object is already part of a <Typ>DataModelList</Typ>.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.IsSatisfied">
            <summary>
            Gets or sets the whether or not this rubric has been satisfied.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.Points">
            <summary>
            Gets or sets the point value of the rubric if it has been satisfied.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is infinity or not a number.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.UniqueId">
            <summary>
            Gets the unique identifier for this class, for use internally by the <Typ>DataModelList</Typ> class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Rubric.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.InteractionResult">
            <summary>
            The result of an interaction, which is a judgement of correctness 
            of the learner response.
            </summary>
            <remarks>
            Provides information relating to cmi.interactions.n.result value.
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionResult.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionResult.m_nav">
            <summary>
            An XPathNavigator that points to an &lt;result&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionResult.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionResult.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionResult.State">
            <summary>
            Gets and sets the state of the interaction result. If not initialized, the value is InteractionResultState.None.
            If the value is InteractionResultState.Numeric, then the value should be set in <Prp>NumericResult</Prp>.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value passed is not a valid value for the InteractionResultState enumeration.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionResult.NumericResult">
            <summary>
            Gets or sets the numeric indication of the correctness of the learner response. This value is only valid if 
            <Prp>State</Prp> is InteractionResultState.Numeric.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionResult.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.InteractionObjective">
            <summary>
            Represents an objective in the list of objectives belonging to a particular interaction.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionObjective.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionObjective.m_nav">
            <summary>
            An XPathNavigator that points to an &lt;objective&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionObjective.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionObjective.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.InteractionObjective.m_isInList">
            <summary>
            Whether or not this object is already part of a DataModelList.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionObjective.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new InteractionObjective object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;objective&gt; element.</param>
            <param name="isInDataModel">Whether or not this should notify the data model of changes made to it.</param>
            <param name="isInList">Whether or not this object is already part of a <Typ>DataModelList</Typ>.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionObjective.Id">
            <summary>
            Gets or sets the unique identifier of this interaction.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.objectives.n.id.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.objectives.n.id.</para>
            <para>
            This property represents a unique identifier for an objective.  This identifier may or may not
            correspond to an objective defined within the <Prp>LearningDataModel.Objectives</Prp> collection.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentException">In SCORM 2004 packages, thrown if the value passed is empty, or if the string is not a valid URI.  In SCORM 1.2 packages, this is thrown if the value passed is empty or if any of the characters in the string are not alphanumeric or - or _.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.AttemptObjectiveItem.MaxKeyLength characters in SCORM 2004 packages,
            or longer than 255 in SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionObjective.UniqueId">
            <summary>
            Gets the unique identifier for this class, for use internally by the <Typ>DataModelList</Typ> class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionObjective.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionObjective.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionObjective.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.InteractionObjective.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.CorrectResponse">
            <summary>
            Represents a group of correct values, the exact format of which varies based on the 
            <Prp>../Interaction.InteractionType</Prp> property.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CorrectResponse.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CorrectResponse.m_nav">
            <summary>
            An XPathNavigator that points to an &lt;correctResponse&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CorrectResponse.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CorrectResponse.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.CorrectResponse.m_isInList">
            <summary>
            Whether or not this object is already part of a DataModelList.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CorrectResponse.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new CorrectResponse object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;correctResponse&gt; element.</param>
            <param name="isInDataModel">Whether or not this should notify the data model of changes made to it.</param>
            <param name="isInList">Whether or not this object is already part of a <Typ>DataModelList</Typ>.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CorrectResponse.Pattern">
            <summary>
            Gets or sets a pattern corresponding to a correct response of the type defined by <Prp>Interaction.InteractionType</Prp>.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.interactions.n.correct_responses.n.pattern.</para>
            <para>In SCORM 1.2, this corresponds to cmi.interactions.n.correct_responses.n.pattern.</para>
            <para>
            For the exact definition of the format of this value, see the SCORM 2004 specification, RTE 4.2.9.1a.
            </para>
            <para>
            This information is not checked for compliance with the SCORM specification, except for length.
            </para>
            <para>If the value has not been set before it is accessed, null is returned.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.CorrectResponseItem.MaxResponsePatternLength characters in SCORM 2004 packages,
            or longer than 255 in SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CorrectResponse.UniqueId">
            <summary>
            This is invalid for this class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CorrectResponse.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CorrectResponse.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CorrectResponse.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.CorrectResponse.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Objective">
            <summary>
            Represents an objectives for an activity, used to track RLO defined goals.
            </summary>
            <remarks>
            <para>
            An Objective represents a trackable objective associated with a particular
            activity.  The status of objectives may influence sequencing decisions.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_nav">
            <summary>
            An XPathNavigator that points to an &lt;objective&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_score">
            <summary>
            The score associated with this objective
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_extensionData">
            <summary>
            Extension data associated with this objective
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_isInDataModel">
            <summary>
            Whether or not this should notify the data model of changes made to it.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_isInList">
            <summary>
            Whether or not this object is already part of a DataModelList.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Objective.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new Objective object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;objective&gt; element.</param>
            <param name="isInDataModel">Whether or not this should notify the data model of changes made to it.</param>
            <param name="isInList">Whether or not this object is already part of a <Typ>DataModelList</Typ>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Objective.ResetNavigator">
            <summary>
            Resets all internal data fields that are dependent upon the navigator, called when the navigator changes
            for any reason.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Objective.m_v1p2UniqueId">
            <summary>
            Internally generated unique Id for SCORM 1.2 only.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.Id">
            <summary>
            Gets or sets the unique identifier of this objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.n.id.</para>
            <para>In SCORM 1.2, this corresponds to cmi.objectives.n.id.</para>
            <para>
            This property represents a identifier for the objective, which is required to be unique within
            the context of this RLO.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the string passed is a duplicate value, or in SCORM 2004 packages, thrown if the value passed is empty, or if the string is not a valid URI.  In SCORM 1.2 packages, this is thrown if any of the characters in the string are not alphanumeric or - or _.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.AttemptObjectiveItem.MaxKeyLength characters in SCORM 2004 packages,
            or longer than 255 in SCORM 1.2 packages.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.IsPrimaryObjective">
            <summary>
            Gets whether or not the objective is the primary objective for this activity.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.Score">
            <summary>
            Gets the score for the objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.n.score.</para>
            <para>In SCORM 1.2, this corresponds to cmi.objectives.n.score.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.SuccessStatus">
            <summary>
            Gets or sets an indication of whether the learner has mastered the objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.n.success_status.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property indicates whether or not the learner has mastered the objective.  How the RLO
            determines this status is implementation dependent.
            </para>
            <para>
            This value will default to SuccessStatus.Unknown if not explicitly set by the RLO.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the SuccessStatus enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.CompletionStatus">
            <summary>
            Gets or sets an indication of whether the learner has completed the objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.n.completion_status.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This value will default to CompletionStatus.Unknown if not explicitly set by the RLO.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the CompletionStatus enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.Status">
            <summary>
            Gets or sets the status of this objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this is invalid.</para>
            <para>In SCORM 1.2, this corresponds to cmi.objectives.n.status.</para>
            <para>
            The status of the RLO's objective obtained by the student after each attempt to master the RLO's objective.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is a SCORM 2004 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the LessonStatus enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.ProgressMeasure">
            <summary>
            Gets or sets the measure of the progress the learner has made toward completing the objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.n.progress_measure.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>
            This property represents a measure of the progress of that the learner has made toward completion of
            the RLO expressed as a number from 0.0 to 1.0.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value being assigned is outside the range 0.0 to 1.0.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.Description">
            <summary>
            Gets or sets a description of the objective.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.objectives.n.description.</para>
            <para>In SCORM 1.2, this is invalid.</para>
            <para>If the value has not been set before it is accessed, null is returned.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.AttemptObjectiveItem.MaxDescriptionLength</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.ExtensionData">
            <summary>
            Gets the extension data.
            </summary>
            <remarks>
            <para>
            Extension data does not correspond to any SCORM defined variables.  It is used to store information
            on a per activity basis that cannot be stored in SCORM specifc variables.
            </para>
            <para>
            Only certain types of data are valid within the extension data.  These include <Typ>Boolean</Typ>, 
            <Typ>Int32</Typ>, <Typ>DateTime</Typ>, <Typ>Double</Typ>, <Typ>String</Typ>, and <Typ>byte</Typ>[] array.
            If a <Typ>Single</Typ> is passed, this will automatically be converted to a <Typ>Double</Typ>.
            </para>
            <para>
            All keys into this dictionary are unique, and if the same key is used twice it will overwrite the value 
            and possibly the type information associated with that element.  SCORM naming conventions are recommended
            but not required for key (i.e. variable) names.
            </para>
            </remarks>
            <example>
            <code>
            // assigns a boolean value of true to "foo.bar.something"
            session.CurrentActivityDataModel.ExtensionData["foo.bar.something"] = true;
            
            // assigns a double value of 3.1415927 to "foo.bar.something"
            // this changes the type as well as the value of the variable "foo.bar.something"
            session.CurrentActivityDataModel.ExtensionData["foo.bar.something"] = 3.1415927
            </code>
            <code>
            byte[] attachment = ReadFileAsByteArray("c:\\assignment.doc");
            session.CurrentActivityDataModel.ExtensionData["foo.bar.attachment"] = attachment;
            </code>
            </example>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.SatisfiedByMeasure">
            <summary>
            Indicates whether or not the <Prp>MinNormalizedMeasure</Prp> should be used in place of any other 
            method to determine if this objective is satisfied.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.MinNormalizedMeasure">
            <summary>
            Identifies the minimum satisfaction measure for the objective, normalized to -1 to 1.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.GlobalObjectiveReadSatisfiedStatus">
            <summary>
            If not empty, the name of the global ojective to read the satisfied status from.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.GlobalObjectiveReadNormalizedMeasure">
            <summary>
            If not empty, the name of the global ojective to read the normalized measure from.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.GlobalObjectiveWriteSatisfiedStatus">
            <summary>
            Gets an enumerator that contains the names of the global ojectives to write the satisfied status to.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.GlobalObjectiveWriteNormalizedMeasure">
            <summary>
            Gets an enumerator that contains the names of the global ojectives to write the normalized measure to.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.GlobalObjectiveWriteSatisfiedStatusCount">
            <summary>
            Gets the number of global objectives that the satisfied status should be written to.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.GlobalObjectiveWriteNormalizedMeasureCount">
            <summary>
            Gets the number of global objectives that the normalized measure should be written to.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.UniqueId">
            <summary>
            Gets the unique identifier for this class, for use internally by the <Typ>DataModelList</Typ> class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.DataModel">
            <summary>
            Gets the data model associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.Navigator">
            <summary>
            Gets or sets the XPathNavigator associated with this object
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.IsInDataModel">
            <summary>
            Gets or sets whether or not this object refers to an item that already exists in the <Typ>LearningDataModel</Typ>.
            </summary>
            <remarks>
            If this value is true, that means the data model is notified of changes made to the object.  If it is false,
            the data model is not notified of any changes made.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.Tracked">
            <summary>
            Returns whether this objective should be tracked.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.IsInList">
            <summary>
            Gets or sets whether or not this object is a member of an existing DataModelList.
            </summary>
            <remarks>
            If this value is true, that means the object cannot be added to any other list.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.ObjectiveProgressStatus">
            <summary>
            Gets or sets whether the objective currently has a valid satsifaction value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <remarks>Always returns <c>false</c> for activities that are not tracked.
            <para>If <c>DataModel.ObjectiveSetByContent == true</c>, setting this property will have no affect.</para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.ObjectiveSatisfiedStatus">
            <summary>
            Gets or sets whether the objective is satisfied.
            </summary>
            <remarks>
            This value is unreliable unless <Prp>ObjectiveProgressStatus </Prp> is true.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.ObjectiveMeasureStatus">
            <summary>
            Gets or sets whether the objective has a measure value.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <remarks>Always returns <c>false</c> for activities that are not tracked.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Objective.ObjectiveNormalizedMeasure">
            <summary>
            Gets or sets the standardized score for the objective
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.Score">
            <summary>
            The score data model element is the learner’s score for the SCO.
            </summary>
            <remarks>
            This object is a child object used in various places.  It may refer to the score of the RLO as a whole,
            an <c>Interaction</c>, or an <c>Objective.</c>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Score.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Score.m_nav">
            <summary>
            An XPathNavigator that points to a &lt;score&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Score.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.Score.m_isInDataModel">
            <summary>
            Whether or not this object belongs to the data model.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Score.Initialize(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean)">
            <summary>
            Initializes a new Score object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;score&gt; element.</param>
            <param name="isInDataModel">Whether or not this object belongs to the data model.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.Score.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator,System.Boolean)">
            <summary>
            Initializes a new Score object.
            </summary>
            <param name="dataModel">The data model associated with this score.</param>
            <param name="nav">An XPathNavigator that points to a &lt;score&gt; element.</param>
            <param name="isInDataModel">Whether or not this object belongs to the data model.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Score.Navigator">
            <summary>
            Gets the XPathNavigator that points to a &lt;navigationRequest&gt; element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Score.IsInDataModel">
            <summary>
            Gets or sets whether or not this object belongs to the data model.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Score.Scaled">
            <summary>
            Gets or sets the scaled score value of the parent object.
            </summary>
            <remarks>
            <para>
            This property is a number that reflects the performance of the learner. The value 
            is scaled to fit the range –1.0 to 1.0 inclusive.
            </para>
            <para>
            If this value has not yet been set, null is returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the value being assigned is outside the range -1.0 to 1.0.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Score.Raw">
            <summary>
            Gets or sets the raw score value of the parent object.
            </summary>
            <remarks>
            <para>
            This property is used to store a raw, non-scaled score.  This value should lie between
            the <Prp>Minimum</Prp> and <Prp>Maximum</Prp> values, however since these are optional
            properties no validation is performed against them.
            </para>
            <para>
            If this value has not yet been set, null is returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If this is a SCORM 1.2 package, thrown if the value being assigned is outside the range 0 to 100.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Score.Minimum">
            <summary>
            Gets or sets the minimum raw score value of the parent object.
            </summary>
            <remarks>
            <para>
            If this value has not yet been set, null is returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If this is a SCORM 1.2 package, thrown if the value being assigned is outside the range 0 to 100.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.Score.Maximum">
            <summary>
            Gets or sets the maximum raw score value of the parent object.
            </summary>
            <remarks>
            <para>
            If this value has not yet been set, null is returned.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If this is a SCORM 1.2 package, thrown if the value being assigned is outside the range 0 to 100.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.DataModel.NavigationRequest">
            <summary>
            Represents an exit status and/or a request for navigation made by the RLO.
            </summary>
            <remarks>
            <para>This class is intended for use by RLO's, not by controlling applications.  It provides a method
            to identify what their status was when they were exited and what they would prefer the next navigation
            to be.  Controlling applications may simply call the desired navigation commands directly.
            </para>
            <para>
            The entire contents of this class is ignored in all cases except when <c>ProcessDataModelNavigation</c> is explicitly called
            on the <c>Session</c> object.
            </para>
            <para>
            When <c>ProcessDataModelNavigation</c> is called, the <Prp>ExitMode</Prp> property is checked first.  If this value is set to 
            <c>ExitMode.TimeOut</c>, a navigation request of <c>NavigationCommand.ExitAll</c> is performed.  
            If the value is set to <c>ExitMode.Logout</c>, a navigation request of <c>NavigationCommand.SuspendAll</c>
            is performed.  Otherwise, the navigation from <Prp>Command</Prp> is performed.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.NavigationRequest.m_dataModel">
            <summary>
            The data model associated with this object
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.NavigationRequest.m_nav">
            <summary>
            An XPathNavigator that points to a &lt;navigationRequest&gt; element.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.DataModel.NavigationRequest.m_verifier">
            <summary>
            An internal class that is used to validate data.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequest.#ctor(Microsoft.LearningComponents.DataModel.LearningDataModel,System.Xml.XPath.XPathNavigator)">
            <summary>
            Initializes a new NavigationRequest object.
            </summary>
            <param name="dataModel">The data model associated with this navigationRequest.</param>
            <param name="nav">An XPathNavigator that points to a &lt;navigationRequest&gt; element.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.NavigationRequest.Navigator">
            <summary>
            Gets the XPathNavigator that points to a &lt;navigationRequest&gt; element.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.NavigationRequest.Command">
            <summary>
            Gets or sets the navigation command requested by the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this is a superset of the values allowed by the adl.nav.request command.</para>
            <para>In SCORM 1.2, there is no corresponding command.</para>
            <para>
            In the case of a call to <c>ProcessDataModelNavigation()</c> on the <c>Session</c> object, this navigation will
            be attempted automatically.  In any other case, this field is ignored.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the NavigationCommand enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.NavigationRequest.ExitMode">
            <summary>
            Gets or sets the exit status of the RLO.
            </summary>
            <remarks>
            <para>In SCORM 2004, this corresponds to cmi.exit.</para>
            <para>In SCORM 1.2, this corresponds to cmi.core.exit.</para>
            <para>
            In the case of a call to <c>ProcessDataModelNavigation()</c> on the <c>Session</c> object, this may cause a navigation 
            to occur, and may change some initial state in subsequent returns to this RLO.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if a value not in the ExitMode enumerator is passed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.DataModel.NavigationRequest.Destination">
            <summary>
            Gets or sets the destination of a choice navigation.
            </summary>
            <remarks>
            <para>If <Prp>Command</Prp> is <c>NavigationCommand.Choice</c>, this property represents the 
            unique identifier of the activity that the navigation should move to.
            </para>
            <para>If <Prp>Command</Prp> is not <c>NavigationCommand.Choice</c>, this property is ignored.</para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this LearningDataModel object cannot be written to or if this is a SCORM 1.2 package.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the string passed is longer than BaseSchemaInternal.ActivityPackageItem.MaxActivityIdFromManifestLength characters</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.VerifierHelpers.ValidateTimeStampV1p3(System.String)">
            <summary>
            Validates a time (second,10,0) format used by SCORM 2004
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.VerifierHelpers.ValidateCMITime(System.String)">
            <summary>
            Validates a CMITime format used by SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.VerifierHelpers.ValidateCMIFeedback(System.String)">
            <summary>
            Validates a field defined as CMIFeedback.
            </summary>
            <param name="value">The value to validate.</param>
            <remarks>
            Since the actual valid contents of the string vary based on the 
            Interaction.InteractionType, it is not reliably possible to validate this 
            field for anything beyond length without getting into some questions that 
            we really don't want to answer (e.g. what should we do with these values 
            if the type has not yet been set, what should be done with them if the 
            type changes).
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.VerifierHelpers.ValidateCMIIdentifier(System.String)">
            <summary>
            Validates a field defined as CMIIdentifier.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateEvaluationPoints(System.Nullable{System.Single})">
            <summary>
            Any valid float is valid.
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateCompletionStatus(Microsoft.LearningComponents.CompletionStatus)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateEntry(Microsoft.LearningComponents.DataModel.EntryMode)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateLessonStatus(System.Nullable{Microsoft.LearningComponents.LessonStatus})">
            <summary>
            This is invalid for SCORM 2004.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateLocation(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 1000.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateProgressMeasure(System.Nullable{System.Single})">
            <summary>
            Valid values are 0.0 to 1.0
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateSuccessStatus(Microsoft.LearningComponents.SuccessStatus)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateSuspendData(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 4000.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateTotalTime(System.TimeSpan)">
            <summary>
            All values are valid
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p3.ValidateSessionTime(System.TimeSpan)">
            <summary>
            All values are valid
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateEvaluationPoints(System.Nullable{System.Single})">
            <summary>
            Any valid float is valid.
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateCompletionStatus(Microsoft.LearningComponents.CompletionStatus)">
            <summary>
            This is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateEntry(Microsoft.LearningComponents.DataModel.EntryMode)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateLessonStatus(System.Nullable{Microsoft.LearningComponents.LessonStatus})">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateLocation(System.String)">
            <summary>
            Just validate for length.  Defined as CMIString255.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateProgressMeasure(System.Nullable{System.Single})">
            <summary>
            This is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateSuccessStatus(Microsoft.LearningComponents.SuccessStatus)">
            <summary>
            This is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateSuspendData(System.String)">
            <summary>
            Just validate for length.  Defined as a CMIString4096.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateTotalTime(System.TimeSpan)">
            <summary>
            All values are valid
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierV1p2.ValidateSessionTime(System.TimeSpan)">
            <summary>
            All values are valid
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateEvaluationPoints(System.Nullable{System.Single})">
            <summary>
            Any valid float is valid.
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateCompletionStatus(Microsoft.LearningComponents.CompletionStatus)">
            <summary>
            This is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateEntry(Microsoft.LearningComponents.DataModel.EntryMode)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateLessonStatus(System.Nullable{Microsoft.LearningComponents.LessonStatus})">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateLocation(System.String)">
            <summary>
            Just validate for length.  Defined as CMIString255.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateProgressMeasure(System.Nullable{System.Single})">
            <summary>
            This is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateSuccessStatus(Microsoft.LearningComponents.SuccessStatus)">
            <summary>
            This is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateSuspendData(System.String)">
            <summary>
            Just validate for length.  Defined as a CMIString4096.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateTotalTime(System.TimeSpan)">
            <summary>
            All values are valid
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.DataModelVerifierLrm.ValidateSessionTime(System.TimeSpan)">
            <summary>
            All values are valid
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p3.ValidateId(System.String)">
            <summary>
            Validates that the ID is a valid URI and is within the defined length for MLC.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p3.ValidateSuccessStatus(Microsoft.LearningComponents.SuccessStatus)">
            <summary>
            All enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p3.ValidateCompletionStatus(Microsoft.LearningComponents.CompletionStatus)">
            <summary>
            All enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p3.ValidateStatus(System.Nullable{Microsoft.LearningComponents.LessonStatus})">
            <summary>
            This is invalid for SCORM 2004.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p3.ValidateProgressMeasure(System.Nullable{System.Single})">
            <summary>
            Valid values are 0.0 to 1.0
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p3.ValidateDescription(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 250. This validates according to MLC string limit.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p2.ValidateId(System.String)">
            <summary>
            Validates value as a CMIIdentifier
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p2.ValidateSuccessStatus(Microsoft.LearningComponents.SuccessStatus)">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p2.ValidateCompletionStatus(Microsoft.LearningComponents.CompletionStatus)">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p2.ValidateStatus(System.Nullable{Microsoft.LearningComponents.LessonStatus})">
            <summary>
            All enum values are valid
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p2.ValidateProgressMeasure(System.Nullable{System.Single})">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierV1p2.ValidateDescription(System.String)">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierLrm.ValidateId(System.String)">
            <summary>
            Validates value as a CMIIdentifier
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierLrm.ValidateSuccessStatus(Microsoft.LearningComponents.SuccessStatus)">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierLrm.ValidateCompletionStatus(Microsoft.LearningComponents.CompletionStatus)">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierLrm.ValidateStatus(System.Nullable{Microsoft.LearningComponents.LessonStatus})">
            <summary>
            All enum values are valid
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierLrm.ValidateProgressMeasure(System.Nullable{System.Single})">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ObjectiveVerifierLrm.ValidateDescription(System.String)">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p3.ValidateScaled(System.Nullable{System.Single})">
            <summary>
            Valid values are -1.0 to 1.0
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p3.ValidateRaw(System.Nullable{System.Single})">
            <summary>
            Any value is valid
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p3.ValidateMinimum(System.Nullable{System.Single})">
            <summary>
            Any value is valid
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p3.ValidateMaximum(System.Nullable{System.Single})">
            <summary>
            Any value is valid
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p2.ValidateScaled(System.Nullable{System.Single})">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p2.ValidateRaw(System.Nullable{System.Single})">
            <summary>
            Any value is valid from 0 to 100
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p2.ValidateMinimum(System.Nullable{System.Single})">
            <summary>
            Any value is valid from 0 to 100
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierV1p2.ValidateMaximum(System.Nullable{System.Single})">
            <summary>
            Any value is valid from 0 to 100
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierLrm.ValidateScaled(System.Nullable{System.Single})">
            <summary>
            This value is not valid for SCORM 1.2
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierLrm.ValidateRaw(System.Nullable{System.Single})">
            <summary>
            Any value is valid
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierLrm.ValidateMinimum(System.Nullable{System.Single})">
            <summary>
            Any value is valid
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.ScoreVerifierLrm.ValidateMaximum(System.Nullable{System.Single})">
            <summary>
            Any value is valid
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierV1p3.ValidateComment(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 4000. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierV1p3.ValidateLocation(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 250. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierV1p3.ValidateTimeStamp(System.String)">
            <summary>
            Validates the value as a time(second, 10, 0)
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierV1p2.ValidateComment(System.String)">
            <summary>
            Validate as CMIString4096
            </summary>
            <param name="value">Value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierV1p2.ValidateLocation(System.String)">
            <summary>
            Invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierV1p2.ValidateTimeStamp(System.String)">
            <summary>
            Invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierLrm.ValidateComment(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 4000. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierLrm.ValidateLocation(System.String)">
            <summary>
            Invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CommentVerifierLrm.ValidateTimeStamp(System.String)">
            <summary>
            Invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p3.ValidateAudioLevel(System.Single)">
            <summary>
            Valid values are >= 0.0
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p3.ValidateLanguage(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 250. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p3.ValidateDeliverySpeed(System.Single)">
            <summary>
            Valid values are >= 0.0
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p3.ValidateAudioCaptioning(Microsoft.LearningComponents.AudioCaptioning)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p2.ValidateAudioLevel(System.Single)">
            <summary>
            Validate that the value is an integer from -32768 to 100.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p2.ValidateLanguage(System.String)">
            <summary>
            Value is any string CMIString255
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p2.ValidateDeliverySpeed(System.Single)">
            <summary>
            Validate that the value is an integer from -100 to 100.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierV1p2.ValidateAudioCaptioning(Microsoft.LearningComponents.AudioCaptioning)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierLrm.ValidateAudioLevel(System.Single)">
            <summary>
            Validate that the value is an integer from -32768 to 100.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierLrm.ValidateLanguage(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 250. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierLrm.ValidateDeliverySpeed(System.Single)">
            <summary>
            Validate that the value is an integer from -100 to 100.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.LearnerVerifierLrm.ValidateAudioCaptioning(Microsoft.LearningComponents.AudioCaptioning)">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateId(System.String)">
            <summary>
            Validates that the ID is a valid URI. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateInteractionType(System.Nullable{Microsoft.LearningComponents.InteractionType})">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateTimeStamp(System.String)">
            <summary>
            Validates the value as a time(second, 10, 0)
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateWeighting(System.Nullable{System.Single})">
            <summary>
            Any value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateLearnerResponse(System.Object)">
            <summary>
            Validates learner response
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateResultState(Microsoft.LearningComponents.InteractionResultState)">
            <summary>
            Any valid enum value is valid for value.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateNumericResult(System.Nullable{System.Single})">
            <summary>
            Any numeric value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateLatency(System.TimeSpan)">
            <summary>
            Any valid TimeSpan is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p3.ValidateDescription(System.String)">
            <summary>
            Just validate for length.  SCORM 2004 defines an SPM of 250. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateId(System.String)">
            <summary>
            Validates value as a CMIIdentifier
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateInteractionType(System.Nullable{Microsoft.LearningComponents.InteractionType})">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateTimeStamp(System.String)">
            <summary>
            Validates the value as a CMITime
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateWeighting(System.Nullable{System.Single})">
            <summary>
            Any value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateLearnerResponse(System.Object)">
            <summary>
            Validates learner response
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateResultState(Microsoft.LearningComponents.InteractionResultState)">
            <summary>
            Any valid enum value is valid for value.State.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateNumericResult(System.Nullable{System.Single})">
            <summary>
            Any numeric value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierV1p2.ValidateLatency(System.TimeSpan)">
            <summary>
            Any valid TimeSpan is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateId(System.String)">
            <summary>
            Validates that the ID is a valid URI. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateInteractionType(System.Nullable{Microsoft.LearningComponents.InteractionType})">
            <summary>
            All normal enum values are valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateTimeStamp(System.String)">
            <summary>
            Validates the value as a CMITime
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateWeighting(System.Nullable{System.Single})">
            <summary>
            Any value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateLearnerResponse(System.Object)">
            <summary>
            Validates learner response
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateResultState(Microsoft.LearningComponents.InteractionResultState)">
            <summary>
            Any valid enum value is valid for value.State.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateNumericResult(System.Nullable{System.Single})">
            <summary>
            Any numeric value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionVerifierLrm.ValidateLatency(System.TimeSpan)">
            <summary>
            Any valid TimeSpan is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierV1p3.ValidateCommand(System.Nullable{Microsoft.LearningComponents.NavigationCommand})">
            <summary>
            Any valid enum value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierV1p3.ValidateExitMode(System.Nullable{Microsoft.LearningComponents.ExitMode})">
            <summary>
            Any valid enum value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierV1p3.ValidateDestination(System.String)">
            <summary>
            SCORM 2004 doesn't specifically set an SPM for this, however it must be a
            valid activity ID, and that implies a SPM 4000 URI. String length is validated according to MLC limits.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierV1p2.ValidateCommand(System.Nullable{Microsoft.LearningComponents.NavigationCommand})">
            <summary>
            This is invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierV1p2.ValidateExitMode(System.Nullable{Microsoft.LearningComponents.ExitMode})">
            <summary>
            Any valid enum value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierV1p2.ValidateDestination(System.String)">
            <summary>
            This is invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierLrm.ValidateCommand(System.Nullable{Microsoft.LearningComponents.NavigationCommand})">
            <summary>
            This is invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierLrm.ValidateExitMode(System.Nullable{Microsoft.LearningComponents.ExitMode})">
            <summary>
            Any valid enum value is valid.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.NavigationRequestVerifierLrm.ValidateDestination(System.String)">
            <summary>
            This is invalid for SCORM 1.2
            </summary>
            <param name="value">The value to validate</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionObjectiveVerifierV1p3.ValidateId(System.String)">
            <summary>
            Validates that the ID is a valid URI and is within the defined length for SCORM 2004.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionObjectiveVerifierV1p2.ValidateId(System.String)">
            <summary>
            Validates value as a CMIIdentifier
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.InteractionObjectiveVerifierLrm.ValidateId(System.String)">
            <summary>
            Validates that the ID is a valid URI and is within the defined length for SCORM 2004.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CorrectResponseVerifierV1p3.ValidatePattern(System.String)">
            <summary>
            Validate the value against the max database length.
            </summary>
            <param name="value">The value to validate.</param>
            <remarks>
            Since the actual valid contents of the string vary based on the 
            Interaction.InteractionType, it is not reliably possible to validate this 
            field for anything beyond length without getting into some questions that 
            we really don't want to answer (e.g. what should we do with these values 
            if the type has not yet been set, what should be done with them if the 
            type changes).
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CorrectResponseVerifierV1p2.ValidatePattern(System.String)">
            <summary>
            Validates value as a CMIFeedback.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.CorrectResponseVerifierLrm.ValidatePattern(System.String)">
            <summary>
            Validate the value against the max database length.
            </summary>
            <param name="value">The value to validate.</param>
            <remarks>
            Since the actual valid contents of the string vary based on the 
            Interaction.InteractionType, it is not reliably possible to validate this 
            field for anything beyond length without getting into some questions that 
            we really don't want to answer (e.g. what should we do with these values 
            if the type has not yet been set, what should be done with them if the 
            type changes).
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.EvaluationVerifierV1p3.ValidatePoints(System.Nullable{System.Single})">
            <summary>
            Any value is valid except NaN and infinity.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.EvaluationVerifierV1p2.ValidatePoints(System.Nullable{System.Single})">
            <summary>
            Any value is valid except NaN and infinity.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.EvaluationVerifierLrm.ValidatePoints(System.Nullable{System.Single})">
            <summary>
            Any value is valid except NaN and infinity.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.RubricVerifierV1p3.ValidateIsSatisfied(System.Nullable{System.Boolean})">
            <summary>
            Any value is valid here.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.RubricVerifierV1p3.ValidatePoints(System.Nullable{System.Single})">
            <summary>
            Any value is valid except NaN and infinity.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.RubricVerifierV1p2.ValidateIsSatisfied(System.Nullable{System.Boolean})">
            <summary>
            Any value is valid here.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.RubricVerifierV1p2.ValidatePoints(System.Nullable{System.Single})">
            <summary>
            Any value is valid except NaN and infinity.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.RubricVerifierLrm.ValidateIsSatisfied(System.Nullable{System.Boolean})">
            <summary>
            Any value is valid here.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.DataModel.RubricVerifierLrm.ValidatePoints(System.Nullable{System.Single})">
            <summary>
            Any value is valid except NaN and infinity.
            </summary>
            <param name="value">The value to validate.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.LearningSession">
            <summary>
            Represents a user interaction with a SCORM package. Subclasses represent sessions that are 
            stored in LearningStore (StoredLearningSession), and those that are in-memory 
            only representations (UnstoredLearningSession). 
            </summary>
            <remarks>
            
            <p/>TODO: Concepts to define
            <ol>
            <li>Exit</li>
            <li>Terminate</li>
            <li>Suspend</li>
            <li>Abandon</li>
            <li>Active session</li>
            <li>Current activity</li>
            <li>Root activity</li>
            <li>Session status (or Attempt status)</li>
            <li>Attempt -- Does this need to be defined?</li>
            <li>View</li>
            </ol>
            
            <p/>A description of the views of LearningSession:
            <ol>
            <li>Execute view (SessionView.Execute): Represents a view of a learner interacting (attempting)
            a course. All navigation rules are processed in this view. 
            Committed data is stored in LearningStore. Data persists 
            between instances of LearningSession.</li>
            <li>Review view (SessionView.Review): Represents a view of a previously executed session, without 
            regard to navigation rules. Allows accessing any activity that contains a resource. The session
            does not need to be ended in order to review it. Data of the executed session was previously stored 
            in LearningStore and this view allows viewing it. It does not allow modifying any of the stored data. 
            </li>
            <li>Random access view (SessionView.RandomAccess): During random access, the application can 
            access any activity in any order, primarily for the purpose of reading and/or updating 
            the SCORM Data Model for that activity, without regard to SCORM Sequencing and Navigation rules. 
            Allows accessing any activity in the activity tree of the content being executed. The
            attempt does not have to be ended to view a session in this way.
            Activities without associated resources may be modified in this view.
            Committed data is stored in LearningStore. Data persists between instances of LearningSession.
            When changes are committed, RandomAccessView saves the data model changes, 
            not any global information.  It will also not save any changes made to 
            the CurrentActivity or other attempt level data.</li>
            </ol>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.#ctor(Microsoft.LearningComponents.SessionView)">
            <summary>
            Constructor to create the LearningSession. This is internal, as only MLC subclasses can create one.
            </summary>
            <param name="view">The view of the session, for example Review, Execute, RandomAccess.</param>
            <remarks>
            Constructor is internal. Don't allow classes outside of our product to create one.
            
            Subclass constructors MUST assign a value to m_navigator.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ValidateSessionViewValue(Microsoft.LearningComponents.SessionView)">
            <summary>
            Returns false if the value is not a valid value for a SessionView.
            </summary>
            <param name="viewValue">A view to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.CommitChanges">
            <summary>
            Saves any data of this session that has not been saved. You must call this 
            method to ensure changes are persisted in long-term storage.
            </summary>
            <remarks>
            <p/>Applications should always call this function 
            after performing any operation that changes the state of the session, such as 
            <Mth>MoveToNext</Mth>, <Mth>MoveToPrevious</Mth> or <Mth>Exit</Mth>.
            
            <p/>If there are no changes to save, this method has no effect.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the state of the session and / or 
            its associated data model are in an inconsistent state.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.Exit">
             <summary>
             Immediately exits the session
             without processing any pending navigation requests.
             </summary>
             <remarks>
             <p/>The attempt associated with this session must have started and 
             identified an activity for delivery prior to calling this 
             method.
             
             <p/>This method does not save changes that result from exiting the session. The application
             should call <Mth>CommitChanges</Mth> after this method and prior to disposing the object
             to ensure changes are persisted.
            
             <p/>All of the activities of the session will be exited and 
             the session will end. 
             None of the postConditionRules for any activity in the session will be evaluated. 
             
             <p/>No further navigation can be taken on the session. The caller cannot resume the session 
             it has exited. To allow resuming the session, use the <Mth>Suspend</Mth> method instead 
             of <Mth>Exit</Mth>.
             
             </remarks>
             <exception cref="T:System.InvalidOperationException">Thrown if it is not valid to call this 
             method. Use <Prp>IsExitValid</Prp> to anticipate if this exception will be thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.Suspend">
            <summary>
            Temporarily suspends the the current session. It may be resumed at a later time.
            </summary>
            <remarks>
            <p/>This method does not save changes that result from suspending the session. The application
            should call <Mth>CommitChanges</Mth> after this method and prior to disposing the object to ensure changes are persisted.
            
            <p/>It may not be valid to 
            call this method based on the state of the session. Call <Prp>IsSuspendValid</Prp> before 
            calling this method to determine
            if this method is likely to succeed.
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the session is not in the appropriate state to 
            be suspended. Use <Prp>IsSuspendValid</Prp> to anticipate if this exception will be thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.Resume">
            <summary>
            Resumes a suspended session. Once the session has been resumed, it is considered active.
            </summary>
            <remarks>
            <p/>This method does not save changes that result from resuming the session. The application
            should call <Mth>CommitChanges</Mth> after this method and prior to disposing the object to ensure changes are persisted.
            
            <p/>The only time that resuming a session is valid is if the session has been previously 
            suspended. Call <Prp>IsResumeValid</Prp> before 
            calling this method to determine
            if the session is in a state which can be resumed.
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the session is not 
            in the appropriate state to 
            be resumed. Use <Prp>IsResumeValid</Prp> to anticipate if this exception will be thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.Reactivate(Microsoft.LearningComponents.ReactivateSettings)">
            <summary>
            Reactivate a session that has been completed or abandoned.
            </summary>
            <param name="settings">Settings to determine which values, if any, are cleared when the session is 
            reactivated.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the session is not in the appropriate 
            state to be reactivated. Also thrown if the current <Prp>View</Prp> is not RandomAccess.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.Abandon">
            <summary>
            Stops the session by abandoning all activities in the session.
            </summary>
            <remarks>
            <p/>This method does not save changes that result from abandoning the session. The application
            should call <Mth>CommitChanges</Mth> after this method and prior to disposing the object 
            to ensure changes are persisted. 
            
            <p/>PostCondition rules are not run after abandoning the session.
            Any current value of <Prp>NavigationRequest.ExitMode</Prp> of
            <Prp>LearningDataModel.NavigationRequest</Prp> will be ignored.
            
            <p/>A session that has been abandoned cannot be resumed at a later time.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the session is in a state which
            cannot be abandoned. Use <Prp>IsAbandonValid</Prp> to anticipate if this 
            exception will be thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.Render(Microsoft.LearningComponents.RenderContext)">
            <summary>
            Reads a file from within the package associated with this session and writes it to an HttpResponse.
            </summary>
            <param name="context">The context within which to render the file.</param>
            <remarks>
            At a minimum, the caller must set the following properties in the <paramref name="context"/>:
            <ul>
            <li><c>RelativePath</c></li>
            <li><c>Response</c></li>
            </ul>
            
            On return, the following values in <paramref name="context"/> may have been set by the session:
            <ul>
            <li><c>MimeType</c></li>
            <li><c>FormId</c>, if a default was used.</li>
            </ul>
            In addition, the content was rendered into the <c>Response</c> of <paramref name="context"/>.
            
            <p>This method will not read and write content that is not contained within the package. For instance, 
            if the entry point for an activity is an absolute URL and the caller passes it as the 
            <c>context.RelativePath</c>, this method will not succeed. It also will not render the package manifest.</p>
            
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="context"/> is not provided.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if <c>context.RelativePath</c> or one of 
            <c>Response</c>is not provided, or there is no current activity identitified in the session.
            Also thrown if an Execute session requests to render content when the attempt is not active.</exception>
            <exception cref="T:System.IO.FileNotFoundException">Thrown if the file referenced in <c>context.RelativePath</c>
            cannot be found, or if the caller requests to render the package manifest.</exception>
            <exception cref="T:System.IO.DirectoryNotFoundException">Thrown if the file refernced in <c>context.RelativePath</c>
            includes a directory that does not exist in the package.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ProcessFormData(System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process the data returned from the client.
            </summary>
            <param name="formData">The collection of name/value pairs returned from a posted form.</param>
            <param name="files">Collection of valid files posted in the request.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.GetTableOfContents(System.Boolean)">
            <summary>
            Gets the table of contents information for the activity tree of the current session.
            </summary>
            <param name="evaluateSequencingRules">If true, the sequencing rules are evaluated against the current 
            state of the session to determine which activities are available for navigation.</param>
            <returns>The root node of the table of contents.</returns>
            <remarks>Each time <c>GetTableOfCOntents</c> is called, the table of contents 
            may be reloaded from its source. This may be a lengthly operation.
            <para>
            If <paramref name="evaluateSequencingRules"/> is true, the results may only be valid until any data is 
            changed in the data model of the session. 
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.GetTableOfContents">
            <summary>
            Gets the table of contents information for the activity tree of the current session, without evaluating 
            the sequencing rules to determine if activities are accessible in the current state of the session.
            </summary>
            <returns>The root node of the table of contents.</returns>
            <remarks>Each time <c>GetTableOfCOntents</c> is called, the table of contents 
            may be reloaded from its source. This may be a lengthly operation.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.GetPackageReader">
            <summary>
            Gets a PackageReader for this session that can read the package 
            associated with the session.
            </summary>
            <returns>The PackageReader for this session.</returns>
            <remarks>
            This allows the subclasses to ensure the 
            package reader is ready to read package files.
            <para>The caller should ensure the returned PackageReader is disposed 
            in a timely manner.</para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.MoveToNext">
            <summary>
            Moves to the next activity in the session. For UnstoredLearningSession, this is determined
            by a pre-order traversal of the activity tree and navigation rules as defined in the package 
            manifest are not enforced. For a session that represents an active attempt, this is determined 
            through sequencing rules of the package and the progress of the user through it.
            </summary>
            <remarks>This method requires a current activity in
            the session.
            <p/>In the process of navigation, the current activity may be exited before the 
            navigation command is able to complete. If the navigation command then throws a SequencingException,
            the state of the session is undefined. The current activity may have 
            changed during this process.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session or if the session is not in a state that allows moving to the next activity. </exception>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if a new activity could not be identified for delivery.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.IsMoveToNextValid">
            <summary>
            Gets a boolean value indicating whether or not moving to the next activity is a valid operation.
            </summary>
            <returns>Returns true if <Mth>MoveToNext()</Mth> would result in a new active activity in the 
            session.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.MoveToPrevious">
            <summary>
            Moves to the previous activity in the session. For UnstoredLearningSession or views of sessions
            that are not active, this is determined
            by an in order traversal of the activity tree and navigation rules as defined in the package 
            manifest are not enforced. For a session that represents an active attempt, this is determined 
            through sequencing rules of the package.
            </summary>
            <remarks>This method requires a current activity in
            the session.
            <p/>In the process of navigation, the current activity may be exited before the 
            navigation command is able to complete. If the navigation command then throws a SequencingException,
            the state of the session is undefined. The current activity may have 
            changed during this process.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session or if the session is not in a state that allows moving to the previous activity.</exception>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if a new activity could not be identified for delivery.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.IsMoveToPreviousValid">
            <summary>
            Gets a boolean value indicating whether or not moving to the previous activity is a valid operation.
            </summary>
            <returns>Returns true if <Mth>MoveToPrevious()</Mth> would result in a new active activity in the 
            session.</returns>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.MoveToActivity(System.String)">
            <summary>
            Makes the selected activity the current activity.
            </summary>
            <param name="activityKey">The id from the manifest corresponding to the activity
            to become the current activity.</param>
            <remarks>
            <p/>In the process of navigation, the current activity may be exited before the 
            navigation command is able to complete. If the navigation command then throws a SequencingException,
            the state of the session is undefined. The current activity may have 
            changed during this process.
            </remarks>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="activityKey"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="activityKey"/> is an empty string.</exception>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the <paramref name="activityKey"/>
            cannot become the current activity to restrictions in the sequencing rules of the package.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current state of the session does not allow
            moving to the selected activity or if the activity does not exist in the package.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.MoveToActivity(System.Int64)">
            <summary>
            Makes the selected activity the current activity, using the unique activity id. 
            </summary>
            <param name="activityId">The unique identifier for the selected activity.</param>
            <remarks>
            <p/>Whenever possible, use this method, which takes a long value instead of 
            the activity key, as it will improve performance.
            <p/>In the process of navigation, the current activity may be exited before the 
            navigation command is able to complete. If the navigation command then throws a SequencingException,
            the state of the session is undefined. The current activity may have 
            changed during this process.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the <paramref name="activityId"/>
            cannot become the current activity to restrictions in the sequencing rules of the package.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current state of the session does not allow
            moving to the selected activity or if the activity does not exist in the package.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.IsMoveToActivityValid(System.Int64)">
            <summary>
            Gets a boolean value indicating whether or not moving to the selected activity is a 
            valid operation. The activity is identified by it's unique numerical id.
            </summary>
            <param name="activityId">The unique numeric identifier of the selected activity.</param>
            <returns>Returns true if moving to the selected activity would result in making that 
            activity become the current activity.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.IsMoveToActivityValid(System.String)">
            <summary>
            Gets a boolean value indicating whether or not moving to the selected activity is a 
            valid operation.
            </summary>
            <param name="activityKey">The key that uniquely identifies the activity.</param>
            <returns>Returns true if moving to the selected activity would result in making that 
            activity become the current activity.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="activityKey"/> is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="activityKey"/> is an empty string.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ProcessNavigationRequests">
            <summary>
            Processes all of the pending navigation requests in the current activity's 
            data model. 
            </summary>
            <returns>True if a navigation request was processed as a result of this call.</returns>
            <remarks>
            <p/>After this method, the state of the session and its current activity  
            is determined by the navigation commands (if any) 
            that were set in the LearningDataModel of the current activity 
            prior to calling this method. 
            If there is a navigation
            request to move to a different activity, or to exit the current activity, this method 
            will trigger that pending navigation request. 
            
            <p/>Pending navigation requests for activities other than the current activity are 
            ignored.
            
            <p/>The LearningSession current activity may change after 
            calling this method. It may have changed due to a pending navigation request in the 
            current activity's data model. It may have changed due to the postConditionRules associated
            with the activity in the package manifest.
            
            <p/>If the activity is being paused, and should be left in a state where it can be resumed,
            then the caller should set the <Prp>NavigationRequest.ExitMode</Prp> value of
            <Prp>LearningDataModel.NavigationRequest</Prp>
            to Suspend before calling this method.
            
            <p/>This method does not save the data model after processing these
            navigation requests, so it is recommended that the 
            application call <Mth>CommitChanges</Mth> after calling this method.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the state of the session, such as the 
            current sequencing rules, do not allow processing the 
            requested navigation.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ExitCurrentActivity">
            <summary>
            Immediately exits the current activity without processing any pending 
            navigation requests and without saving 
            any data model values that have not been committed.
            </summary>
            <remarks>
            <p/>It is recommended the application call <Mth>CommitChanges</Mth> after exiting the current 
            activity to ensure changes made by this method are saved.
            
            <p/>If the caller wants to be able to resume the current activity at a future time, it should 
            set the <Prp>NavigationRequest.ExitMode</Prp> value of
            <Prp>LearningDataModel.NavigationRequest</Prp> to Suspend before 
            calling this method.
            
            <p/>In SCORM 2004 Content: This method will process the postConditionRules for the current activity. This may result in another 
            activity becoming the current activity in the session. It may also result in not being able to identify 
            a current activity for the session.
            <p/>In SCORM 1.2 and LRM Content: This method will exit the current activity and make no effort to identify 
            another activity for delivery. 
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the state of the session, such as the 
            current sequencing rules, do not allow processing the 
            requested navigation.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.AbandonCurrentActivity">
            <summary>
            Stops the current activity by abandoning it without saving data and without further 
            processing of navigation rules.
            </summary>
            <remarks>
            
            <p/>Pending data model changes and other session changes that result from this method
            are not saved and should be persisted to long-term storage by calling 
            <Mth>CommitChanges</Mth> after this method and prior to disposing the object.
            
            <p/>In Scorm 2004 content: PostCondition rules are not run after the activity has been abandoned.
            Any current value of <Prp>NavigationRequest.ExitMode</Prp> of
            <Prp>LearningDataModel.NavigationRequest</Prp> will be ignored, and the 
            <Mth>AttemptStatus</Mth> of the attempt on the activity will be set to Abandonded.
            
            <p/>In Scorm 2004 content: Once this method is called, the current activity will no longer be active for this session. That is,
            <Prp>CurrentActivityIsActive</Prp> will be false. To continue
            the session, select an activity to attempt 
            using one of the <Mth>MoveToActivity</Mth> methods.
            <p/>In Scorm 1.2 and LRM content: Once this method is called, there will no longer be a 
            current activity in the session.
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if this method is called when 
            there is no current activity in 
            the session.</exception>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the state of the session, such as the 
            current sequencing rules, do not allow processing the 
            requested navigation.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.GetInputStream(System.String)">
            <summary>
            Gets a stream containing the input stream to the RloHandler. This contains the 'raw' file that will be processed
            to provide the output stream.
            </summary>
            <returns>The stream with the content from the package written to it.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ThrowIfCurrentActivityIsNull">
            <summary>
            Private helper function to throw an InvalidOperationException if there is no current activity.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ThrowIfCurrentActivityIsInactive">
            <summary>
            Private helper function to throw an InvalidOperationException if the current activity is not active.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LearningSession.ValidateRenderPath(System.String,System.String)">
            <summary>
            Validates that the requested path can be rendered. Throws the appropriate exception if the 
            request is not allowed.
            </summary>
            <param name="relativePath">The package-relative path that is being requested to render.</param>
            <param name="parameterName">The name of the parameter to include in any error message</param>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.View">
            <summary>
            Gets the view of the current session.
            </summary>
            <remarks>See the class definition for the meaning of the views. </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.TotalPoints">
            <summary>
            Gets a points value for the session. 
            </summary>
            <remarks>
            The value of this score is determined by the type of content that is being used in the 
            session. 
            <ul>
            <li>In SCORM 2004 content, this is the same value as the root activity primary objective's normalized measure. 
            As such, in this case, if the value is not null, it will be between -1 and 1 (inclusive).</li>
            <li>In SCORM 1.2 content, this is the sum of the raw score for the attempts on each activity in the session. 
            </li>
            <li>In LRM content, this is the sum of all LearningDataModel.EvaluationPoints for all activites in the session.</li>
            </ul>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.SuccessStatus">
            <summary>
            Gets success status for the session.
            </summary>
            <remarks>
            <para>
            This value is only valid in SCORM 2004 packages.  Other package formats
            will always return SuccessStatus.Unknown.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CompletionStatus">
            <summary>
            Gets or sets completion status for the session.
            </summary>
            <remarks>
            <para>
            This value is only valid in SCORM 2004 packages.  Other package formats
            will always return CompletionStatus.Unknown.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.IsExitValid">
            <summary>
            Gets a boolean indicating if the session is in a state in which the 
            <Mth>Exit</Mth> method may be called.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.IsSuspendValid">
            <summary>
            Gets a boolean indicating if the session is in a state in which
            the <Mth>Suspend</Mth> method may be called.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.IsReactivateValid">
            <summary>
            Returns true if it the session is in a state where <Mth>Reactivate</Mth> may be called.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.IsResumeValid">
            <summary>
            Gets a boolean indicating if the session is in a state in which
            the <Mth>Resume</Mth> method may be called.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.IsAbandonValid">
            <summary>
            Gets a boolean indicating if the session is in a state in which
            the <Mth>Abandon</Mth> method may be called.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.PackageFormat">
            <summary>
            Gets the format of the package being processed during this session.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.Title">
            <summary>
            Gets the title of the session. This is the title of the root activity in the session, if provided, otherwise,
            a default title is returned.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.ShowNext">
            <summary>
            Returns true if the associated user interface element indicating 'continue to next 
            activity' should be shown.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.ShowPrevious">
            <summary>
            Gets an indication if the user interface element indicating 'return to previous activity' should be shown.
            </summary>
            <returns>Returns true if the user interface element should be shown.
            </returns>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.ShowExit">
            <summary>
            Gets an indication if the user interface element indicating 'exit' should be shown. 
            </summary>
            <returns>Returns true if the user interface element indicating 'exit' should be shown. </returns>
            <remarks>If the exit option is visible, the application 
            determines the behavior when the exit action is triggered. It may opt to exit 
            the current activity or the session. 
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.ShowAbandon">
            <summary>
            Gets an indication if the user interface element to abandon the session should be shown. 
            </summary>
            <returns>Returns true if the user interface element to abandon the session should be shown. </returns>
            <remarks>If the abandon option is visible, the application 
            determines the behavior when the abandon action is triggered. It may opt to abandon
            the current activity or the session. 
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.ShowSave">
            <summary>
            Gets an indication if the user interface element to save the session should be shown. 
            </summary>
            <returns>Returns true if the user interface element to save the session should be shown.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.HasCurrentActivity">
            <summary>
            Determines if the session has a current activity. 
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityIsActive">
            <summary>
            Gets a value which indicates whether the session has a current activity that is active.
            Returns false if there is no current activity in the session.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityDataModel">
            <summary>
            Gets the data model associated with the current activity in the session. 
            </summary>
            <returns></returns>
            <remarks>
            <p/>Any changes made to the data model must be saved using the <Mth>CommitChanges</Mth> method.
            If <Mth>CommitChanges</Mth> is not called and the session is ended,
            changes to the data model will be lost.
            
            <p/>Initially retrieving the data model
            could be a long-running task involving database or package file parsing. Subsequent property
            accesses are fast.
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityResourceType">
            <summary>
            Gets the type of resource of the current activity.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityEntryPoint">
            <summary>
            Gets the launching point of the current activity. This may be an absolute Uri, which indicates
            the resource is not in the package, or a package-relative Uri.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityResourceXmlBase">
            <summary>
            Gets the xmlbase information for the resource of the currect activity. This uri will be the base uri for any references
            contained in that resource to other files in the package. The value may be a package-relative or absolute Uri.
            If the resource does not have an xmlbase value, this property returns null.
            </summary>
            <remarks>
            For instance, if a package contains a resource that has the following resources node:
            
            &lt;resources xml:base="TestPackageContent/"&gt;
            &lt;resource identifier="base1_htm" href="Base1.htm" type="webcontent" adlcp:scormType="sco"&gt;
                &lt;file href="Base1.htm"&gt;&lt;/file&gt;
            &lt;/resource&gt;
            &lt;/resources&gt;
            
            then the return value of this property would be a uri containing the relative path "TestPackageContent/". This would 
            indicate that, for instance, the file Base1.htm exists in a package subdirectory named TestPackageContent.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityKey">
            <summary>
            Gets the identifier of the current activity, as provided in the manifest. This is unique per session.
            </summary>
            <remarks>
            <p/>When possible, use <Prp>CurrentActivityId</Prp> to refer to activities, as it will afford better 
            performance.
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityId">
            <summary>
            Gets the unique identifier of the current activity. It is unique for all activities in the 
            persisted storage location. 
            </summary>
            <remarks>
            <p/>When possible, use this activity identifier (rather than <Prp>CurrentActivityKey</Prp>) to access 
            activity information, as it will provide better performance.
            
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityResourceParameters">
            <summary>
            Gets the parameter string to provide to the resource in the activity when the resource is being 
            rendered. An empty string is returned if the value does not exist.
            </summary>
            <remarks>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.CurrentActivityResourceKey">
            <summary>
            Gets the identifier of the resource associated with the current activity. 
            The key is derived from the resource identifier in the manifest. It is unique per session.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if there is no current activity in 
            the session.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.LearningSession.Navigator">
            <summary>
             Return the navigator for this session.
            </summary>
            <remarks>It may seem odd that this is internal, not protected. 
            Basically, since Navigator is an internal class, it cannot be returned
            from a property that is protected. The same reason is actually why this 
            property is here at all -- a protected member variable containing an 
            internal type is not allowed by the compiler.</remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.InvalidFormDataException">
            <summary>
            Exception thrown when invalid data is detected in posted data.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidFormDataException.#ctor">
            <summary>
            Initializes a new instance of the <Typ>InvalidFormDataException</Typ> class.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidFormDataException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <Typ>InvalidFormDataException</Typ> class.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidFormDataException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <Typ>InvalidFormDataException</Typ> class.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidFormDataException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <Typ>InvalidFormDataException</Typ> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.SessionView">
            <summary>
            The view of a session. 
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SessionView.Execute">
            <summary>
            The view to allow a learner to attempt a root activity in a package.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SessionView.RandomAccess">
            <summary>
            The view to access and edit every node in the activity tree associated with this
            session. 
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SessionView.Review">
            <summary>
            A read-only view on a previously executed attempt.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RenderContext">
            <summary>
            Represents a context within which to render a session file.
            </summary>
            <remarks>
            This class provides minimal validation when properties are set on it. 
            An instance of the RenderContext class is passed to a LearningSession object when 
            <c>LearningSession.Render</c> is called. When the <c>Render</c> method is called, then the values
            in <c>RenderContext</c> are validated as required at the time the request is made to render and may 
            result in an exception at that time. 
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.RenderContext.#ctor">
            <summary>
            Constructor. Create a RenderContext in order to display content of a LearningSession.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RenderContext.#ctor(System.String)">
            <summary>
            Constructor. Create a RenderContext with the minimum information required. 
            </summary>
            <param name="relativePath">The relative path to the content to be rendered.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RenderContext.#ctor(System.String,System.Web.HttpResponse)">
            <summary>
            Constructor. Create a RenderContext that renders session content to an HTTP response.
            </summary>
            <param name="relativePath">The path relative to the root of the session package of the content to be rendered.</param>
            <param name="response">The response to which the content information will be written.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RenderContext.ValidatePropertyNotEmpty(System.String)">
            <summary>
            Throws approrpriate exception if trimmed string is null or empty.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RenderContext.ValidatePropertyNotNull(System.Object)">
            <summary>
            Throws approrpriate exception if value is null.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.RelativePath">
            <summary>
            Gets and sets the package-relative path of the requested file to render. 
            </summary>
            <remarks>
            The value may not be set to null or an empty string.
            <p>
            This value must be relative to either:
            <ol>
            <li>The root of the package.</li>
            <li>The <Prp>EmbeddedUIResourcePath</Prp> for dynamically rendered content.</li>
            </ol>
            the <Prp>EmbeddedUIResourcePath</Prp>.
            </p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.EmbeddedUIResourcePath">
            <summary>
            Gets and sets the path to the folder containing resources for UI elements contained in the 
            dynamically generated content. This is not a path to a file within the content, but rather a path outside the package
            to resources that are part of the Microsoft Learning Components installation and 
            required to render dynamic views of the content such as LRM content.
            </summary>
            <remarks>
            <p>This property is ignored by <c>LearningSession.Render</c> unless <c>LearningSession.CurrentActivityResourceType</c> is 
            ResourceType.Lrm.</p>
            <p>The value may not be set to null.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.OutputStream">
            <summary>
            Gets and sets the stream to when a file will be rendered. This does not need to be 
            set if <Prp>Response</Prp> has been set.
            </summary>
            <remarks>
            <p>The value may not be set to null.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.Response">
            <summary>
            Gets the response associated with this context.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.MimeType">
            <summary>
            Gets the mime type of the content written to the output stream.
            </summary>
            <remarks>The value is determined by the <Prp>MimeTypeMapping</Prp>. If that collection does 
            not provide an appropriate mapping, a default is returned.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.MimeTypeMapping">
            <summary>
            Gets the mapping between file name extension and mime type. The key is the file name extension 
            (including the initial period), 
            the value is the mime type mapped to that extension.
            </summary>
            <remarks>
            <p>Entries in the collection are culture-sensitive and case-insensitive.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.IisCompatibilityModeExtensions">
            <summary>
            The collection of extensions for which files will be transmitted in a way that is most 
            compatible with the method used in IIS. This is slower than the normal process of rendering 
            files, but can be used for cases where specific file types do not render correctly.
            </summary>
            <remarks>Entries in this list should contain the period prior to the extension. E.g., ".txt". </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.FormHiddenControls">
            <summary>
            Gets a list of hidden controls to be added in the rendered form. The key in the collection is the 
            control id, the value is the value of the control. If a form is not rendered, this value is ignored.
            </summary>
            <remarks>
            The key and value in this collection should be provided in plain text. That is, they should not be html encoded.
            <p>Entries in the collection are culture-sensitive and case-sensitive.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.Script">
            <summary>
            Gets or sets Represents JScript source code, i.e. a series of Unicode characters
            intended to be written into a &lt;script&gt;...&lt;/script&gt; block of
            a rendered HTML file. The script will be placed in such a way that it is run immediately following the page load.
            </summary>
            <remarks>
            
            This script will only be added to pages rendered dynamically as LRM content. Pages that are contained within packages that 
            do not have <c>LearningSession.CurrentActivityResourceType</c> of <c>ResourceType.Lrm</c> will ignore this value.
            
            <p>The value may not be set to null or an empty string.</p>
            <p>If the value has not been initialized, null is returned when the property get accessor is called.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.ShowCorrectAnswers">
            <summary>
            Get and sets a value indicating whether correct answers should be 
            displayed in the content, if possible. Regardless of this value, answers may only be shown if 
            it is supported in the current activity format for the current <c>LearningSession.View</c>.
            If not set, answers will not be shown. 
            </summary>
            <remarks>
            This setting only affects content which is dynamically rendered, such as Lrm content, and only
            in Review and Grading views. In other views and content formats, the setting is ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RenderContext.ShowReviewerInformation">
            <summary>
            Gets and sets a value indicating whether sections of the content intended for a reviewer of a session
            (and not the learner)
            should be displayed in the rendered content. 
            If not set, reviewer information will not be shown. 
            </summary>
            <remarks>
            This setting only affects content which is dynamically rendered, such as Lrm content, and only
            in Review and Grading views. In other views and content formats, the setting is ignored.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.ReactivateSettings">
            <summary>
            Settings to determine behavior of the session when it is reactivated.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ReactivateSettings.None">
            <summary>
            Reactivate the session without modifying <c>LearningDataModel</c> values.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ReactivateSettings.ResetEvaluationPoints">
            <summary>
            When the session is reactivated, reinitialize the <c>LearningDataModel</c> Interaction
            Evaluation points.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ReactivateSettings.ResetEvaluationComments">
            <summary>
            When the session is reactivated, reinitialize the <c>LearningDataModel</c> Interaction
            Evaluation comments.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ReactivateSettings.ResetAll">
            <summary>
            When the session is reactivated, reinitialize all the <c>LearningDataModel</c> Interaction
            information.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ConversionResult">
            <summary>
            Holds the results of a conversion from Class Server Index.xml to a SCORM compatible
            manifest.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ConversionResult.#ctor(System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructor.
            </summary>
            <param name="manifest"><Typ>XPathNavigator</Typ> pointing to the manifest node of the
            SCORM compatible manifest generated from the index.xml of a Learning Resource.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ConversionResult.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor.
            </summary>
            <param name="manifest"><Typ>XPathNavigator</Typ> pointing to the manifest node of the
            SCORM compatible manifest generated from the index.xml of a Learning Resource.</param>
            <param name="log">Error/warning log containing errors and warnings generated while
            parsing the index.xml of the Learning Resource.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ConversionResult.Log">
            <summary>
            Error/warning log containing errors and warnings generated while
            parsing the index.xml of the Learning Resource.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ConversionResult.Manifest">
            <summary>
            <Typ>XPathNavigator</Typ> pointing to the manifest node of the
            SCORM compatible manifest generated from the index.xml of a Learning Resource.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter">
            <summary>
            Converts from a stream containing an Index.xml LRM file to an XmlDocument containing a &lt;manifest&gt; node
            of an imsmanifest.xml file.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Manifest.ManifestConverter.EmptyManifestTemplate">
            <summary>
            Provides a template to begin an empty SCORM 1.2 manifest.
            {0} = manifest identifier - should be a GUID with no punctuation.
            {1} is the entire indexXml, not including the xml header.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.#ctor(System.Xml.XPath.XPathNavigator,System.Collections.Generic.IEnumerable{System.String},Microsoft.LearningComponents.ValidationResults,System.Boolean,Microsoft.LearningComponents.ValidationBehavior)">
            <summary>
            Constructor.
            </summary>
            <param name="root"></param>
            <param name="filePaths"></param>
            <param name="log"></param>
            <param name="fixLrmViolations"></param>
            <param name="lrmValidationBehavior"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ConvertFromIndexXml">
            <summary>
            Returns an <Typ>XPathNavigator</Typ> pointing to the root of an XML document of a SCORM compatible manifest.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.AddManifestMetadata(System.Xml.XPath.XPathNavigator)">
            <summary>
            Adds metadata information to the manifest.
            </summary>
            <param name="rootNav"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ConvertFromIndexXml(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Converts from a stream containing an Index.xml LRM file to an XmlDocument containing a &lt;manifest&gt; node
            of an imsmanifest.xml file.
            </summary>
            <param name="indexXml">Learning Resource index xml, obtained from the index.xml file inside of a
            Learning Resource.</param>
            <param name="filePaths">List of file in the package.  In general, this list should only contain file paths
            that are under the root of the package.  However, no check is made for this case.</param>
            <remarks>The <paramref name="indexXml"/> must contain a valid Learning Resource index.  Invalid content
            will cause exceptions.</remarks>
            <returns>
            A <Typ>ConversionResult</Typ> containing the <Typ>XPathNavigator</Typ> pointing to the root of an XML document 
            of a SCORM compatible manifest and a <Typ>ValidationResults</Typ> log.
            </returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ConvertFromIndexXml(System.IO.Stream,System.Collections.Generic.IEnumerable{System.String},System.Boolean,Microsoft.LearningComponents.ValidationBehavior)">
            <summary>
            Converts from index.xml to xpathnavigator, allowing the caller to indicate how the conversion takes place. Currently, this is used 
            for the package import process.
            </summary>
            <param name="indexXml">Learning Resource index xml, obtained from the index.xml file inside of a
            Learning Resource.</param>
            <param name="filePaths">List of file in the package.  In general, this list should only contain file paths
            that are under the root of the package.  However, no check is made for this case.</param>
            <param name="fixLrmViolations">true to use defaults when LRM violations occur in the index.xml.  Otherwise
            an <Typ>InvalidPackageException</Typ> will be thrown.</param>
            <param name="lrmValidationBehavior">Whether to log LRM violations as errors or warnings, not to log, or always
            throw <Typ>InvalidPackageException</Typ> regardless of the value of <paramref name="fixLrmViolations"/>.d</param>
            <returns>
            A <Typ>ConversionResult</Typ> containing the <Typ>XPathNavigator</Typ> pointing to the root of an XML document 
            of a SCORM compatible manifest and a <Typ>ValidationResults</Typ> log.
            </returns>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.EmptyManifest">
            <summary>
            Returns the starting template manifest.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler">
            <summary>
            Handles violations according to the values for ValidationBehavior and FixLmsViolations.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.#ctor(Microsoft.LearningComponents.ValidationBehavior,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor.
            </summary>
            <param name="behavior">Desired validation behavior. See <Typ>ValidationBehavior</Typ>.</param>
            <param name="fixLmsViolations">true to fix bad content in the index.xml when possible.</param>
            <param name="log">Log in which to log warnings and errors when <c>ValidationBehavior.LogWarning</c>
            or <c>ValidationBehavior.LogError</c> is chosen.</param>
            <exception cref="T:System.ArgumentException"><paramref name="log"/> is null and <c>ValidationBehavior.LogWarning</c>
            or <c>ValidationBehavior.LogError</c> was chosen for <paramref name="behavior"/>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.Log(System.String)">
            <summary>
            Adds a message to m_log according to m_behavior.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.HandleDefaultNodeValue(System.String,System.String)">
            <summary>
            Checks the current <Typ>ValidationBehavior</Typ> and whether <c>fixLmsViolations</c> is set to determine 
            whether to return the default value or throw an exception.
            </summary>
            <param name="defaultValue"></param>
            <param name="nodeName"></param>
            <returns>The value of <paramref name="defaultValue"/> if <c>fixLmsViolations</c> was set to <c>true</c> in
            the constructor of the <Typ>ViolationHandler</Typ>.</returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <c>fixLmsViolations</c> was set to <c>false</c> in
            the constructor of the <Typ>ViolationHandler</Typ>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.HandleDefaultAttributeValue(System.String,System.String,System.String)">
            <summary>
            Checks the current <Typ>ValidationBehavior</Typ> and whether <c>fixLmsViolations</c> is set to determine 
            whether to return the default value or throw an exception.
            </summary>
            <param name="defaultValue"></param>
            <param name="nodeName"></param>
            <param name="attributeName"></param>
            <returns>The value of <paramref name="defaultValue"/> if <c>fixLmsViolations</c> was set to <c>true</c> in
            the constructor of the <Typ>ViolationHandler</Typ>.</returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <c>fixLmsViolations</c> was set to <c>false</c> in
            the constructor of the <Typ>ViolationHandler</Typ>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.HandleTruncation(System.Int32,System.String,System.String,System.String)">
            <summary>
            Handles truncating node values according to LR rules and validation behavior.  (E.g. m_fixViolations
            and m_behavior.)
            </summary>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="value">String to check for length.  May not be null.</param>
            <param name="nodeName"></param>
            <param name="attributeName">If null, this is a node value.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.GenericViolation(System.String)">
            <summary>
            Either throws an <Typ>InvalidPackageException</Typ>, issues a warning or error to the log, or does
            nothing, depending on the chosen <Typ>ValidationBehavior</Typ>.
            </summary>
            <param name="text">Message to put into the exception or log entry.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.ChildNodeInNamespaceNotFound(System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructs a "child in the correct namespace not found" message.
            </summary>
            <param name="nodeName">Child node name.</param>
            <param name="parentNode">Parent node.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.RequiredNodeMissing(System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructs a "required node missing" message and then calls <Mth>GenericViolation</Mth>.
            </summary>
            <param name="nodeName">Missing node name.</param>
            <param name="parentNode">Parent that should contain the missing node.</param>
            <exception cref="T:Microsoft.LearningComponents.LearningComponentsInternalException">If <paramref name="parentNode"/> is null.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.InvalidDuplicateNodes(System.String,System.Xml.XPath.XPathNavigator)">
            <summary>
            Constructs an "invalid duplicate nodes" message and then calls <Mth>GenericViolation</Mth>.
            </summary>
            <param name="nodeName">Duplicated node name.</param>
            <param name="parentNode">Parent that contains the duplicate nodes.</param>
            <exception cref="T:Microsoft.LearningComponents.LearningComponentsInternalException">If <paramref name="parentNode"/> is null.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler.FixViolations">
            <summary>
            Returns the value of "fixLrmViolations".
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser">
            <summary>
            Parses index.xml files
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler)">
            <summary>
            Ensures that the root node is LearningResource, and sets the m_LearningResource variable to it.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheRequiredChildNoDuplicates(System.String,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNodeIterator@)">
            <summary>
            Find the requested child node.  Handle error conditions when there are duplicate child nodes of the same name.
            </summary>
            <param name="childName"></param>
            <param name="nav"></param>
            <param name="itr"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.SelectChildren(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Helper method that calls the <Typ>XPathNavigator</Typ>'s SelectChildren method using the XmlnsLearningResource
            namespace.  If no children are found, and fixLrmViolations is "true" (and ValidationBehavior is not "Enforce"),
            it logs this fact and finds any children with the given name, but in any namespace.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheChildNoDuplicates(System.String,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNodeIterator@,System.Boolean)">
            <summary>
            Find the requested child node.  Handle error conditions when there are duplicate child nodes of the same name.
            </summary>
            <param name="childName"></param>
            <param name="nav"></param>
            <param name="itr"></param>
            <param name="required"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheRequiredStringNoDuplicates(System.String,System.Xml.XPath.XPathNavigator,System.Int32,System.String,System.String@)">
            <summary>
            Returns the requested node's value, handling error condition if there are duplicate nodes of the same name.
            </summary>
            <param name="childName"></param>
            <param name="nav"></param>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="defaultValue"></param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheOptionalStringNoDuplicates(System.String,System.Xml.XPath.XPathNavigator,System.Int32,System.String,System.String@)">
            <summary>
            Returns the requested node's value, handling error condition if there are duplicate nodes of the same name.
            </summary>
            <param name="childName"></param>
            <param name="nav"></param>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="defaultValue"></param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheStringAttribute(System.String,System.String,System.String,System.Xml.XPath.XPathNavigator,System.Int32,System.String,System.String@)">
            <summary>
            Returns the requested attribute value.
            </summary>
            <param name="nodeName"></param>
            <param name="attributeName"></param>
            <param name="attributeNamespace"></param>
            <param name="nav"></param>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="defaultValue"></param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheOptionalStringAttribute(System.String,System.String,System.String,System.Xml.XPath.XPathNavigator,System.Int32,System.String,System.String@)">
            <summary>
            Returns the requested optional attribute value.
            </summary>
            <param name="nodeName"></param>
            <param name="attributeName"></param>
            <param name="attributeNamespace"></param>
            <param name="nav"></param>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="defaultValue"></param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheStringAttribute(System.String,System.String,System.String,System.Xml.XPath.XPathNavigator,System.Int32,System.String,System.String@,Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.ValidateStringDelegate)">
            <summary>
            Returns the requested attribute value.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.CacheOptionalStringAttribute(System.String,System.String,System.String,System.Xml.XPath.XPathNavigator,System.Int32,System.String,System.String@,Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.ValidateStringDelegate)">
            <summary>
            Returns the requested attribute value.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.FullXml">
            <summary>
            Get the full xml of the index.xml.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.LearningResource">
            <summary>
            Points to the &lt;LearningResource&gt; node.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.RequiresLicense">
            <summary>
            Returns true if there are any &lt;License&gt; nodes.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PointsPossible">
            <summary>
            Returns the LearningResourceData/PointsPossible.
            </summary>
            <remarks>Default value is <c>String.Empty</c>.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The <c>&lt;PointsPossible&gt;</c> node contains a non-float number
            or is less than 0, or is greater than 10000, and
            <c>fixLrmViolations</c> was set to <c>false</c> in the <Typ>ManifestConverter</Typ> constructor.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PackageDescription">
            <summary>
            Points to the &lt;PackageDescription&gt; node.  Returns null if there is no such node in the index.xml.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.General">
            <summary>
            Points to the &lt;General&gt; node.  Returns null if there is no such node in the index.xml.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.LearningResourceData">
            <summary>
            Points to the &lt;LearningResourceData&gt; node.  Returns null if there is no such node in the index.xml.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Organization">
            <summary>
            Points to the &lt;Organization&gt; node.  Returns null if there is no such node in the index.xml.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.TableOfContents">
            <summary>
            Points to the &lt;TableOfContents&gt; node.  Returns null if there is no such node in the index.xml.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Language">
            <summary>
            Returns the PackageDescription\General\Language.
            </summary>
            <remarks>Default value is <c>String.Empty</c>.  Max length is 5.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The <c>&lt;Language&gt;</c> node is missing and 
            <c>fixLrmViolations</c> was set to <c>false</c> in the <Typ>ManifestConverter</Typ> constructor.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Title">
            <summary>
            Returns the PackageDescription\General\Title.
            </summary>
            <remarks>Default value is <c>String.Empty</c>.  Max length is 255.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The <c>&lt;Title&gt;</c> node is missing and 
            <c>fixLrmViolations</c> was set to <c>false</c> in the <Typ>ManifestConverter</Typ> constructor.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Description">
            <summary>
            Returns PackageDescription\General\Description
            </summary>
            <remarks>Default value is <c>String.Empty</c>.  Max length is 1024.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Instructions">
            <summary>
            Returns PackageDescription\General\LearningResourceData\Instructions
            </summary>
            <remarks>Default value is <c>String.Empty</c>.  Max length is 4096.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Version">
            <summary>
            Returns LearningResource.Version attribute.
            </summary>
            <remarks>Default value is "3.0".  The only legal values are "1.0", "2.0", and "3.0".</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Pages">
            <summary>
            Returns the LearningResource\Organization\TableOfContents\Page nodes.  This property returns a <Typ>PageIterator</Typ>
            that has not yet had <Mth>MoveNext</Mth> called on it.  The caller of this property should hold a local copy and
            call <Mth>MoveNext</Mth> on it rather than calling the property multiple times.
            </summary>
            <remarks>
            No validation is done on the Page nodes.  The caller should validate the attributes are correct.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page">
            <summary>
            Represents the PackageDescription\General\LearningResource\Page node.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser)">
            <summary>
            Constructor.
            </summary>
            <param name="nav">Points to Page node.</param>
            <param name="parser"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.ContainsAttribute(System.String)">
            <summary>
            Check if the Page node contains the requested attribute.
            </summary>
            <param name="localName"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.CacheStringAttribute(System.String,System.Int32,System.String@,Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.ValidateStringDelegate)">
            <summary>
            Cache the string value of the requested attribute, with a callback delegate for further checking.
            </summary>
            <param name="attributeName"></param>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="cache"></param>
            <param name="validateStringDelegate">Callback method to do extra checking.  May not be null.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.CacheStringAttribute(System.String,System.Int32,System.String@)">
            <summary>
            Cache the string value of the requested attribute.
            </summary>
            <param name="attributeName"></param>
            <param name="maxLength">Max string length to return.  Errors are logged if the string length is
            greater.  0 for any length.</param>
            <param name="cache"></param>
            <returns></returns>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.PageID">
            <summary>
            Returns the PageID attribute value of the Page node.
            </summary>
            <remarks>
            May be an integer from 1 to 1999999998.  Default value is String.Empty, in which case the caller
            should ignore the entire Page node.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.ResourceId">
            <summary>
            Returns an identifier to be used for a resource node associated with this page.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.ItemId">
            <summary>
            Returns an identifier to be used for an item node associated with this page.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.Title">
            <summary>
            Returns the Title attribute value of the Page node.
            </summary>
            <remarks>
            Default value is <c>String.Empty</c>.  Max length is 200.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.Href">
            <summary>
            Returns the href attribute value of the Page node, or "Page.htm" if there is none.
            </summary>
            <remarks>All backward slashes are converted to forward slashes.  Because remote
            content is not supported, throws <Typ>InvalidPackageException</Typ> if the href
            is absolute.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.ImsId">
            <summary>
            Returns the ImsId attribute value of the Page node.
            </summary>
            <remarks>This is <c>String.Empty</c> for non-IMS pages.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.Subdirectory">
            <summary>
            Returns the name of the directory containing the files for this page.  Note that there is no
            trailing slash.
            </summary>
            <remarks>
            For Class Server pages, this returns "P" + PageID.  For IMS pages, this returns the path component
            of the href attribute.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.Key">
            <summary>
            Returns a key to use as an identifier in a list of resource nodes.
            </summary>
            <remarks>For Class Server pages returns Subdirectory.  For IMS pages returns the PageID.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.XmlBase">
            <summary>
            Returns a value for the xml:base of a resource node for this page.
            </summary>
            <remarks>
            If this is a SCO, this always returns String.Empty for xml:base.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.Page.IsSco">
            <summary>
            Returns true if this is a sco or false if not.  It is a sco if there is an ImsID attribute value.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator">
            <summary>
            Holds the list of Page nodes.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.#ctor(System.Xml.XPath.XPathNodeIterator,Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser)">
            <summary>
            Constructor.
            </summary>
            <param name="itr">Holds the list of Page nodes.</param>
            <param name="parser"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.Clone">
            <summary>
            Clone the PageIterator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.MoveNext">
            <summary>
            Moves to the next page.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.Count">
            <summary>
            Returns a count of the Pages.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.Current">
            <summary>
            Returns the current Page navigator.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.CurrentPage">
            <summary>
            Returns the current Page.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator.CurrentPosition">
            <summary>
            Returns the index of the current Page.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode">
            <summary>
            Helper class to generate the resource nodes.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.#ctor(Microsoft.LearningComponents.Manifest.ManifestConverter.IndexParser.PageIterator,System.Collections.Generic.List{System.String},Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="pages"></param>
            <param name="filePaths"></param>
            <param name="violationHandler"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.CreateResourceNode(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Create a resource node.
            </summary>
            <param name="id"></param>
            <param name="href"></param>
            <param name="xmlBase"></param>
            <param name="isSco"></param>
            <param name="isLrm"></param>
            <param name="isWebContent"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.CreateNavigator">
            <summary>
            Returns a navigator pointing to the resources node.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.AddFileNode(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Add a file node to a resource.
            </summary>
            <param name="nav"></param>
            <param name="href"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.SubdirectoryList">
            <summary>
            Given a list of file paths, organizes them into lists of file paths inside the top level subdirectory
            of each file path in the original list.
            </summary>
            <remarks>
            E.g. given "sub1\file1", "sub2\file2", "sub1\sub\file3", two lists would be generated: "sub1" containing "file1"
            and "sub\file3", and "sub2" containing "file2".
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.SubdirectoryList.AddToList(System.String,System.String)">
            <summary>
            Add a file to the list of subdirectories under the requested key, which is usually the name of the
            subdirectory.
            </summary>
            <param name="key">Uniquely identifies a subdirectory.</param>
            <param name="value">Name of the file.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestConverter.ResourcesNode.SubdirectoryList.#ctor(System.Collections.Generic.IEnumerable{System.String},Microsoft.LearningComponents.Manifest.ManifestConverter.ViolationHandler)">
            <summary>
            Constructor.
            </summary>
            <param name="filePaths">List of file paths, relative to the package root.</param>
            <param name="violationHandler">May not be null.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestConverter.Strings">
            <summary>
            String constants.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.LrmRloHandler">
            <summary>
            Class that represents an handler for LRM content.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RloHandler">
            <summary>
            RloHandler represents the RLO that may be involved in rendering and processing the current 
            LearningSession. 
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.RloHandler.ProcessFormData(Microsoft.LearningComponents.RloProcessFormDataContext,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Requests the RloHandler to process information received from the client.
            </summary>
            <param name="context">The context within which to process the form data.</param>
            <param name="formData">The data to process.</param>
            <param name="files">File collection from the <Typ>HttpRequest</Typ>.  E.g. <c>HttpRequest.Files</c>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloHandler.Render(Microsoft.LearningComponents.RloRenderContext)">
            <summary>
            Requests the RloHandler to modify the <c>RloHandlerContext.InputStream</c> and render the requested 
            view to the <c>RloHandlerContext.OuputStream</c>
            </summary>
            <param name="context">The context within which to render the content.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloHandler.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the RloHandler to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloHandler.Reactivate(Microsoft.LearningComponents.RloReactivateContext)">
            <summary>
            Requests the RloHandler to process a reactivation request and clear the appropriate data 
            values from the data model. The request may only be issued when the session is in RandomAccess 
            view and is not active -- it is either Completed or Abandoned.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.ProcessFormData(Microsoft.LearningComponents.RloProcessFormDataContext,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Process data returned from a form generated by an instance of this class. Also sets the data model's
            evaluation points field to the total points, computed from the autograding or teacher grading.
            </summary>
            <param name="context">
            The context within which to process the form data. </param>
            <param name="formData">The collection of information from the form that should be processed.</param>
            <param name="files">Collection of valid files, posted from the request. This may be a subset of the files 
            included in the request, as some posted files may have been removed by the application as invalid.</param>
            <remarks>
            <p>Data that does not correspond to expected information is ignored.</p>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">Thrown if posted data contains invalid data.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.IsAITag(Microsoft.LearningComponents.HtmlTextReader,System.Int32@)">
            <summary>
            Returns true if the reader is positioned on an assessment item IMG tag and sets srcIndex to the index of the
            src attribute.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.EncodePattern(System.String)">
            <summary>
            Encodes text to be included in a [,] separated list in a correct response pattern.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.DecodePattern(System.String)">
            <summary>
            Decodes text that was included in a [,] separated list in a correct response pattern.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.SplitPattern(System.String)">
            <summary>
            Splits a pattern containing "[,]" substrings into a string array.
            </summary>
            <param name="pattern"></param>
            <returns>Substrings split on the "[,]" substring.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.Render(Microsoft.LearningComponents.RloRenderContext)">
            <summary>
            Render the requested view into the output stream.
            </summary>
            <param name="context">The context within which to render the page.</param>
            <remarks>
            When this method returns the <paramref name="context"/> OutputStream will contain 
            the rendered file.
            <p>
            The following methods and properties must be return valid values from 
            the <paramref name="context"/>:
            <ul>
            <li>EmbeddedUiResourcePath, must be non-null</li>
            <li>FormElementId</li>
            <li>GetInputStream</li>
            <li>OutputStream</li>
            <li>View</li>
            </ul>
            </p>
            <p>
            Additionally, if the following properties are set, they will be used:
            <ul>
            <li>FormElementAction</li>
            <li>HiddenControls</li>
            <li>ScriptToRender</li>
            </ul>
            </p>
            All other properties on <paramref name="context"/> are ignored.
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">The requested file attachment can't be found.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.RenderFileAttachment(Microsoft.LearningComponents.RloRenderContext,System.String)">
            <summary>
            Render a file attachment.  File attachments will have a relativePath of the form:
            .../~RLO/&lt;interactionId&gt;/&lt;attachmentIndex&gt;
            </summary>
            <param name="context"></param>
            <param name="attachmentInfo">The portion of the path to the file after the "/~RLO" portion.</param>
            <exception cref="T:System.IO.FileNotFoundException">The requested file attachment can't be found.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.FileAttachmentExtensionKey(System.String)">
            <summary>
            Given the file attachment key, return the file attachment extension key to retrieve the file
            attachment extension from the interaction's extension data.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.FileAttachmentKey(System.String)">
            <summary>
            Returns the file attachment key to use in an interaction's extension data to retrieve the
            byte array file attachment.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.HandleNode(Microsoft.LearningComponents.HtmlTextReader,System.IO.StreamWriter)">
            <summary>
            Output the current node, or the changes required to the current node by the rendering code, to the writer.
            &lt;img&gt; nodes representing assessment items are handled elsewhere.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.IsBgColorFF99CB(Microsoft.LearningComponents.HtmlTextReader)">
            <summary>
            Returns true if the reader is positioned on a node that has a bgColor="#ff99cb" attribute.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.WriteFormHiddenControls(System.IO.StreamWriter,Microsoft.LearningComponents.ReadOnlyDictionary{System.String,System.String})">
            <summary>
            Write out the hidden controls from the context.  hiddenControls is a dictionary where the key is the id of the
            control and the value is the value of the control, both are plain text and not Html.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.IsNamed(Microsoft.LearningComponents.HtmlTextReader,System.String)">
            <summary>
            Returns "true" if the reader's node is named the supplied name, case-insensitive.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.GetPageHasBeenVisited(Microsoft.LearningComponents.DataModel.LearningDataModel)">
            <summary>
            Determine from data model if the page has been visited by learner yet
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.SetPageHasBeenVisited(Microsoft.LearningComponents.DataModel.LearningDataModel)">
            <summary>
            Remember that the page has been visited.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.GetPageHasBeenAutograded(Microsoft.LearningComponents.DataModel.LearningDataModel)">
            <summary>
            Determine from data model if the page has been autograded.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.SetPageHasBeenAutograded(Microsoft.LearningComponents.DataModel.LearningDataModel)">
            <summary>
            Remember that the page has been autograded.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Requests the RloHandler to do whatever is required to exit from the current activity.
            This request may only be issued when the session is in Execute view and is not active -- it is 
            either Completed or Abandoned.
            </summary>
            <param name="context">The context within which the command is processed</param>
            <remarks>
            This method should only be called for the <c>SessionView.Execute</c> view.  However,
            no checks are done internally to verify this - if this is called with other views,
            unexpected results will occur.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmRloHandler.Reactivate(Microsoft.LearningComponents.RloReactivateContext)">
            <summary>
            Requests the RloHandler to process a reactivation request and clear the appropriate data 
            values from the data model. The request may only be issued when the session is in RandomAccess 
            view and is not active -- it is either Completed or Abandoned.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestReaderSettings">
            <summary>
            Settings used by the Manifest Reader classes to determine how to handle erroneous data in the manifest.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReaderSettings.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor.
            </summary>
            <param name="fixScormRequirementViolations">
            If <c>true</c>, when a SCORM requirement is violated when reading an element or attribute value from the 
            manifest, substitute a default value.  If <c>false</c>, throw an exception.
            </param>
            <param name="fixMlcRequirementViolations">
            If <c>true</c>, if a string value's length is greater than the maximum length allowed by the database, 
            truncate the string to that maximum.  If <c>false</c>, throw an exception.
            </param>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReaderSettings.FixScormRequirementViolations">
            <summary>
            If <c>true</c>, when a SCORM requirement is violated when reading an element or attribute value from the 
            manifest, substitute a default value.  If <c>false</c>, throw an exception.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReaderSettings.FixMlcRequirementViolations">
            <summary>
            If <c>true</c>, if a string value's length is greater than the maximum length allowed by the database, 
            truncate the string to that maximum.  If <c>false</c>, throw an exception.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InitManifestNode(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Initializes this helper to point to a manifest node in the SCORM 2004 or SCORM 1.2 namespace.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InitImscpNode(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults,System.String)">
            <summary>
            Initializes this helper to point to a node in the SCORM 2004 or SCORM 1.2 IMSCP namespace.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InitImsssNode(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults,System.String)">
            <summary>
            Initializes this helper to point to a node in the SCORM 2004 IMSSS namespace.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InitImsssNode(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Initializes this helper to point to a node in the SCORM 2004 IMSSS namespace.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CreateManifestHelper(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Create method. Throws non-internal exceptions.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="readerSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="node"/> is null. The parameter name thrown is not "node",
            however.  Instead, it is the string value of <paramref name="localName"/> + "Node".  E.g. the <Typ>ManifestReader</Typ>
            class constructor would call this, and the throw would have the parameter name "manifestNode". </exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="node"/> does not point to the expected node.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InternalCreateImscp(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults,System.String)">
            <summary>
            Create method for nodes in the Imscp namespace. Throws internal exceptions only.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="readerSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <param name="localName">The <c>localName</c> that should be on the node contained in <paramref name="node"/>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InternalCreateImsss(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults,System.String)">
            <summary>
            Create method for nodes in the Imsss namespace. Throws internal exceptions only.
            </summary>
            <param name="node">The node to parse.</param>
            <param name="readerSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <param name="localName">The <c>localName</c> that should be on the node contained in <paramref name="node"/>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.InternalNoNameCheckCreateImsss(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Create method for nodes in the Imsss namespace, but don't validate against the localName. 
            Throws internal exceptions only. Does not check that the node's name is in the correct name/namespace.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.ReplaceCarriageReturns(System.String)">
            <summary>
            Replace a string containing \r characters with \r\n.
            </summary>
            <remarks>
            Will not replace \r\n with \r\n\n.
            </remarks>
            <param name="value">Original string.</param>
            <returns>Fixed string.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Manifest.Helper.m_manifestVersion">
            <summary>
            Identifies if the manifest is SCORM 2004 (e.g. v1p3) or SCORM 1.2 (e.g. v1p2).
            </summary>
            <remarks>Defaults to <c>ScormVersion.v1p3</c></remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CombinePaths(System.Uri,System.String)">
            <summary>
            Combines the path with an absolute or relative path, and converts backward slashes to forward slashes.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CombineXmlBaseAttribute(System.Uri,System.Xml.XPath.XPathNavigator)">
            <summary>
            Combines the xml:base attribute on the root node of <paramref name="node"/> with the <paramref name="xmlBase"/>.
            </summary>
            <param name="xmlBase">xml:base to combine with the attribute.  Null if none.</param>
            <returns>Combined xml:base.  Null if there is no xml:base attribute and <paramref name="xmlBase"/> is null.
            If there is no xml:base attribute but <paramref name="xmlBase"/> is non-null, returns
            <paramref name="xmlBase"/>.</returns>
            <param name="node">Node containing the xml:base attribute</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheStringAttribute(System.Xml.XPath.XPathNavigator,System.String@,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Retrieve specified string attribute.
            </summary>
            <remarks>
            This is to cache string attributes for which the type is xs:string.
            </remarks>
            <param name="node">Node on which to find the attribute.</param>
            <param name="value">Ref value to return the attribute value.</param>
            <param name="attributeName">Name of attribute to obtain.</param>
            <param name="defaultValue">Default value to set if attribute is missing.</param>
            <param name="spm">SPM for the string attribute. 0 or less means "no effect".</param>
            <param name="mlcMaxLength">Max length for MLC validation. 0 or less means "no effect".</param>
            <returns></returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <paramref name="mlcMaxLength"/> is violated and
            <Prp>ManifestReaderSettings.FixMlcRequirementViolation</Prp> is <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheStringElement(System.String@,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Stores the specified string element.
            </summary>
            <remarks>
            This is to cache string elements for which the type is xs:string.
            </remarks>
            <param name="value">Ref value to return the attribute value.</param>
            <param name="elementName">Name of element.</param>
            <param name="elementValue">Value of element.</param>
            <param name="spm">SPM for the string. 0 or less means "no effect".</param>
            <param name="mlcMaxLength">Max length for MLC validation. 0 or less means "no effect".</param>
            <returns></returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <paramref name="mlcMaxLength"/> is violated and
            <Prp>ManifestReaderSettings.FixMlcRequirementViolation</Prp> is <c>false</c>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.ValidateId(System.String)">
            <summary>
            Validates if an id string is a valid id..
            </summary>
            <param name="id"></param>
            <returns>true if valid, false if not, or if null or String.Empty.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheRequiredStringIdentifierAttribute(System.Xml.XPath.XPathNavigator,System.String@,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Retrieve specified string identifier attribute.
            </summary>
            <remarks>
            This is to cache string attributes for which the type is xs:ID or xs:IDREF.
            </remarks>
            <param name="node">Node on which to find the attribute.</param>
            <param name="value">Ref value to return the attribute value.</param>
            <param name="attributeName">Name of attribute to obtain.</param>
            <param name="defaultValue">Default value to set if attribute is missing.</param>
            <param name="spm">SPM for the string attribute. 0 or less means "no effect".</param>
            <param name="mlcMaxLength">Max length for MLC validation. 0 or less means "no effect".</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheOptionalStringIdentifierAttribute(System.Xml.XPath.XPathNavigator,System.String@,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Same as CacheStringIdentifierAttribute, but doesn't throw if the id is absent.
            </summary>
            <param name="node"></param>
            <param name="value"></param>
            <param name="attributeName"></param>
            <param name="defaultValue"></param>
            <param name="spm">SPM for the string attribute. 0 or less means "no effect".</param>
            <param name="mlcMaxLength">Max length for MLC validation. 0 or less means "no effect".</param>
            <returns><c>String.Empty</c> if the attribute does not exist.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheAttribute``1(System.Xml.XPath.XPathNavigator,System.Nullable{``0}@,System.String,System.Nullable{``0},System.String)">
            <summary>
            Retrieves the specified attribute on a node if it hasn't already been retrieved.  If the <paramref name="value"/>
            is non-null, the value has been retrieved previously and is returned immediately.
            </summary>
            <param name="node">Points to the node on which to find the attribute.  If this value is null, the default value
            is returned.</param>
            <param name="value">A reference to a Nullable&lt;T&gt; which is set depending on the value of the attribue.  If
            this value is already non-null, this method simply returns that value.</param>
            <param name="attributeName">The name of the attribute to check.</param>
            <param name="defaultValue">The default value to use if the attribute is missing or illegal.</param>
            <param name="attributeNamespace">Namespace of the attribute.</param>
            <returns>As a convenience, the return value is the same value that is set on the <paramref name="value"/>.</returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <c>PackageValidatorSettings.ScormRequirementValidation=ValidationBehavior.Enforce</c>
            and the attribute value is neither "true" nor "false".</exception>
            <remarks>It is neither a warning nor an error if the attribute is missing entirely from the node.  In that case,
            the <paramref name="defaultValue"/> is used.
            <para>
            The <c>PackageValidatorSettings.ScormRequirementValidation</c> determines whether the default value should be used if the attribute value is illegal.
            In <c>ValidationBehavior.LogWarning</c> mode, the default value is used and a warning is issued to the log.
            In <c>ValidationBehavior.LogError</c> mode, the default value is used and an error is issued to the log.
            In <c>ValidationBehavior.Enforce</c> mode, an error is issued to the log and an InvalidPackageException is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheAttribute``1(System.Xml.XPath.XPathNavigator,System.Nullable{``0}@,System.String,``0)">
            <summary>
            Retrieves the specified attribute on a node if it hasn't already been retrieved.  If the <paramref name="value"/>
            is non-null, the value has been retrieved previously and is returned immediately.
            </summary>
            <param name="node">Points to the node on which to find the attribute.  If this value is null, the default value
            is returned.</param>
            <param name="value">A reference to a Nullable&lt;T&gt; which is set depending on the value of the attribue.  If
            this value is already non-null, this method simply returns that value.</param>
            <param name="attributeName">The name of the attribute to check.</param>
            <param name="defaultValue">The default value to use if the attribute is missing or illegal.</param>
            <returns>As a convenience, the return value is the same value that is set on the <paramref name="value"/>.</returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If If <c>PackageValidatorSettings.ScormRequirementValidation=ValidationBehavior.Enforce</c>
            and the attribute value is neither "true" nor "false".</exception>
            <remarks>It is neither a warning nor an error if the attribute is missing entirely from the node.  In that case,
            the <paramref name="defaultValue"/> is used.
            <para>
            The <c>PackageValidatorSettings.ScormRequirementValidation</c> determines whether the default value should be used if the attribute value is illegal.
            In <c>ValidationBehavior.LogWarning</c> mode, the default value is used and a warning is issued to the log.
            In <c>ValidationBehavior.LogError</c> mode, the default value is used and an error is issued to the log.
            In <c>ValidationBehavior.Enforce</c> mode, an error is issued to the log and an InvalidPackageException is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheTokenAttribute``1(System.Xml.XPath.XPathNavigator,System.Nullable{``0}@,System.String,System.String,``0)">
            <summary>
            Cache token attribute
            </summary>
            <typeparam name="T"></typeparam>
            <param name="node"></param>
            <param name="value"></param>
            <param name="attributeName"></param>
            <param name="attributeNamespace"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheAnyUriAttribute(System.Xml.XPath.XPathNavigator,System.String@,System.String,System.Int32,System.Int32)">
            <summary>
            Retrieves the specified xs:anyURI attribute on a node if it hasn't already been retrieved.  If the <paramref name="value"/>
            is non-null, the value has been retrieved previously and is returned immediately.
            </summary>
            <param name="node">Points to the node on which to find the xs:anyURI attribute.</param>
            <param name="value">A reference to a string? which is set to the xs:anyURI value of the attribue or <c>String.Empty</c>.  If
            this value is already non-null, this method simply returns that value.</param>
            <param name="attributeName">The name of the attribute to check.</param>
            <param name="spm">SPM for the string attribute. 0 or less means "no effect".</param>
            <param name="mlcMaxLength">Max length for MLC validation. 0 or less means "no effect".</param>
            <returns>As a convenience, the return value is the same value that is set on the <paramref name="value"/>.</returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <c>PackageValidatorSettings.ScormRequirementValidation=ValidationBehavior.Enforce</c>
            and the attribute value is invalid.</exception>
            <remarks>It is neither a warning nor an error if the attribute is missing entirely from the node.  In that case,
            <c>String.Empty</c> is returned.
            <para>
            The default value is <c>String.Empty</c>.
            The <c>PackageValidatorSettings.ScormRequirementValidation</c> determines whether the default value should be used if the attribute value is illegal.
            In <c>ValidationBehavior.LogWarning</c> mode, the default value is used and a warning is issued to the log.
            In <c>ValidationBehavior.LogError</c> mode, the default value is used and an error is issued to the log.
            In <c>ValidationBehavior.Enforce</c> mode, an error is issued to the log and an InvalidPackageException is thrown.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheFirstChild(Microsoft.LearningComponents.Manifest.Helper.ChildNode@,System.Xml.XPath.XPathNavigator,System.String,System.String,System.Boolean)">
            <summary>
            Sets an XPathNavigator pointing to the first named child node, and returns it.
            </summary>
            <returns>An XPathNavigator pointing to the requested child, or <c>null</c> if no such child exists.</returns>
            <param name="childNode">Reference to a cache to store the return value.  If this is already set, this
            method simply returns.</param>
            <param name="node">Points to node containing the desired child node.</param>
            <param name="childNodeName">Name of the child node.</param>
            <param name="namespaceUri">Namespace of the child node.</param>
            <param name="checkDuplicates">True to check if there are duplicate nodes and to log error/warning if so.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CacheFirstChild(Microsoft.LearningComponents.Manifest.Helper.ChildNode@,System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Sets an XPathNavigator pointing to the first named child node, and returns it.
            </summary>
            <returns>An XPathNavigator pointing to the requested child, or <c>null</c> if no such child exists.</returns>
            <param name="childNode">Reference to a cache to store the return value.  If this is already set, this
            method simply returns.</param>
            <param name="node">Points to node containing the desired child node.</param>
            <param name="childNodeName">Name of the child node.</param>
            <param name="namespaceUri">Namespace of the child node.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.GetFirstChild(System.Xml.XPath.XPathNavigator,System.String,System.String,System.Boolean)">
            <summary>
            Gets an XPathNavigator pointing to the first named child node, and returns it.
            </summary>
            <returns>An XPathNavigator pointing to the requested child, or <c>null</c> if no such child exists.</returns>
            <param name="node">Points to node containing the desired child node.</param>
            <param name="childNodeName">Name of the child node.</param>
            <param name="namespaceUri">Namespace of the child node.</param>
            <param name="checkDuplicates">True to check if there are duplicate nodes and to log error/warning if so.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.GetFirstChild(System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Gets an XPathNavigator pointing to the first named child node, and returns it.
            </summary>
            <returns>An XPathNavigator pointing to the requested child, or <c>null</c> if no such child exists.</returns>
            <param name="node">Points to node containing the desired child node.</param>
            <param name="childNodeName">Name of the child node.</param>
            <param name="namespaceUri">Namespace of the child node.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CreateExpressionV1p3(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates an <Typ>XPathExpression</Typ> useful for an XPath query in the manifest, using the
            common namespaces needed.
            </summary>
            <param name="nav">The <Typ>XPathNavigator</Typ> on which the XPath query will be called.</param>
            <param name="xPath">The XPath query string, including the common namespace prefixes.  E.g "imsss:mapInfo" not "mapInfo".</param>
            <returns>XPath expression to use in e.g. a Select() on an XPath navigator.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CreateExpressionV1p2(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates an <Typ>XPathExpression</Typ> useful for an XPath query in the manifest, using the
            common namespaces needed.
            </summary>
            <param name="nav">The <Typ>XPathNavigator</Typ> on which the XPath query will be called.</param>
            <param name="xPath">The XPath query string, including the common namespace prefixes.  E.g "imsss:mapInfo" not "mapInfo".</param>
            <returns>XPath expression to use in e.g. a Select() on an XPath navigator.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.CreateExpression(System.Xml.XPath.XPathNavigator,System.String)">
            <summary>
            Creates an <Typ>XPathExpression</Typ> useful for an XPath query in the manifest, using the
            common namespaces needed.
            </summary>
            <param name="nav">The <Typ>XPathNavigator</Typ> on which the XPath query will be called.</param>
            <param name="xPath">The XPath query string, including the common namespace prefixes.  E.g "imsss:mapInfo" not "mapInfo".</param>
            <returns>XPath expression to use in e.g. a Select() on an XPath navigator.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.GetNodeText(System.Xml.XPath.XPathNavigator)">
            <summary>
            Returns the text of the node from the beginning &lt; to the end &lt; 
            of the node (e.g. strips out the contents and end node of the OuterXml.)
            </summary>
            <param name="nav"></param>
            <exception cref="T:Microsoft.LearningComponents.LearningComponentsInternalException">If <paramref name="nav"/> is null.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.GetLogInfo_NodeText(System.Xml.XPath.XPathNavigator)">
            <summary>
            Returns the text to give as the "reason" in an error/warning message, that includes the 
            ValidatorResources.NodeXml plus the text of the node from the beginning &lt; to the end &lt; 
            of the node (e.g. strips out the contents and end node of the OuterXml.)
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.LogWarning(System.String)">
            <summary>
            Adds a warning to the log, if one was provided in the constructor.
            </summary>
            <param name="message">The message to log.</param>
            <remarks>Actually this method just calls <c>ValidationResults.LogWarning()</c>.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.LogErrorAndThrow(System.String)">
            <summary>
            Adds an error to the log, if one was provided in the constructor.  Also throws a <Typ>InvalidPackageException</Typ>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.LogError(System.String)">
            <summary>
            Adds an error to the log, if one was provided in the constructor.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.LogInvalidDuplicateNode(System.String,System.Boolean,System.String)">
            <summary>
            Logs or throws an invalid duplicate node error according to the validator settings.
            </summary>
            <param name="nodeName">Name of duplicated node.</param>
            <param name="mlcNamespace">true if the node is in the mlcNamespace (use ValidatorSettings.MlcRequirementValidation
            instead of ValidatorSettings.ScormRequirementValidation).</param>
            <param name="reason">Extra text to include in error message.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.Helper.ManifestVersion">
            <summary>
            Identifies if the manifest is SCORM 2004 (e.g. v1p3) or SCORM 1.2 (e.g. v1p2).
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.Helper.ImscpCurrentNamespace">
            <summary>
            Gets the correct IMSCP namepace string, depending on the SCORM version of the current manifest.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.Helper.AdlcpCurrentNamespace">
            <summary>
            Gets the correct ADLCP namepace string, depending on the SCORM version of the current manifest.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.Helper.SPM">
            <summary>
            Class that returns SPM's for various values.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.Helper.Strings">
            <summary>
            Class that returns string constants.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.Helper.ScormVersion">
            <summary>
            Identifies if the manifest is SCORM 2004 (e.g. v1p3) or SCORM 1.2 (e.g. v1p2).
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser">
            <summary>
            Handles parsing, validation, and evaluation of the &lt;adlcp:prerequisites&gt; script value.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.s_regexPrerequisites">
            <summary>
            This regex matches identifiers, where identifiers start with a letter or underscore and are
            followed by any characters other than those reserved to be "tokens."  "Tokens" are the
            characters &amp;, |, ~, =, &lt;&gt;, {, }, (, ), *, whitespace, a number that begins
            a word, and the comma character.
            </summary>
            <remarks>
            The technical SCORM definition of an identifier is more restrictive than what it matched
            by this expression.  However, since the identifier must also match an item identifier
            in the manifest, it isn't worth the overhead to ensure the legality of the characters
            used in the identifiers.
            <para>
            
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.VerifyWhitespace(System.String,System.Int32,System.Int32)">
            <summary>
            Verify that the characters in the string are whitespace from the startIndex to the endIndex.
            </summary>
            <returns>true if the analyzed characters are all whitespace.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.Evaluate(System.String,Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.GetLessonStatusDelegate)">
            <summary>
            Evaluates the script expression of the prerequisite according to the <Typ>LessonStatus</Typ> values
            of the lesson items referenced in the script, according to the "AICC CMI001 Guidelines for 
            Interoperability" document referenced in the "Version 1.2 SCORM Content Aggregation Model".
            </summary>
            <remarks>
            If the script expression is null or String.Empty, this method always returns <c>true</c>.
            </remarks>
            <param name="script">The original string value of the script contained in the &lt;adlcp:prerequisites&gt; 
            element.</param>
            <param name="getLessonStatus">The delegate method that returns the individual lesson
            item status for the items referenced in the prerequisite script. May not be null.
            </param>
            <returns><c>true</c> if the prerequisite script evaluates to <c>true</c>.  <c>false</c>
            if it does not.</returns>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The <paramref name="script"/> is syntactically
            invalid, or the <paramref name="getLessonStatus"/> delegate threw the exception.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.ParseAndOrExpression(System.Text.RegularExpressions.MatchCollection,System.Int32@,Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.GetLessonStatusDelegate)">
            <summary>
            Parse a prerequisites "and/or expression" consisting of a series of one
            or more "equality expressions".
            </summary>
            <param name="matches">The collection of tokens.</param>
            <param name="index">The current parsing index into the collection.</param>
            <param name="getLessonStatus">The delegate method that returns the individual lesson
                item status for the items referenced in the prerequisite script.</param>
            <returns>
            The evaluation of the operation.
            </returns>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.Helper.PrerequisitesParser.GetLessonStatusDelegate">
            <summary>
            A delegate method that accepts an &lt;item&gt; identifier attribute value and returns
            the <Typ>LessonStatus</Typ> value of the cmi.core.lesson_status for that item.
            </summary>
            <remarks>
            An implementation of this delegate should handle the case where
            a <Typ>LessonStatus</Typ> is requested for an identifier that does not exist.  One solution
            would to be to return <c>LessonStatus.NotAttempted</c> in that case.  Another solution
            would be to throw an exception.
            </remarks>
            <param name="identifier">The identifier of the lesson item.</param>
            <returns>The <Typ>LessonStatus</Typ> value of the cmi.core.lesson_status for the requested item.</returns>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ManifestReader">
            <summary>
            This is a reader of information contained in the manifest in a SCORM package.
            The package may be 1.2 or 2004 (1.3) version. The package may not be an LRM.
            </summary>
            <remarks>
            Most of the methods on this class follow the terminology of SCORM 2004. Unless otherwise noted,
            they are valid for both 1.2 and 2004 content. 
            
            The reading of information in the manifest is lazy. When an object is created, the data for the 
            object to be read is not parsed. When a property value is requested, that property is read from the 
            XPathNavigator.
            
            Exceptions are only thrown if there's no log and reasonable behavior is not possible.
            
            There is an option to add errors and warnings to a log provided by the application. 
            If there is a serious error (and exceptions should be
            thrown), then the exception is thrown.
            
            When a list is accessed, the list is created but the elements in the list are only created when they are needed.
            
            If <c>PackageValidatorSettings.ScormRequirementValidation=ValidationBehavior.LogWarning</c> or 
            <c>PackageValidatorSettings.ScormRequirementValidation=ValidationBehavior.LogError</c> is set, then exceptions
            are avoided whenever a reasonable default 
            is possible. For instance, if an element required by the SCORM spec does not exist in the 
            manifest, String.Empty or some other possible valid value is returned.
            
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.#ctor(Microsoft.LearningComponents.PackageReader,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults,System.Xml.XPath.XPathNavigator)">
            <summary>
            Create a ManifestReader from an <Typ>XPathNavigator</Typ>, using the supplied settings.
            </summary>
            <param name="packageReader">The <Typ>PackageReader</Typ> to use when <Typ>MetadataNodeReader</Typ>
            requires files outside of the manifest.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="packageValidatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">The log in which to write error and warning log entries.  Cannot be null if
            a <c>ValidationBehavior.LogWarning</c> or <c>ValidationBehavior.LogError</c> is chosen
            for one of the settings in <paramref name="validatorSettings"/></param>
            <param name="manifestNode">The <Typ>XPathNavigator</Typ>, pointing to the &lt;manifest&gt; node.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.Create(Microsoft.LearningComponents.PackageReader,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Create a ManifestReader from a stream containing imsmanifest.xml.
            </summary>
            <param name="packageReader">The <Typ>PackageReader</Typ> to use when <Typ>MetadataNodeReader</Typ>
            requires files outside of the manifest.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">If provided, errors and warnings encountered when reading from the 
            manifest are added to the log. See the ValidationResults class for 
            information about errors and warnings.</param>
            <returns>
            <Typ>ManifestReader</Typ>.
            </returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="stream"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">There is no valid manifest..</exception>
            <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.ManifestStreamToXPathNavigator(System.IO.Stream,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Finds the &lt;manifest&gt; node in the provided stream, and returns an XPathNavigator pointing to it.
            This will work for both SCORM 1.2 and 2004 manifests.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.#ctor(Microsoft.LearningComponents.PackageReader,Microsoft.LearningComponents.Manifest.ManifestReaderSettings)">
            <summary>
            Create a ManifestReader object that provides access to information within the manifest. 
            </summary>
            <param name="packageReader">The <Typ>PackageReader</Typ> to use that contains the manifest.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <remarks>The caller should not dispose the <Typ>PackageReader</Typ> during the lifetime of this object.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">There is no valid manifest in the <paramref name="packageReader"/>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.AddActivityIdentifiers(Microsoft.LearningComponents.Manifest.ActivityNodeReader,System.Collections.Generic.Dictionary{System.String,System.Boolean})">
            <summary>
            Add an activity and its child activities identifiers to the dictionary.
            Used by the ActivityIdentifiers property.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.CreateMetadataNavigator">
            <summary>
            Package level metadata. Since there is no guarantee on the format of this node, 
            simply return a copy of the node. The metadata node is required in 1.3, optional in 1.2.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If the node is not provided in a SCORM 2004 
            package, and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> was set.</exception>
            <remarks>This node is required in SCORM 2004.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.AppendSubmanifestResourceNodes">
            <summary>
            Append any resource nodes on submanifests to the current list in m_resources.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ManifestReader.CreateNavigator">
            <summary>
            Return an XPathNavigator to provide XPath query access to the navigator.
            This allows access to non-Scorm compliant elements and attributes in a manifest.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.Log">
            <summary>
            Return the log of messages relating to this manifest.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.LogReplacement">
            <summary>
            Return whether to write the message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.ActivityIdentifiers">
            <summary>
            Used by ActivityNodeReader.Prerequisites
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.Id">
            <summary>
            Returns the id in the manifest that uniquely identifies the package.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">This exception is thrown if the 
            attribute does not exist in the package and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set.
            </exception>
            <remarks>
            Although this is a SCORM required attribute, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set,
            a default value of <c>MANIFEST</c> will be returned if the attribute is missing.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.PackageFormat">
            <summary>
            The <Typ>PackageFormat</Typ> of the package, which identifies whether this is a SCORM 2004, SCORM 1.2, or
            LRM package.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">This exception is thrown if the package format
            cannot be determined. A default is not assumed.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.Version">
            <summary>
            Corresponds to the version attribute of the &lt;manifest&gt; node, which is an optional attribute used to
            distinguish between manifests with the same identifier.
            </summary>
            <remarks>Returns String.Empty if it doesn't exist.  The SPM is 20. A length longer than that is a violation
            of SCORM recommendations.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.PackageType">
            <summary>
            Returns the type of SCORM package. Currently, it is either a resource package or a content organization
            package.
            </summary>
            <remarks>
            If the manifest does not have any organization nodes, it is assumed to be a ResourcePackage.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.XmlBase">
            <summary>
            Return the xml:base attribute of the manifest, if it exists. 
            </summary>
            <remarks>Returns null if the xml:base attribute of the manifest does not exist.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.ResourcesXmlBase">
            <summary>
            The xml:base attribute, resolved with the manifest's xml:base attribute, of the resources node, if it exists. Otherwise
            returns null.
            </summary>
            <remarks>
            <para>If the attribute is provided in the manifest but is not valid and 
            <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> was set 
            for this object, an empty Uri is returned.
            </para>
            <para>
            Example: if the &lt;manifest&gt; has xml:base="http://foo/" and the &lt;resources&gt; has xml:base="bar/",
            this returns "http://foo/bar/".  If the &lt;resources&gt; has xml:base="http://bar/", this returns "http://bar/"
            regardless of the &lt;manifest&gt; xml:base value.  If the &lt;resources&gt; has no xml:base, this returns
            the &lt;manifest&gt; xml:base, in this case, "http://foo/".
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The provided attribute is not valid, or
            there are more than one &lt;resources&gt; node,
            and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> was set.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.Metadata">
            <summary>
            Return a reader of the package level metadata.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If the &lt;metadata&gt; node is not provided in a SCORM 2004 
            package, or if the &lt;location&gt; element of the metadata refers to a file in the package that can not
            be found, and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> was set.</exception>
            <remarks>The &lt;metadata&gt; node is required in SCORM 2004.  It is optional in SCORM 1.2.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.Organizations">
            <summary>
            Return a read-only list of organizations (<Typ>OrganizationNodeReader</Typ>) in the package.
            </summary>
            <remarks>
            <para>
            The order of organziation nodes in this collection is the same as the order in the manifest.
            </para>
            <para>
            Although SCORM mandates that no two organization nodes may have the same identifier in a manifest,
            there is not check for that when building this collection.  It is up to the application to handle
            if multiple organizations have identical identifier attributes.
            </para>
            <para>
            This collection is not populated until methods or properties on it are called.  If during population,
            an organization node is encountered lacking an identifier, a warning will be added to the log if
            <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set, or an error will be added 
            to the log and an <Typ>InvalidPackageException</Typ> thrown if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>
            is set.
            </para>
            <para>
            The absence of &lt;organization&gt; nodes implies this is a Resource package, instead of a
            Content Aggregation package.
            </para>
            </remarks>
            <example>
            Loop through the available organizations in the manifest.
            <code language="C#">
                foreach (OrganizationNodeReader organization in manifest.Organizations)
                {
                    // use the OrganizationNodeReader
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.DefaultOrganization">
            <summary>
            The default organization that will be used, unless another is specified when attempting the package.
            This will return null content that does not include any organizations.
            <para>
            If there is an error in the default organization identifier, the first organization will be returned
            when <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set.
            </para>
            </summary>
            <remarks>
            The default organization for SCORM 1.2 content is the first organization node found in the manifest.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set, 
            and the &lt;organizations&gt; default attribute is invalid if this is a Content Aggregation package, or the default
            attribute exists if this is a Resource package, or the identifier for the default organization doesn't exist
            in the manifest.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.Resources">
            <summary>
            Return a list of resources contained in the package.  The dictionary has the resource id as the key, 
            the <Typ>ResourceNodeReader</Typ> as the value. 
            </summary>
            <remarks>
            In a SCORM package, the ids of each element must be unique. If the manifest being read
            violates this requirement and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set, the collection
            of resources will throw an <Typ>InvalidPackageException</Typ> when the error is encountered. 
            If <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set, only the first resource of a duplicated ID will be contained in the list.
            <para>
            SCORM states there must be resources in a valid manifest.  However, this method simply returns an empty dictionary
            in this case.  It is up to the application to determine what to do if this happens.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">There are multiple &lt;resources&gt; nodes and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>
            is set.</exception>
            <example>Loop through the resources in the manifest.
            <code language="C#">
                foreach(ResourceNodeReader resource in manifest.Resources.Values)
                {
                    // use the resource
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.DecendantSubmanifests">
            <summary>
            Returns a list of the decendant submanifest nodes (all manifest nodes beneath this one - not just the immediate children).
            </summary>
            <remarks>
            Called by ActivityNodeReader.ParseIdentifierref.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.ManifestSettings">
            <summary>
            Get the ManifestReaderSettings for this manifest.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.ValidatorSettings">
            <summary>
            Get the PackageValidatorSettings for this manifest.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ManifestReader.SequencingCollection">
            <summary>
            Return the sequencing collection information in the manifest. This is only valid
            in SCORM 2004 content, so in SCORM 1.2 content, this collection will always be empty.
            The key is the &lt;sequencing&gt;/ID and the value is a <Typ>SequencingNodeReader</Typ>.
            </summary>
            <remarks>
            This collection only returns &lt;sequencing&gt; nodes from the &lt;imsss:sequencingCollection&gt;. 
            These all contain ID attributes that are referenced by the IDRef attribute of &lt;imsss:sequencing&gt; 
            nodes inside an &lt;item&gt; node.
            <para>
            Because the nodes are parsed as they are accessed, and not before, errors or warnings can occur
            when the collection's <c>Count</c> property or <c>MoveNext</c> method is accessed.  E.g. if a
            &lt;sequencing&gt; node contains no valid ID attribute, in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> a warning
            is put into the log and that &lt;sequencing&gt; node is skipped.  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>,
            an error is put into the log and an <Typ>InvalidPackageException</Typ> is thrown.
            </para>
            <para>
            &lt;imsss:sequencingCollection&gt; is only allowed on Content Aggregation packages, and not
            on Resources packages.  If <Prp>PackageType</Prp> is <c>PackageType.Resource</c> and there is
            a &lt;imsss:sequencingCollection&gt; node in the manifest, then if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is
            set, the <Prp>SequencingCollection</Prp> is returned anyway.  However, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>
            is set, an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If <Prp>PackageType</Prp> is <c>PackageType.Resource</c> and there is
            a &lt;imsss:sequencingCollection&gt; node in the manifest, and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is
            set</exception>
            <example>Loop through sequencing nodes in the sequencingCollection.<code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    // use the SequencingNodeReader
                }
            </code></example>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingNodeReader">
            <summary>
            Parses SCORM &lt;imsss:sequencing&gt; nodes.
            </summary>
            <remarks>
            <para>
            The &lt;imsss:sequencing&gt; nodes are from a SCORM manifest or the SequencingDataCache
            field in the ActivityAttemptItem table.
            </para>
            <para>
            AuxiliaryResources are not available here because they are not recommended for use in 2004.
            </para>
            <para>
            &lt;imsss:sequencing&gt; nodes occur 0 or more times in &lt;item&gt; and &lt;imsss:sequencingCollection&gt; nodes.
            In &lt;imsss:sequencingCollection&gt;'s, the &lt;imsss:sequencing&gt; nodes must have an ID attribute, which is
            referenced by the IDRef attribute of a &lt;imsss:sequencing&gt; in an &lt;item&gt; node.
            </para>
            <para>
            When used to import a package, a <Typ>ManifestReader</Typ> is provided in the constructor, allowing the
            &lt;sequencing&gt;/IDRef to be resolved.  No IDRef values are imported into the database.  Only the node 
            corresponding to the reference is imported, in-place.
            </para>
            <para>
            By implication, this object can only be created for SCORM 2004 content, since the 
            sequencing nodes do not exist in previous SCORM versions.
            </para>
            <para>
            Holds lists of &lt;imsss:rollupRule&gt; &lt;imsss:preConditionRule&gt;, &lt;imsss:exitConditionRule&gt;, 
            and &lt;imsss:postConditionRule&gt; nodes, and a dictionary of &lt;imsss:objective&gt; nodes (including
            &lt;primaryObjective&gt; nodes, all in the same dictionary.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.Create(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader,Microsoft.LearningComponents.Manifest.ActivityNodeReader)">
            <summary>
            Creates a SequencingNodeReader for the requested node. 
            </summary>
            <remarks>This is used when the sequencing node may have an IDRef attribute that needs to be cross-referenced
            with the <Typ>SequencingNodeReader</Typ> collection held by the <Typ>ManifestReader</Typ>.  Instead of
            creating a new <Typ>SequencingNodeReader</Typ>, in the case where the IDRef attribute exists, the
            <Typ>SequencingNodeReader</Typ> in the <c>ManifestReader.SequencingCollection</c> that has the matching
            ID attribute is returned.
            <para>
            If this sequencing node has an IDRef attribute, but no sequencing node with a matching ID can be found,
            null is returned if parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, and an <Typ>InvalidPackageException</Typ>
            is thrown if parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>.
            </para>
            </remarks>
            <param name="sequencingNode">A &lt;sequencing&gt; node held inside an item or organization.  E.g. not
            one from a &lt;sequencingCollection&gt;.</param>
            <param name="manifest">The <Typ>ManifestReader</Typ> that contains the manifest that holds this 
            &lt;sequencing&gt; node.</param>
            <param name="activity">The <Typ>ActivityNodeReader</Typ> that contains this &lt;sequencing&lt; node.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.Create(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader)">
            <summary>
            Creates a SequencingNodeReader for the requested node. 
            </summary>
            <remarks>This is used when the sequencing node may have an IDRef attribute that needs to be cross-referenced
            with the <Typ>SequencingNodeReader</Typ> collection held by the <Typ>ManifestReader</Typ>.  Instead of
            creating a new <Typ>SequencingNodeReader</Typ>, in the case where the IDRef attribute exists, the
            <Typ>SequencingNodeReader</Typ> in the <c>ManifestReader.SequencingCollection</c> that has the matching
            ID attribute is returned.
            <para>
            If this sequencing node has an IDRef attribute, but no sequencing node with a matching ID can be found,
            null is returned if parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, and an <Typ>InvalidPackageException</Typ>
            is thrown if parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>.
            </para>
            </remarks>
            <param name="sequencingNode">A &lt;sequencing&gt; node held inside an item or organization.  E.g. not
            one from a &lt;sequencingCollection&gt;.</param>
            <param name="manifest">The <Typ>ManifestReader</Typ> that contains the manifest that holds this 
            &lt;sequencing&gt; node.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader,Microsoft.LearningComponents.Manifest.ActivityNodeReader,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor. 
            </summary>
            <param name="sequencingNode">Points to an &lt;imsss:sequencing&gt; node and its contents.</param>
            <param name="manifest">The <Typ>ManifestReader</Typ> that contains this &lt;sequencing&lt; node.  Can be null.</param>
            <param name="activity">The <Typ>ActivityNodeReader</Typ> that contains this &lt;sequencing&lt; node.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="log">Log for warnings/errors.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <remarks>This constructor is designed to read the sequencing node XML
            stored in the SequencingDataCache field in the ActivityAttemptItem table of LearningStore. 
            This allows creating a SequencingNodeReader without requiring
            a ManifestReader. A ManifestReader is only required for &lt;sequence&gt; nodes that contain
            the IDRef attribute, since this references a &lt;sequence&gt; node under the 
            &lt;manifest&gt;/&lt;sequenceCollection%gt; node. When using this constructor, the &lt;sequence&gt;
            node is guaranteed not to contain the IDRef attribute.
            <para>
            This constructor verifies the first node in <paramref name="sequencingNode"/> is a &lt;sequencing&gt; node
            in the http://www.imsglobal.org/xsd/imsss namespace.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor. 
            </summary>
            <param name="sequencingNode">Points to an &lt;imsss:sequencing&gt; node and its contents.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Log for warnings/errors.</param>
            <remarks>This constructor is designed to read the sequencing node XML
            stored in the SequencingDataCache field in the ActivityAttemptItem table of LearningStore. 
            This allows creating a SequencingNodeReader without requiring
            a ManifestReader. A ManifestReader is only required for &lt;sequence&gt; nodes that contain
            the IDRef attribute, since this references a &lt;sequence&gt; node under the 
            &lt;manifest&gt;/&lt;sequenceCollection%gt; node. When using this constructor, the &lt;sequence&gt;
            node is guaranteed not to contain the IDRef attribute.
            <para>
            This constructor verifies the first node in <paramref name="sequencingNode"/> is a &lt;sequencing&gt; node
            in the http://www.imsglobal.org/xsd/imsss namespace.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.CreateConditionRulesCollection(System.String)">
            <summary>
            Create a collection of sequencing rules. 
            </summary>
            <param name="nodeName">Name of the node in the imsss namespace, e.g. "preConditionRule".  
            Differentiates between exit, pre and post condition rules.</param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.CheckAndCopyReference(System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathNavigator,System.String,System.String)">
            <summary>
            Private method used by CreateNavigator() to move data from the referenced node into this one.
            </summary>
            <param name="navTo">Should be positioned on the &lt;sequencing&gt; node.</param>
            <param name="navFrom">Should be positioned on the &lt;sequencing&gt; node.</param>
            <param name="childName"></param>
            <param name="childNamespace"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingNodeReader.CreateNavigator">
            <summary>
            Return the XPathNavigator for this resource.
            </summary>
            <remarks>
            This allows an application to get custom namespaced data (e.g. "foo:bar") from the XML.
            <para>
            Note that because SCORM allows a &lt;sequencing&gt; node that has an IDRef attribute and is not in 
            a &lt;sequencingCollection&gt; refer to a &lt;sequencing&gt; node that has an ID attribute (equal to the
            IDRef of the previously mentioned &lt;sequencing&gt;) and is in a &lt;sequencingCollection&gt;, if the
            &lt;sequencing&gt; node read by this <Typ>SequencingNodeReader</Typ> has a valid IDRef attribute,
            the XML returned in the <Typ>XPathNavigator</Typ> of this method contains the synthesis of the node
            read by this <Typ>SequencingNodeReader</Typ> and the node referenced by the IDRef attribute.
            </para>
            <para>
            Following SCORM's rules, the direct child nodes of the current node take precedence over the
            direct child nodes of the referenced node.
            </para>
            </remarks>
            <example><code>
            If there is the following:
            
                        &lt;sequencingCollection&gt;
                          &lt;sequencing ID="seq1"&gt;
                            &lt;deliveryControls completionSetByContent="true"/&gt;
                            &lt;limitConditions attemptLimit="2"/&gt;
                          &lt;/sequencing&gt;
                        &lt;/sequencingCollection&gt;
            
                        and there is also a &lt;sequencing&gt; node elsewhere such as:
            
                        &lt;sequencing IDRef="seq1"&gt;
                          &lt;limitConditions attemptLimit="3"/&gt;
                        &lt;/sequencing&gt;
            
                        The synthesized XML from CreateNavigator would contain:
            
                        &lt;sequencing IDRef="seq1"&gt;
                          &lt;deliveryControls completionSetByContent="true"/&gt;
                          &lt;limitConditions attemptLimit="3"/&gt;
                        &lt;/sequencing&gt;
            
                        where the &lt;limitConditions&gt; exists in the IDRef node, and takes precedence over the one with the ID.
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.Choice">
            <summary>
            Returns the value of the &lt;imsss:controlMode&gt;/choice attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ChoiceExit">
            <summary>
            Returns the value of the &lt;imsss:controlMode&gt;/choiceExit attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.Flow">
            <summary>
            Returns the value of the &lt;imsss:controlMode&gt;/flow attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ForwardOnly">
            <summary>
            Returns the value of the &lt;imsss:controlMode&gt;/forwardOnly attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.UseCurrentAttemptObjectiveInfo">
            <summary>
            Returns the value of the &lt;imsss:controlMode&gt;/useCurrentAttemptObjectiveInfo attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.UseCurrentAttemptProgressInfo">
            <summary>
            Returns the value of the &lt;imsss:controlMode&gt;/useCurrentAttemptProgressInfo attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.PreConditionRules">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;SequencingRuleNodeReader&gt;</c> containing the &lt;imsss:preConditionRules&gt; nodes,
            of type <Typ>SequencingRuleNodeReader</Typ>.
            </summary>
            <remarks>
            The <Typ>ReadOnlyCollection</Typ> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>ReadOnlyCollection</Typ> is returned.
            </para>
            <para>
            Note that if this sequencing node has a valid IDRef
            attribute, if there is no &lt;imsss:sequencingRules&gt; node in this sequencing node, the values inside the
            &lt;imsss:sequencingRules&gt; node in the sequencing node referenced by IDRef is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node.</exception>
            <example>Loop through the preConditionRules for all sequencing nodes in the sequencingCollection.<code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingRuleNodeReader rule in sequencing.PreConditionRules)
                    {
                        // Use the SequencingRuleNodeReader
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.PostConditionRules">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;SequencingRuleNodeReader&gt;</c> containing the &lt;imsss:postConditionRules&gt; nodes,
            of type <Typ>SequencingRuleNodeReader</Typ>.
            </summary>
            <remarks>
            The <Typ>ReadOnlyCollection</Typ> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>ReadOnlyCollection</Typ> is returned.
            </para>
            <para>
            Note that if this sequencing node has a valid IDRef
            attribute, if there is no &lt;imsss:sequencingRules&gt; node in this sequencing node, the values inside the
            &lt;imsss:sequencingRules&gt; node in the sequencing node referenced by IDRef is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node.</exception>
            <example>Loop through the postConditionRules for all sequencing nodes in the sequencingCollection.<code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingRuleNodeReader rule in sequencing.PostConditionRules)
                    {
                        // Use the SequencingRuleNodeReader
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ExitConditionRules">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;SequencingRuleNodeReader&gt;</c> containing the &lt;imsss:exitConditionRules&gt; nodes,
            of type <Typ>SequencingRuleNodeReader</Typ>.
            </summary>
            <remarks>
            The <Typ>ReadOnlyCollection</Typ> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>ReadOnlyCollection</Typ> is returned.
            </para>
            <para>
            Note that if this sequencing node has a valid IDRef
            attribute, if there is no &lt;imsss:sequencingRules&gt; node in this sequencing node, the values inside the
            &lt;imsss:sequencingRules&gt; node in the sequencing node referenced by IDRef is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node.</exception>
            <example>Loop through the exitConditionRules for all sequencing nodes in the sequencingCollection.<code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingRuleNodeReader rule in sequencing.ExitConditionRules)
                    {
                        // Use the SequencingRuleNodeReader
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.AttemptLimit">
            <summary>
            Returns the value of the &lt;imsss:limitConditions&gt;/attemptLimit attribute.
            </summary>
            <remarks>
            The default value is "null".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is a valid positive integer, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is a valid positive integer, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.AttemptAbsoluteDurationLimit">
            <summary>
            Returns the value of the &lt;imsss:limitConditions&gt;/attemptAbsoluteDurationLimit attribute.
            </summary>
            <remarks>
            The default value is <c>TimeSpan.Zero</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is a valid xs:duration, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is a valid xs:duration, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RollupRules">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;SequencingRollupRuleNodeReader&gt;</c> containing the
            &lt;imsss:rollupRules&gt;/&lt;imsss:rollupRule&gt; nodes, of type <Typ>SequencingRollupRuleNodeReader</Typ>.
            </summary>
            <remarks>
            The <Typ>ReadOnlyCollection</Typ> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>ReadOnlyCollection</Typ> is returned.
            </para>
            <para>
            Note that if this sequencing node has a valid IDRef
            attribute, if there is no &lt;imsss:rollupRules&gt; node in this sequencing node, the values inside the
            &lt;imsss:rollupRules&gt; node in the sequencing node referenced by IDRef is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node, or if there
            are multiple &lt;imsss:rollupRules&gt; nodes.</exception>
            <example>Loop through all rollup rules in the sequencingCollection.<code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingRollupRuleNodeReader rollupRule in sequencing.RollupRules)
                    {
                        // Use the SequencingRollupRuleNodeReader
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RollupObjectiveSatisfied">
            <summary>
            Returns the value of the &lt;imsss:rollupRules&gt;/rollupObjectiveSatisfied attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RollupProgressCompletion">
            <summary>
            Returns the value of the &lt;imsss:rollupRules&gt;/rollupProgressCompletion attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ObjectiveMeasureWeight">
            <summary>
            Returns the value of the &lt;imsss:rollupRules&gt;/objectiveMeasureWeight attribute.
            </summary>
            <remarks>
            The default value is "1".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is a valid xs:decimal, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is a valid xs:decimal, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RequiredForSatisfied">
            <summary>
            Returns the value of the &lt;adlseq:rollupConsiderations&gt;/requiredForSatisfied attribute.
            </summary>
            <remarks>
            The default value is <c>RollupConsideration.Always</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RequiredForNotSatisfied">
            <summary>
            Returns the value of the &lt;adlseq:rollupConsiderations&gt;/requiredForNotSatisfied attribute.
            </summary>
            <remarks>
            The default value is <c>RollupConsideration.Always</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RequiredForCompleted">
            <summary>
            Returns the value of the &lt;adlseq:rollupConsiderations&gt;/requiredForCompleted attribute.
            </summary>
            <remarks>
            The default value is <c>RollupConsideration.Always</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RequiredForIncomplete">
            <summary>
            Returns the value of the &lt;adlseq:rollupConsiderations&gt;/requiredForIncomplete attribute.
            </summary>
            <remarks>
            The default value is <c>RollupConsideration.Always</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.MeasureSatisfactionIfActive">
            <summary>
            Returns the value of the &lt;adlseq:rollupConsiderations&gt;/measureSatisfactionIfActive attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.Objectives">
            <summary>
            Returns the <c>IDictionary&lt;string, SequencingObjectiveNodeReader&gt;</c> containing the
            &lt;imsss:primaryObjective&gt; and &lt;imsss:objective&gt; nodes under the &lt;imsss:objectives&gt; node,
            indexed by the <c>string</c> parameter, which is the objectiveID attribute of the objective node.
            The value of the dictionary is <Typ>SequencingObjectiveNodeReader</Typ>.
            </summary>
            <remarks>
            The <Typ>IDictionary</Typ> returned from this method is not populated until
            properties or methods on it are accessed, e.g. <c>IDictionary.ContainsKey</c>, <c>Keys</c>, or accessing
            the enumerator.  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            will be thrown if there are invalid nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            Calling any property or method the first time results in an n-order operation as all nodes are scanned and
            objects created.
            </para>
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>IDictionary</Typ> is returned.
            </para>
            <para>
            Note that if this sequencing node has a valid IDRef
            attribute, if there is no &lt;imsss:objectives&gt; node in this sequencing node, the values inside the
            &lt;imsss:objectives&gt; node in the sequencing node referenced by IDRef is returned.
            </para>
            <para>
            In the case of primary objectives, SCORM permits the objectiveID attribute to be absent if there are
            no &lt;mapInfo&gt; nodes contained within the primary objective.  When this happens, the objectiveID
            will be <c>String.Empty</c>, which will be the index into this <Typ>IDictionary</Typ>.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node, or if there
            are multiple &lt;imsss:objectives&gt; nodes.</exception>
            <example>Loop through all objectives in the sequencingCollection.<code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingObjectiveNodeReader objective in sequencing.Objectives.Values)
                    {
                        // Use the SequencingObjectiveNodeReader
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RandomizationTiming">
            <summary>
            Returns the value of the &lt;imsss:randomizationControls&gt;/randomizationTiming attribute.
            </summary>
            <remarks>
            The default value is <c>RandomizationTiming.Never</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.RandomizationSelectCount">
            <summary>
            Returns the value of the &lt;imsss:randomizationControls&gt;/selectCount attribute.
            </summary>
            <remarks>
            The default value is "0".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is a valid xs:nonNegativeInteger, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is a valid xs:nonNegativeInteger, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ReorderChildren">
            <summary>
            Returns the value of the &lt;imsss:randomizationControls&gt;/reorderChildren attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.SelectionTiming">
            <summary>
            Returns the value of the &lt;imsss:randomizationControls&gt;/selectionTiming attribute.
            </summary>
            <remarks>
            The default value is <c>RandomizationTiming.Never</c>.  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.Tracked">
            <summary>
            Returns the value of the &lt;imsss:deliveryControls&gt;/tracked attribute.
            </summary>
            <remarks>
            The default value is "true".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.CompletionSetByContent">
            <summary>
            Returns the value of the &lt;imsss:deliveryControls&gt;/completionSetByContent attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ObjectiveSetByContent">
            <summary>
            Returns the value of the &lt;imsss:deliveryControls&gt;/objectiveSetByContent attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.PreventActivation">
            <summary>
            Returns the value of the &lt;adlseq:constrainedChoiceConsiderations&gt;/preventActivation attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingNodeReader.ConstrainChoice">
            <summary>
            Returns the value of the &lt;adlseq:constrainedChoiceConsiderations&gt;/constrainChoice attribute.
            </summary>
            <remarks>
            The default value is "false".  See below for when the default value is returned.
            <para>
            The return value is determined as follows:
            </para>
            <para>
            If this node has the requested attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            If this node does not have the requested attribute, then if the parent &lt;sequencing&gt; element has an "idref"
            attribute referring to a &lt;sequencing&gt; node in the manifest's &lt;sequencingCollection&gt;, and that
            &lt;sequencing&gt; node contains the requested node and attribute:
            <ul>
            <li>
            If the attribute value is valid, the attribute value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = true</c>, the default value is returned.
            </li>
            <li>
            Otherwise, if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations = false</c>, an exception is thrown.
            </li>
            </ul>
            </para>
            <para>
            Otherwise, the default value is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is invalid.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader">
            <summary>
            Rules related to rollup. Every sequencing node can have 0 or more of these.
            </summary>
            <remarks>
            Corresponds to the &lt;imsss:rollupRule&gt; node, the &lt;imsss:rollupConditions&gt; node, and the
            &lt;imsss:rollupAction&gt; node.  It contains the list of &lt;imsss:rollupCondition&gt; nodes.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor.
            </summary>
            <param name="rollupRuleNode">The &lt;imsss:rollupRule&gt; node to parse.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rollupRuleNode"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="rollupRuleNode"/> does not point to a &lt;imsss:rollupRule2&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.ChildActivitySet">
            <summary>
            Respresents the &lt;imsss:rollupRule&gt;/childActivitySet attribute.
            </summary>
            <remarks>
            Default value is <c>RollupChildActivitySet.All</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.MinimumCount">
            <summary>
            Respresents the &lt;imsss:rollupRule&gt;/minimumCount attribute.
            </summary>
            <remarks>
            Default value is 0.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.MinimumPercent">
            <summary>
            Respresents the &lt;imsss:rollupRule&gt;/minimumPercent attribute.
            </summary>
            <remarks>
            Default value is 0.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.ConditionCombination">
            <summary>
            Respresents the &lt;imsss:rollupRule&gt;/&lt;imsss:rollupConditions&gt;/conditionCombination attribute.
            </summary>
            <remarks>
            Default value is <c>SequencingConditionCombination.Any</c>, which is applied if the conditionCombination attribute
            is missing.  If the entire &lt;imsss:rollupConditions&gt; node is missing, the value of
            <c>SequencingConditionCombination.Any</c> is also returned in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, and a warning issued
            to the log.  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> this issues an error to the log and an exception is thrown.
            <para>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> and there is more than one &lt;imsss:rollupConditions&gt;
            node, a warning is issued to the log and only the first node is parsed.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid, or there are more than one &lt;imsss:rollupConditions&gt; nodes, or the 
            node is missing.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.Conditions">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;<Typ>SequencingRollupConditionNodeReader</Typ>&gt;</c> containing the &lt;imsss:rollupCondition&gt;
            nodes inside this &lt;imsss:rollupRule&gt;/&lt;imsss:rollupConditions&gt;.
            </summary>
            <remarks>
            The <c>ReadOnlyCollection&lt;SequencingRollupConditionNodeReader&gt;</c> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid &lt;imsss:rollupCondition&gt; nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid &lt;imsss:rollupCondition&gt; nodes are ignored.
            </para>
            <para>SCORM dictates there should always be exactly one &lt;imsss:rollupConditions&gt; node containing at
            least one &lt;imsss:rollupCondition&gt; node.  However, it is possible this ReadOnlyCollection will contain zero nodes,
            if none exist in the manifest.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid
            &lt;imsss:rollupCondition&gt; node, or the &lt;rollupConditions&gt; node does not exist.</exception>
            <example>
            Iterate through all rollup conditions in the manifest's sequencing collection node.
            <code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingRollupRuleNodeReader rollupRule in sequencing.RollupRules)
                    {
                        foreach (SequencingRollupConditionNodeReader rollupCondition in rollupRule.Conditions)
                        {
                            // use the rollup condition reader
                        }
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader.Action">
            <summary>
            Respresents the &lt;imsss:rollupRule&gt;/&lt;imsss:rollupAction&gt;/action attribute.
            </summary>
            <remarks>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> and the &lt;imsss:rollupAction&gt; node has
            an invalid action attribute, a default action of <c>RollupAction.Satisfied</c> is returned.  Note: this
            is not a SCORM default.
            <para>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> and there is more than one &lt;imsss:rollupAction&gt;
            node, a warning is issued to the log and only the first node is parsed.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid, or there are more than one &lt;imsss:rollupAction&gt; nodes.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingRollupConditionNodeReader">
            <summary>
            A conditon for rollup. Every sequencing rule can have 0 or many of these.
            </summary>
            <remarks>
            Corresponds to the &lt;imsss:rollupCondition&gt; node.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingRollupConditionNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor.
            </summary>
            <param name="rollupConditionNode">The &lt;imsss:rollupCondition&gt; node to parse.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rollupConditionNode"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="rollupConditionNode"/> does not point to a &lt;imsss:rollupCondition2&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupConditionNodeReader.Operator">
            <summary>
            Respresents the &lt;imsss:rollupCondition&gt;/operator attribute.
            </summary>
            <remarks>
            Default value is <c>SequencingConditionOperator.NoOp</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRollupConditionNodeReader.Condition">
            <summary>
            Respresents the &lt;imsss:rollupCondition&gt;/condition attribute.
            </summary>
            <remarks>
            Non-SCORM default is <c>RollupCondition.Satisfied</c>.  This is returned when the attribute is not included, or if
            the attribute value is invalid and the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader">
            <summary>
            An objective related to the sequencing node. Every sequencing node can have 1 or 
            more of these. One of them must be the primary objective.
            </summary>
            <remarks>
            Corresponds to the &lt;imsss:primaryObjective&gt; and &lt;imsss:objective&gt; nodes.
            Contains the &lt;imsss:minNormalizedMeasure&gt; node and &lt;imsss:mapInfo&gt; nodes.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor.
            </summary>
            <param name="objectiveNode">A navigator to an &lt;objective&gt; or &lt;primaryObjective&gt; node.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="objectiveNode"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="objectiveNode"/> does not point to a &lt;imsss:primaryObjective&gt; 
            or &lt;imsss:objective&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader.IsPrimaryObjective">
            <summary>
            True if this node is a &lt;primaryObjective&gt; node.  Otherwise, false (it is an &lt;objective&gt; node).
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader.SatisfiedByMeasure">
            <summary>
            Returns the value of the satisfiedByMeasure attribute.  Default value of <c>false</c> is returned if the
            attribute is omitted.  The <c>false</c> value will also be returned in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> if an
            invalid value is applied to the satisfiedByMeasure attribute (legal values are "true", "false", "0", and "1".)
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader.Id">
            <summary>
            Get the value of the objectiveID attribute.
            </summary>
            <remarks>
            If the attribute value is an illegal URI: 
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, will log a warning and return <c>String.Empty</c> 
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, will log an error and throw an <Typ>InvalidPackageException</Typ>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader.MinimumNormalizedMeasure">
            <summary>
            Get the value of the &lt;minimumNormalizedMeasure&gt; node.
            </summary>
            <remarks>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, if there are more than one &lt;minimumNormalizedMeasure&gt; nodes within
            the objective, a warning is added to the log and the first node is returned, or if the value is not a
            decimal value, a warning is added to the log and a value of "1.0" is returned..  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>
            in these cases, errors are added to the log and an <Typ>InvalidPackageException</Typ> is thrown.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveNodeReader.Mappings">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;SequencingObjectiveMapNodeReader&gt;</c> containing the &lt;imsss:mapInfo&gt;
            nodes inside this &lt;imsss:objective&gt; or &lt;imsss:primaryObjective&gt;.
            </summary>
            <remarks>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, an <Typ>InvalidPackageException</Typ> is thrown if there are illegal
            &lt;imsss:mapInfo&gt; nodes in the list.  For instance, if there are more than one &lt;imsss:mapInfo&gt; nodes
            containing an attribute value of "true" for the "readSatisfiedStatus" attribute, this is in illegal
            condition.
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, a warning is added to the log and only the first instance of a 
            &lt;imsss:mapInfo&gt; containing a value of "true" for a specific attribute is parsed.  Any illegal
            &lt;imsss:mapInfo&gt; nodes are omitted and ignored.
            </para>
            </remarks>
            <example>
            Iterate through all &lt;mapInfo&gt; nodes in a manifest's sequencing collection.
            <code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingObjectiveNodeReader objective in sequencing.Objectives.Values)
                    {
                        foreach (SequencingObjectiveMapNodeReader map in objective.Mappings)
                        {
                            // Use the SequencingObjectiveMapNodeReader
                        }
                    }
                }
            </code></example>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader">
            <summary>
            Map an objective to a global objective. Every objective can be mapped to 
            0 or more global objectives.
            </summary>
            <remarks>
            Corresponds to the &lt;imsss:mapInfo&gt; node.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor
            </summary>
            <param name="mapInfoNode">The &lt;imsss:mapInfo&gt; node to parse.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapInfoNode"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="mapInfoNode"/> does not point to a &lt;imsss:mapInfo&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader.TargetObjectiveId">
            <summary>
            Represents the &lt;imsss:mapInfo&gt;/targetObjectiveId attribute.
            </summary>
            <remarks>The attribute value must be a valid URI, and may not be whitespace.  The default value
            is String.Empty.  SCORM mandates that this &lt;imsss:mapInfo&gt; node be ignored when targetObjectiveId is
            missing, which is signified by the String.Empty return value.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader.ReadSatisfiedStatus">
            <summary>
            Represents the &lt;imsss:mapInfo&gt;/readSatisfiedStatus attribute.
            </summary>
            <remarks>Default value is true.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader.ReadNormalizedMeasure">
            <summary>
            Represents the &lt;imsss:mapInfo&gt;/readNormalizedMeasure attribute.
            </summary>
            <remarks>Default value is true.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader.WriteSatisfiedStatus">
            <summary>
            Represents the &lt;imsss:mapInfo&gt;/writeSatisfiedStatus attribute.
            </summary>
            <remarks>Default value is false.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingObjectiveMapNodeReader.WriteNormalizedMeasure">
            <summary>
            Represents the &lt;imsss:mapInfo&gt;/writeNormalizedMeasure attribute.
            </summary>
            <remarks>Default value is false.</remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader">
            <summary>
            A single rule related to sequencing.
            </summary>
            <remarks>
            Corresponds to the &lt;imsss:preConditionRule&gt;, &lt;imsss:exitConditionRule&gt;, and &lt;imsss:postConditionRule&gt;
            nodes, subnodes &lt;imsss:ruleConditions&gt;, and &lt;imsss:ruleAction&gt; and holds a list of the &lt;imsss:ruleConditions&gt; under
            the &lt;imsss:ruleConditions&gt; node.
            <para>
            Note that whether this node actually corresponds to a pre, exit, or post condition is information not held in this
            node.  Rather, these nodes are contained as separate lists of pre, exit, and post condition nodes in the
            <Typ>SequencingNodeReader</Typ>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader,Microsoft.LearningComponents.Manifest.ActivityNodeReader,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor
            </summary>
            <param name="sequencingRuleNode">The node to parse.  Must be of type &lt;preConditionRule&gt;,
            &lt;exitConditionRule&gt;, or &lt;postConditionRule&gt;.</param>
            <param name="manifest">The <Typ>ManifestReader</Typ> that contains this &lt;sequencing&lt; node.  Can be null.</param>
            <param name="activity">The <Typ>ActivityNodeReader</Typ> that contains this &lt;sequencing&lt; node.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="mapInfoNode"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="mapInfoNode"/> does not point to a &lt;imsss:mapInfo&gt; node.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader.GetRuleConditionsNode">
            <summary>
            Helper function to get the &lt;imsss:ruleConditions&gt; node.  Caller should check the <c>Count</c> to make sure
            there is a node.  This method returns with the <Typ>XPathNodeIterator</Typ> already selected to the first node,
            so the caller should *not* call <c>MoveNext()</c>.
            </summary>
            <remarks>
            There should be only one &lt;imsss:ruleConditions&gt; node.  If there is more than one, in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>,
            a warning is issued to the log and the first one is returned.  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an error is issued to the
            log and an <Typ>InvalidPackageException</Typ> is thrown.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Thrown in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there are multiple
            &lt;imsss:ruleCondition&gt; nodes.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader.Combination">
            <summary>
            Returns the &lt;imsss:ruleConditions&gt;/conditionCombination attribute value.
            </summary>
            <remarks>
            There should be only one &lt;imsss:ruleConditions&gt; node.  If there is more than one, in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>,
            a warning is issued to the log and the first one is returned.  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an error is issued to the
            log and an <Typ>InvalidPackageException</Typ> is thrown.
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> if there is an invalid token for the conditionCombination attribute, the default
            value of <c>SequencingConditionCombination.All</c> is returned.
            </para>
            The default value of <c>SequencingConditionCombination.All</c> is returned in both <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>
            and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is no &lt;imsss:ruleConditions&gt; node.
            <para>
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Thrown in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there are multiple
            &lt;imsss:ruleConditions&gt; nodes or if the conditionCombination attribute is an invalid value.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader.Conditions">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;SequencingRuleConditionNodeReader&gt;</c> containing the &lt;imsss:ruleCondition&gt;
            nodes inside the &lt;imsss:ruleConditions&gt;.
            </summary>
            <remarks>
            The <c>ReadOnlyCollection&lt;SequencingRuleConditionNodeReader&gt;</c> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid &lt;imsss:ruleCondition&gt; nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid &lt;imsss:ruleCondition&gt; nodes are ignored.
            </para>
            <para>
            If there are no &lt;imsss:ruleCondition&gt; nodes, an empty <Typ>ReadOnlyCollection&lt;SequencingRuleConditionNodeReader&gt;</Typ>
            is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid
            &lt;imsss:ruleCondition&gt; node.</exception>
            <example>
            Iterate through all rule conditions for the post condition rules in a manifest's sequencing collection.
            <code language="C#">
                foreach(SequencingNodeReader sequencing in manifest.SequencingCollection.Values)
                {
                    foreach (SequencingRuleNodeReader rule in sequencing.PostConditionRules)
                    {
                        foreach (SequencingRuleConditionNodeReader condition in rule.Conditions)
                        {
                            // Use the SequencingRuleConditionNodeReader
                        }
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader.Action">
            <summary>
            Returns the &lt;imsss:ruleAction&gt;/action attribute value, or <c>SequencingRuleAction.NoAction</c> if there is none.
            </summary>
            <remarks>
            There should be only one &lt;imsss:ruleAction&gt; node.  If there is more than one, in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>,
            a warning is issued to the log and the first one is returned.  In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an error is issued to the
            log and an <Typ>InvalidPackageException</Typ> is thrown.
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> if there is an invalid token for the action attribute, <c>SequencingRuleAction.NoAction</c>
            is returned.
            </para>
            <para>
            Only a subset of <Typ>SequencingRuleAction</Typ> values are valid for each rule condition type.
            For &lt;imsss:preConditionRule&gt;, valid <Typ>SequencingRuleAction</Typ> values are: <c>Skip, Disabled,
            HiddenFromChoice, and StopForwardTraversal</c>.
            For &lt;imsss:exitConditionRule&gt;, the only valid <Typ>SequencingRuleAction</Typ> value is: <c>Exit</c>.
            For &lt;imsss:postConditionRule&gt;, valid <Typ>SequencingRuleAction</Typ> values are: <c>ExitParent,
            ExitAll, Retry, RetryAll, Continue, and Previous</c>.
            </para>
            <para>
            <c>SequencingRuleAction.NoAction</c> is returned in both <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>
            and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is no &lt;imsss:ruleAction&gt; node.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Thrown in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there are multiple
            &lt;imsss:ruleAction&gt; nodes or if the action attribute is an invalid value.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.SequencingRuleConditionNodeReader">
            <summary>
            A single rule condition associated with sequencing.
            </summary>
            <remarks>
            Corresponds to the &lt;imsss:ruleCondition&gt; node.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.SequencingRuleConditionNodeReader.#ctor(System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader,Microsoft.LearningComponents.Manifest.ActivityNodeReader,Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Constructor
            </summary>
            <param name="ruleConditionNode">The &lt;imsss:ruleCondition&gt; node to parse.</param>
            <param name="manifest">The <Typ>ManifestReader</Typ> that contains this &lt;sequencing&lt; node.  Can be null.</param>
            <param name="activity">The <Typ>ActivityNodeReader</Typ> that contains this &lt;sequencing&lt; node.</param>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="validatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Where errors and warnings are logged.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="rollupRuleNode"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><paramref name="rollupRuleNode"/> does not point to a &lt;imsss:rollupRule2&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleConditionNodeReader.ReferencedObjectiveId">
            <summary>
            Represents the &lt;imsss:ruleCondition&gt;/referencedObjective attribute.
            </summary>
            <remarks>
            Default value is <c>String.Empty</c>, which is returned when the attribute is omitted, or
            when the attribute value is invalid or
            when the value is not an objective identifier in the surrounding activity.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set and the
            attribute value is invalid, such as a string containing only whitespace, or is not an objective
            identifier in the surrounding activity.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleConditionNodeReader.MeasureThreshold">
            <summary>
            Represents the &lt;imsss:ruleCondition&gt;/measureThreshold attribute.
            </summary>
            <remarks>
            Default value is <c>0</c>, which is returned when the attribute is omitted, or
            when the attribute value is invalid and the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid, such as a non-decimal value outside the range of [-1 to 1].</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleConditionNodeReader.Operator">
            <summary>
            Represents the &lt;imsss:ruleCondition&gt;/operator attribute.
            </summary>
            <remarks>
            Default value is <c>SequencingConditionOperator.NoOp</c>, which is returned when the attribute is omitted, or
            when the attribute value is invalid and the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid, e.g. when it is not one of the valid tokens: noOp, not.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.SequencingRuleConditionNodeReader.Condition">
            <summary>
            Represents the &lt;imsss:ruleCondition&gt;/condition attribute.
            </summary>
            <remarks>
            Default value is <c>SequencingRuleCondition.Always</c>, which is returned when the attribute is omitted, or
            when the attribute value is invalid and the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid, e.g. when it is not one of the valid tokens: satisfied, objectiveStatusKnown,
            objectiveMeasureKnown, objectiveMeasureGreaterThan, objectiveMeasureLessThan, completed, activityProgressKnown,
            attempted, attemptLimitExceeded, timeLimitExceeded, outsideAvailableTimeRange, always.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ReadOnlyMlcDictionary`1.#ctor">
            <summary>
            Constructor to create empty dictionary.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ReadOnlyMlcDictionary`1.#ctor(Microsoft.LearningComponents.Manifest.Helper,System.Xml.XPath.XPathNavigator,System.Xml.XPath.XPathExpression,System.String,Microsoft.LearningComponents.Manifest.CreateItemFromXPathNavigatorDelegate{`0},Microsoft.LearningComponents.Manifest.KeyMissingDelegate)">
            <summary>
            Read only Mlc dictionary.
            </summary>
            <param name="helper">Helper object.</param>
            <param name="collectionNode">The node that will be searched for items in this dictionary 
            collection.</param>
            <param name="childValueXPath">The xpath expression, relative to <paramref name="collectionNode"/> 
            of values in the dictionary.</param>
            <param name="childKeyXPath">The xpath expression, relative to <paramref name="childValueXPath"/>that 
            will return the key for the associated value in the collection.</param>
            <param name="createItemDelegate">The delegate which will be result of the xpath query for 
            an item in the collection and will create the actual instance of the value of the collection. </param>
            <param name="keyMissingDelegate">What to call if the node doesn't have the requested key.</param>
            <remarks>
            The dictionary gets built in the constructor.
            <para>
            For instance:
            collectionNode is the manifest node.
            childValueXPath = ".//resource"
            childKeyXpath = "@id"
            Then, 
            ContainsKey does xpath query: childValueXPath + "[" + childKeyXPath + "=\"{0}\"]" where {0} is parameter
                to ContainsKey.
            Keys does xpath query: childValueXPath + "/" childKeyXPath
            ETC...
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ReadOnlyMlcCollection`1.#ctor">
            <summary>
            Constructor to create an empty collection.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ReadOnlyMlcCollection`1.Contains(`0)">
            <summary>
            
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.OrganizationNodeReader">
            <summary>
            OrganizationNodeReader provides read-only access to an organization in a package.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.#ctor(Microsoft.LearningComponents.PackageReader,System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader)">
            <summary>
            Provides information about an organization.
            </summary>
            <param name="packageReader"></param>
            <param name="organizationNode">Points to this organization.
            </param>
            <param name="manifestReader">The <Typ>ManifestReader</Typ> that contains this organization.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.CreateMetadataNavigator">
            <summary>
            Metadata applied to the organization.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.CacheMlcMetadata(System.String,System.String@,System.String,System.Int32)">
            <summary>
            Helper method to get mlc metadata data from the organization/metadata node.
            </summary>
            <param name="nodeName">Name of the node under the metadata node that contains the data.</param>
            <param name="cache">Where to store the retrieved metadata if null.  If not null, this method just returns
            the cached value.</param>
            <param name="defaultValue">Default to use if requested data doesn't exist, or metadata node doesn't exist.</param>
            <param name="maxLength">Maximum length of the returned string.</param>
            <returns>The value obtained from the metadata.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.CreateNavigator">
            <summary>
            Return the XPathNavigator for this resource.
            </summary>
            <remarks>
            This allows an application to get custom namespaced data (e.g. "foo:bar") from the XML.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Id">
            <summary>
            Id unique within the package for the organization.
            </summary>
            <remarks>
            Returns <c>String.Empty</c> if the identifier attribute is missing and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set, 
            and issues a warning to the log.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Identifier is missing and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Title">
            <summary>
            Title (description) of the organization.
            </summary>
            <remarks>
            Returns <c>String.Empty</c> if the &lt;title&gt; node is missing and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set, 
            and issues a warning to the log.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">&lt;title&gt; node is missing and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Metadata">
            <summary>
            Return a reader of the organization level metadata.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If there are multiple &lt;metadata&gt; nodes.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Description">
            <summary>
            Description of the organization.
            </summary>
            <remarks>
            Returns <c>String.Empty</c> if it does not exist in the package.  Max length is 1024; uses 
            <c><Typ>ManifestReaderSettings</Typ>.FixMlcRequirementViolation</c> and <c>PackageValidatorSettings.MlcRequirementValidation</c> to
            determine what to do in case of error.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Instructions">
            <summary>
            Instructions to the learner executing the organization.
            </summary>
            <remarks>
            Returns <c>String.Empty</c> if it does not exist in the package.  Max length is 4096; uses
            <c><Typ>ManifestReaderSettings</Typ>.FixMlcRequirementViolation</c> and <c>PackageValidatorSettings.MlcRequirementValidation</c> to
            determine what to do in case of error.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.PointsPossible">
            <summary>
            The nominal maximum number of points possible for the organization.
            </summary>
            <remarks>
            Returns <c>null</c> if it does not exist in the package or as the default.  Must be blank or a valid <c>float</c> value; uses
            <c><Typ>ManifestReaderSettings</Typ>.FixMlcRequirementViolation</c> and <c>PackageValidatorSettings.MlcRequirementValidation</c> to
            determine what to do in case of error (e.g. return default value or throw <Typ>InvalidPackageException</Typ>.
            <para>
            The value of PointsPossible is contained in the &lt;organization&gt; node's &lt;metadata&gt;.
            </para>
            <para>
            The PointsPossible value originates from LRM content.  When <Typ>ManifestConverter</Typ> is used to import LRM content, it
            creates an &lt;mlc:pointsPossible&gt; node under the organization's &lt;metadata&gt;.
            Note that this property must be a valid <c>float</c>.  However, <Typ>ManifestConverter</Typ>
            enforces a value from 0 - 10000 when converting from an <c>index.xml</c>.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Structure">
            <summary>
            The shape of the organization.  
            </summary>
            <remarks>Returns "hierarchical" (without the quotes) if there is no structure attribute.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.ObjectivesGlobalToSystem">
            <summary>
            If true, the objective information (for instance, the learner's scores) should 
            update the learner's lifetime score for the objective.
            </summary>
            <remarks>
            Default value is true.  If the attribute is invalid (non-bool) and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set,
            return the default value and issue a warning to the log.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Attribute is invalid and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Activities">
            <summary>
            List of activities within the organization. This list returns all the top-level
            activities in the organization. Each of those Activity objects includes its child activities.
            </summary>
            <remarks>List all list elements, when this property is accessed, the list is populated.
            <para>
            The activity (e.g. &lt;item&gt;) nodes are in this collection in the same order that they are in the manifest file.
            </para>
            <para>
            &lt;item&gt; nodes that do not have a valid identifier attribute are not included in this list.
            </para>
            <para>
            Although SCORM mandates that no two item nodes may have the same identifier in a manifest,
            there is no check for that when building this collection.  It is up to the application to handle
            if multiple items have identical identifier attributes.
            </para>
            </remarks>
            <example>
            Iterate through all top-level activities in the manifest.
            <code language="C#">
                foreach (OrganizationNodeReader organization in manifest.Organizations)
                {
                    foreach (ActivityNodeReader activity in organization.Activities)
                    {
                        // use the ActivityNodeReader
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.OrganizationNodeReader.Sequencing">
            <summary>
            Returns sequencing information which applies at the organization level.
            </summary>
            <remarks>
            If there is no sequencing information for this organization, the property returns null.
            This information is only valid for SCORM 2004 content. It will be null for earlier versions
            of SCORM.
            <para>
            If there are multiple &lt;sequencing&gt; nodes and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set, a warning is issued to the log.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">
            There are multiple &lt;sequencing&gt; nodes and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set.
            </exception>
            <example>
            Iterate through all the sequencing nodes that are beneath the organization nodes in the manifest.
            <code language="C#">
                foreach (OrganizationNodeReader organization in manifest.Organizations)
                {
                    SequencingNodeReader sequencing = organization.Sequencing;
                    // use the SequencingNodeReader
                }
            </code></example>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ActivityNodeReader">
            <summary>
            Activity class corresponds to the item node in the manifest.
            </summary>
            <remarks>
            Corresponds to an &lt;item&gt; node under the &lt;manifest&gt;/&lt;organizations&gt;/&lt;organization&gt; hierarchy.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ActivityNodeReader.#ctor(Microsoft.LearningComponents.PackageReader,System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader)">
            <summary>
            Constructor. 
            </summary>
            <param name="packageReader"></param>
            <param name="itemNode">The &lt;item&gt; node.</param>
            <param name="manifestReader">A reader of the manifest.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ActivityNodeReader.CreateMetadataNavigator">
            <summary>
            Metadata applied to the activity. If there is no metadata for this activity, the property returns null.
            </summary>
            <remarks>
            Returns the &lt;metadata&gt; node child of the &lt;item&gt; node, or <c>null</c> if none exists.
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, if there is more than one &lt;metadata&gt; node, a warning is put into the log
            and the first node is returned.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ActivityNodeReader.ValidateItemReferencingScoResource(System.String)">
            <summary>
            Does validation for SCORM 1.2 (that this item references a SCO) and further validation for SCORM 1.3
            (that this is a leaf item).
            </summary>
            <param name="nodeName"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ActivityNodeReader.CacheLmsUiValues">
            <summary>
            Looks for and caches all &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt;
            values.  If there are invalid tokens or duplicate nodes, they are ignored or exceptions are thrown in accordance with the
            parsing mode.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ActivityNodeReader.CreateNavigator">
            <summary>
            Return the XPathNavigator for this resource.
            </summary>
            <remarks>
            This allows an application to get custom namespaced data (e.g. "foo:bar") from the XML.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.ReferencedOrganization">
            <summary>
            If the identifierref of this activity points to a submanifest, this returns the first organization
            within that submanifest.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.Id">
            <summary>
            An identifier for the activity that is unique within the package.
            </summary>
            <remarks>
            This element is required. If it does not exist or is invalid in the package, this property will 
            throw an InvalidPackageException if the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>.
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, it will return <c>String.Empty</c>.
            <para>
            Corresponds to the &lt;item&gt;/identifier attribute.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>
            and the attribute is missing or invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.Title">
            <summary>
            Title (description) of the activity.  Represents the &lt;title&gt; node under the &lt;item&gt;.
            </summary>
            <remarks>This node is required for each &lt;item&gt;.  If it does not exist in the package, this property will 
            return <c>String.Empty</c> in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, and throw an <c>InvalidPackageException</c>
            in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The &lt;title&gt; node does not exist
            and <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.Resource">
            <summary>
            Primary resource for the activity. For activities that do not have a resource, this 
            returns null.
            </summary>
            <remarks>
            If there is no resource associated with this activity, this property returns null. 
            
            In SCORM 2004 packages, if the activity has a resource and also has child &lt;item&gt; nodes, this
            property will throw an InvalidPackageException in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>.
            <para>
            If parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> and the activity has an identifierref attribute,
            but no matching resource can be found, a warning is issued to the log and null is returned.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and
            the identifierref attribute is not a valid id value, there are child &lt;item&gt; nodes,
            or there is no corresponding resource with a matching identifier.</exception>
            <example>
            Given an <Typ>ActivityNodeReader</Typ>, iterate through the resources for all the child activities.
            <code language="C#">
                        foreach (ActivityNodeReader child in activity.ChildActivities)
                        {
                            ResourceNodeReader resource = child.Resource;
                            if (resource != null)
                            {
                                // Use the ResourceNodeReader
                            }
                        }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.IsVisible">
            <summary>
            Returns true if the activity should be visible.
            </summary>
            <remarks>
            The default value, if absent, is "true".
            <para>
            If the value of the attribute is non-boolean, and the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>,
            a warning is put into the log, if provided, and the default value is returned.  If the parsing mode is
            <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, an error is put into the log and an exception is thrown.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, and the attribute
            value is non-boolean.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.ResourceParameters">
            <summary>
            Parameters that should be passed to the resource at run time. If there are no parameters for this 
            resource, the property returns <c>String.Empty</c>.
            </summary>
            <remarks>
            The default value, if absent, is <c>String.Empty</c>.
            <para>
            SCORM dictates that this attribute is valid only for items that reference resources.  However,
            in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> this still simply returns <c>String.Empty</c> even when the item
            does not reference a resource.  If the application wishes to be that strict, it can check the
            <c>Resource</c> property when this returns a non-<c>String.Empty</c> value.  If the <c>Resource</c> property
            returns no resources, the application will know that this attribute value is not technically allowed.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.Metadata">
            <summary>
            Return a reader of the activity level metadata.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.Prerequisites">
            <summary>
            Return the prerequisites for this activity. That is, the conditions 
            that must be met in order for this activity to be activated. Returns <c>null</c>
            if there are no prerequisites.
            </summary>
            <remarks>
            This is only valid 
            for SCORM 1.2 content and will be null in other cases. For SCORM 2004 content, 
            use the Sequencing information.
            <para>
            This corresponds to the &lt;adlcp:prerequisites&gt; element.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>
            and the prerequisites script is syntactically invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.Sequencing">
            <summary>
            Sequencing information for this node.
            </summary>
            <remarks>
            If there is no sequencing information for this activity, the property returns null.
            This information is only valid for SCORM 2004 content. It will be null for earlier versions
            of SCORM.
            </remarks>
            <example>
            Iterate through the sequencing nodes on the top-level activity nodes in the manifest.
            <code language="C#">
                foreach (OrganizationNodeReader organization in manifest.Organizations)
                {
                    foreach (ActivityNodeReader activity in organization.Activities)
                    {
                        SequencingNodeReader sequencing = activity.Sequencing;
                        if (sequencing != null)
                        {
                            // use the SequencingNodeReader
                        }
                    }
                }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.ChildActivities">
            <summary>
            Return list of children of this activity.
            </summary>
            <remarks>
            If this is a SCORM 2004 package and there are child activities and a resource for this activity,
            this property will throw an <Typ>InvalidPackageException</Typ> if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set, or issue
            a warning to the log if <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c> is set.
            <para>
            Although SCORM mandates that no two item nodes may have the same identifier in a manifest,
            there is not check for that when building this collection.  It is up to the application to handle
            if multiple items have identical identifier attributes.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException"><c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> is set and there are child activities
            and resources on this node.</exception>
            <example>
            Given an <Typ>ActivityNodeReader</Typ>, iterate through all child activities.
            <code language="C#">
                        foreach (ActivityNodeReader child in activity.ChildActivities)
                        {
                            // use the ActivityNodeReader
                        }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.TimeLimitAction">
            <summary>
            Action to perform when this activity exceeds the timelimit.  Corresponds to the
            &lt;adlcp:timeLimitAction&gt; node.
            </summary>
            <remarks>
            The default is "continue,no message".
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.DataFromLms">
            <summary>
            Returns the &lt;adlcp:dataFromLMS&gt; value, or <c>String.Empty</c> if there is none.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.CompletionThreshold">
            <summary>
            Returns the &lt;adlcp:completionThreshold&gt; value, or null if none.
            </summary>
            <remarks>
            Default value is null.
            </remarks>
            <remarks>
            SCORM 1.2 content always returns null for this value.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the
            attribute value is invalid.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.MaximumTimeAllowed">
            <summary>
            Maximum time allowed on this activity. This is only valid for SCORM 1.2 content. 
            </summary>
            <remarks>
            The default value, if absent, <c>null</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.MasteryScore">
            <summary>
            The passing score for this activity. This is only valid for SCORM 1.2 content.
            </summary>
            <remarks>
            Default value, if missing or out of range, is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.HideContinueUI">
            <summary>
            Represents the &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; value
            of "continue".  Default value is <c>false</c>.
            </summary>
            <remarks>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>: If a 
            &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; token value is
            invalid, it is ignored.  If there are more than one &lt;adnav:presentation&gt; or &lt;adlnav:navigationInterface&gt;
            nodes, only the first is read and the others are ignored.
            <para>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an <Typ>InvalidPackageException</Typ> is thrown in the above cases.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and a token value is invalid, or
            there are invalid duplicate nodes.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.HidePreviousUI">
            <summary>
            Represents the &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; value
            of "previous".  Default value is <c>false</c>.
            </summary>
            <remarks>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>: If a 
            &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; token value is
            invalid, it is ignored.  If there are more than one &lt;adnav:presentation&gt; or &lt;adlnav:navigationInterface&gt;
            nodes, only the first is read and the others are ignored.
            <para>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an <Typ>InvalidPackageException</Typ> is thrown in the above cases.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and a token value is invalid, or
            there are invalid duplicate nodes.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.HideExitUI">
            <summary>
            Represents the &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; value
            of "exit".  Default value is <c>false</c>.
            </summary>
            <remarks>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>: If a 
            &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; token value is
            invalid, it is ignored.  If there are more than one &lt;adnav:presentation&gt; or &lt;adlnav:navigationInterface&gt;
            nodes, only the first is read and the others are ignored.
            <para>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an <Typ>InvalidPackageException</Typ> is thrown in the above cases.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and a token value is invalid, or
            there are invalid duplicate nodes.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ActivityNodeReader.HideAbandonUI">
            <summary>
            Represents the &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; value
            of "abandon".  Default value is <c>false</c>.
            </summary>
            <remarks>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>: If a 
            &lt;item&gt;/&lt;adlnav:presentation&gt;/&lt;adlnav:navigationInterface&gt;/&lt;adlnav:hideLMSUI&gt; token value is
            invalid, it is ignored.  If there are more than one &lt;adnav:presentation&gt; or &lt;adlnav:navigationInterface&gt;
            nodes, only the first is read and the others are ignored.
            <para>
            If the parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> an <Typ>InvalidPackageException</Typ> is thrown in the above cases.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and a token value is invalid, or
            there are invalid duplicate nodes.</exception>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.ResourceNodeReader">
            <summary>
            ResourceNodeReader provides read-only access to a resource defined in a package manifest.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ResourceNodeReader.#ctor(Microsoft.LearningComponents.PackageReader,System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader,System.Uri)">
            <summary>
            Constructor.
            </summary>
            <param name="packageReader"></param>
            <param name="resourceNode">A navigator pointing to a &lt;resource&gt; node.</param>
            <param name="manifestReader">A reader of the manifest.</param>
            <param name="xmlBase">The xml:base to use when constructing the href location for href values that are relative Uri's.
            Set to <c>null</c> if there is no xml:base.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ResourceNodeReader.ValidateActivityResource">
            <summary>
            Called from ActivityNodeReader when this resource belongs to an activity, this method validates against the CAM
            rules that a resource owned by an activity:
            1. Has an href.
            2. Has an adlcp:scormType of "sco".
            3. Has a type of "webcontent".
            </summary>
            <remarks>
            Note that if the resource type is not "Sco" or "Asset" the validation will always pass.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ResourceNodeReader.CreateMetadataNavigator">
            <summary>
            Returns the &lt;metadata&gt; node child of the &lt;resource&gt; node, or <c>null</c> if none exists.
            </summary>
            <remarks>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, if there is more than one &lt;metadata&gt; node, a warning is put into the log
            and the first node is returned.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.ResourceNodeReader.CreateNavigator">
            <summary>
            Return the XPathNavigator for this resource.
            </summary>
            <remarks>
            This allows an application to get custom namespaced data (e.g. "foo:bar") from the XML.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.Id">
            <summary>
            Represents the &lt;resource&gt;/identifer attribute.
            </summary>
            <remarks>
            If parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, and this attribute is missing, returns String.Empty and issues
            a warning to the log.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">If parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and this attribute is missing.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.ResourceType">
            <summary>
            Represents the type of resource.
            </summary>
            <remarks>
            If there is an mlc:xrloType="lrm" attribute, this returns <c>ResourceType.Lrm</c>.  Otherwise,
            it returns either <c>ResourceType.Sco</c> or <c>ResourceType.Asset</c> depending on the
            adlcp:scormType attribute value.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.EntryPoint">
            <summary>
            The file that should be launched when this resource is activated. 
            </summary>
            <remarks>
            Represents the href attribute of the resource.  For SCORM 2004 content, if there is no href attribute, returns null.
            For SCORM 1.2 content, logs an error if there is no href attribute.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.Metadata">
            <summary>
            Return a reader of the resource level metadata.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.Files">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;FileNodeReader&gt;</c> containing the &lt;file&gt; nodes within this &lt;resource&gt;.
            </summary>
            <remarks>
            The <Typ>ReadOnlyCollection</Typ> returned from this method is not populated until
            properties or methods on it are accessed.  This means that in <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c>, <Typ>InvalidPackageException</Typ> 
            may be thrown if there are invalid nodes in the list (e.g. nodes containing illegal attribute values.)
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>ReadOnlyCollection</Typ> is returned.
            </para>
            <para>
            Note that dependency files are not included in this list.  Applications should access the
            <c>Dependency</c> property to build a full list of files for this resource.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node.</exception>
            <example>
            Given an <Typ>ActivityNodeReader</Typ>, iterate through all files in all resources in all child activities.
            <code language="C#">
                        foreach (ActivityNodeReader child in activity.ChildActivities)
                        {
                            ResourceNodeReader resource = child.Resource;
                            if (resource != null)
                            {
                                foreach (FileNodeReader file in resource.Files)
                                {
                                    // use the FileNodeReader
                                }
                            }
                        }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.Dependencies">
            <summary>
            Returns the <c>ReadOnlyCollection&lt;ResourceNodeReader&gt;</c> containing the resources this resource is dependent upon.
            </summary>
            <remarks>
            <para>
            To build this list, the identifierref attributes on the &lt;dependency&gt; nodes inside this &lt;resource&gt; node
            are cross-referenced with the identifier attributes on the &lt;resource&gt; nodes within this manifest.
            </para>
            <para>
            The <Typ>ReadOnlyCollection</Typ> returned from this property is populated upon calling this property.  E.g. non-trivial
            processing time is required.
            </para>
            <para>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, warnings are added to the log and invalid nodes are ignored.
            </para>
            <para>
            If there are no nodes of the specified type, an empty <Typ>ReadOnlyCollection</Typ> is returned.
            </para>
            <para>
            Note that this only includes dependencies that are one layer deep.  E.g. if resource A has resource B
            as a dependency, resource B is included in the list of dependencies for resource A.  However, if resource B 
            has a dependency on resource C, resource C is not included in the list of dependencies for resource A.
            An application can recursively call each <Typ>ResourceNodeReader</Typ> dependency list, but care must
            be taken for circular dependencies to avoid a code-deadlock.  E.g. if resource A has resource B as a dependency,
            but resource B has resource A as a dependency, there is a circular dependency.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> if there is an invalid node.</exception>
            <example>
            Given an <Typ>ActivityNodeReader</Typ>, iterate through all dependencies on all resources on all child activities.
            <code language="C#">
                        foreach (ActivityNodeReader child in activity.ChildActivities)
                        {
                            ResourceNodeReader resource = child.Resource;
                            if (resource != null)
                            {
                                foreach (ResourceNodeReader dependency in resource.Dependencies)
                                {
                                    // Use the ResourceNodeReader if not null
                                }
                            }
                        }
            </code></example>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.ResourceNodeReader.XmlBase">
            <summary>
            Returns the complete xml:base associated with this item.  "Complete" means that the xml:base is computed
            relative to the parent &lt;resources&gt; xml:base and its parent &lt;manifest&gt; xml:base.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.FileNodeReader">
            <summary>
            FileNodeReader provides a read-only view of files that are referenced in a manifest.
            </summary>
            <remarks>
            Parses the &lt;file&gt; node.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.FileNodeReader.#ctor(Microsoft.LearningComponents.PackageReader,System.Xml.XPath.XPathNavigator,Microsoft.LearningComponents.Manifest.ManifestReader,Microsoft.LearningComponents.Manifest.ResourceNodeReader,System.Uri)">
            <summary>
            Constructor.
            </summary>
            <param name="packageReader"></param>
            <param name="fileNode">A navigator pointing to a &lt;file&gt; node.</param>
            <param name="manifestReader">A reader of the manifest.</param>
            <param name="resourceReader">A reader of the parent resource.  This is only used by the <c>IsEntryPoint</c>
            property.  If null, <c>IsEntryPoint</c> returns false.</param>
            <param name="xmlBase">The xml:base to use when constructing the href location for href values that are relative Uri's.
            Set to <c>null</c> if there is no xml:base.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.FileNodeReader.CreateMetadataNavigator">
            <summary>
            Returns the &lt;metadata&gt; node child of the &lt;file&gt; node, or <c>null</c> if none exists.
            </summary>
            <remarks>
            In <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>, if there is more than one &lt;metadata&gt; node, a warning is put into the log
            and the first node is returned.
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.FileNodeReader.CreateNavigator">
            <summary>
            Return the XPathNavigator for this resource.
            </summary>
            <remarks>
            This allows an application to get custom namespaced data (e.g. "foo:bar") from the XML.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.FileNodeReader.Location">
            <summary>
            The location of this file. If the path is relative, then the file is within the package. If the 
            path is an absolute URL, then the file is not included in the package.
            </summary>
            <remarks>
            If the &lt;file&gt;/href is relative, this value is built relative to the xml:base attributes on 
            the &lt;manifest&gt;, &lt;resources&gt;, and &lt;resource&gt; nodes.
            <para>
            If the href attribute does not exist on the &lt;file&gt; node, and parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=true</c>,
            a warning is logged and the value <c>null</c> is returned.
            </para>
            <para>
            The location is resolved with the xml:base attributes on the manifest, resources, and resource nodes.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and the href attribute
            is absent.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.FileNodeReader.Metadata">
            <summary>
            Return a reader of the file level metadata.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The parsing mode is <c><Typ>ManifestReaderSettings</Typ>.FixScormRequirementViolations=false</c> and there is more than
            one &lt;metadata&gt; node.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.FileNodeReader.IsEntryPoint">
            <summary>
            True if this is the entry point of the parent &lt;resource&gt;.  False if it is not.
            </summary>
            <remarks>
            A file is the entry point of a resource if it is "launching point" of the resource. E.g. the &lt;file&gt;/href
            attribute matches the &lt;resource&gt;/href attribute.  Note that the &lt;resource&gt;/href attribute may be
            an external URL, and therefore no &lt;file&gt; will be the entry point.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.Manifest.MetadataNodeReader">
            <summary>
            Represents metadata within a manifest. 
            </summary>
            <remarks>
            This class does very little error checking or parsing of metadata, and is provided to
            simplify obtaining the title and description of a metadata block.  The first call to
            <Mth>GetTitle</Mth> or <Mth>GetDescriptions</Mth> will throw <Typ>InvalidPackageException</Typ>
            if the &lt;adlcp:location&gt; of the &lt;metadata&gt; points to a file that can not be
            obtained.  Thereafter, they return <c>String.Empty</c>.
            <para>
            When obtained via a <c>Metadata</c> property on <Typ>ManifestReader</Typ>, <Typ>OrganizationNodeReader</Typ>,
            <Typ>ActivityNodeReader</Typ>, <Typ>ResourceNodeReader</Typ>, or <Typ>FileNodeReader</Typ>, the
            <Mth>GetTitle</Mth> is called before the <Typ>MetadataNodeReader</Typ>
            is returned.  If a <Typ>InvalidPackageException</Typ> is thrown during this calls, it is caught
            and handled according to the chosen <Typ>ManifestReaderSettings</Typ> and package validation enforcement.
            </para>
            <para>
            This means that any additional calls to <Mth>GetTitle</Mth> or <Mth>GetDescriptions</Mth> will return <c>String.Empty</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.#ctor(Microsoft.LearningComponents.PackageReader,System.Xml.XPath.XPathNavigator,System.Uri)">
            <summary>
            Create a Metadata object.
            </summary>
            <param name="packageReader">The package that contains any metadata files that are external to the 
            manifest.  If null, this <Typ>MetadataNodeReader</Typ> will be unable to retrieve metadata external
            to the manifest.</param>
            <param name="metadata">A &lt;metadata&gt; node from a manifest. </param>
            <param name="xmlBase">The xml:base to use when constructing the location for metadata external to
            the manifest.
            Set to <c>null</c> if there is no xml:base.</param>
            <remarks>
            There is no error checking done on the parameters.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.Create(Microsoft.LearningComponents.Manifest.Helper,Microsoft.LearningComponents.PackageReader,System.Xml.XPath.XPathNavigator,System.Uri)">
            <summary>
            Create a Metadata object, with error handling during creation.
            </summary>
            <param name="helper">Helper object used to assist error handling.  If null, no error handling occurs.</param>
            <param name="packageReader">The package that contains any metadata files that are external to the 
            manifest.  If null, this <Typ>MetadataNodeReader</Typ> will be unable to retrieve metadata external
            to the manifest.</param>
            <param name="metadata">A &lt;metadata&gt; node from a manifest. </param>
            <param name="xmlBase">The xml:base to use when constructing the location for metadata external to
            the manifest.
            Set to <c>null</c> if there is no xml:base.</param>
            <remarks>
            After creating a new <Typ>MetadataNodeReader</Typ> using the constructor, this method then calls
            <Mth>GetTitle</Mth>, catching any <Typ>InvalidPackageException</Typ> that occurs.  It then uses the 
            <Typ>Helper</Typ> to handle the exception according to the <Typ>ManifestReaderSettings</Typ> and
            validation behavior.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.GetTitle">
            <summary>
            Gets the title associated with this metadata that matches the current culture.
            </summary>
            <returns>The title that best matches the current culture or String.Empty if there is no title specified.
            </returns>
            <remarks>
            Note that an <Typ>InvalidPackageException</Typ> may be thrown on the first call to this method.  If this happens,
            subsequent calls do not throw additional exceptions.  Instead, <c>String.Empty</c> is returned.
            <para>
            If <Mth>Location</Mth> is an absolute URI, this method returns <c>String.Empty</c> because absolute URI
            is not supported.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">This is the first call to this method, and the metadata is 
            located in a metadata file that can not be found.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.GetTitle(System.Globalization.CultureInfo)">
            <summary>
            Gets the general title associated with this metadata that best matches the specified culture.
            </summary>
            <param name="culture">The culture used to determine which title to return.</param>
            <returns>The title that best matches the specified <paramref name="culture"/> or String.Empty if there is no title specified.
            </returns>
            <remarks>
            Note that an <Typ>InvalidPackageException</Typ> may be thrown on the first call to this method.  If this happens,
            subsequent calls do not throw additional exceptions.  Instead, <c>String.Empty</c> is returned.
            <para>
            If <Mth>Location</Mth> is an absolute URI, this method returns <c>String.Empty</c> because absolute URI
            is not supported.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">This is the first call to this method, and the metadata is 
            located in a metadata file that can not be found.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.GetDescriptions">
            <summary>
            Gets a collection of general description values that matches the current culture.
            </summary>
            <returns>The descriptions that best match the current culture, or an empty collection if no
            descriptions exist.
            </returns>
            <remarks>
            This &lt;description&gt; blocks in the metadata should each contain consistent language strings,
            or unpredictable values may be returned from this method.
            <para>
            Note that an <Typ>InvalidPackageException</Typ> may be thrown on the first call to this method.  If this happens,
            subsequent calls do not throw additional exceptions.  Instead, an empty collection is returned.        
            </para>
            <para>
            If <Mth>Location</Mth> is an absolute URI, this method returns an empty collection because absolute URI
            is not supported.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">This is the first call to this method, and the metadata is 
            located in a metadata file that can not be found.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.GetDescriptions(System.Globalization.CultureInfo)">
            <summary>
            Gets a collection of general description values that most closely match the requested culture.
            </summary>
            <param name="culture">The culture used to determine which descriptions to return.</param>
            <returns>The description that best matches the specified <paramref name="culture"/>, or an empty collection if no
            descriptions exist.
            </returns>
            <remarks>
            This &lt;description&gt; blocks in the metadata should each contain consistent language strings,
            or unpredictable values may be returned from this method.
            <para>
            Note that an <Typ>InvalidPackageException</Typ> may be thrown on the first call to this method.  If this happens,
            subsequent calls do not throw additional exceptions.  Instead, <c>String.Empty</c> is returned.        
            </para>
            <para>
            If <Mth>Location</Mth> is an absolute URI, this method returns <c>String.Empty</c> because absolute URI
            is not supported.
            </para>
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">This is the first call to this method, and the metadata is 
            located in a metadata file that can not be found.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.GetLangString(System.Xml.XPath.XPathNavigator,System.Globalization.CultureInfo)">
            <summary>
            Returns the langstring that matches the culture specified in the CultureInfo property, or String.Empty if one doesn't exist.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Manifest.MetadataNodeReader.CreateNavigator">
            <summary>
            Gets metadata in <Typ>XPathNavigator</Typ> format.
            </summary>
            <returns>An <Typ>XPathNavigator</Typ> containing the &lt;metadata&gt; node, or <c>null</c> if there is no metadata node.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.MetadataNodeReader.ScormVersion">
            <summary>
            Returns the version of scorm parsed by this reader.
            </summary>
            <remarks>
            Note that if there is no &lt;metadata&gt; node to parse, this internal method returns a scorm version of "v1p3"
            even if the package may be a "v1p2" package.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.MetadataNodeReader.MetadataNamespaces">
            <summary>
            Returns an object that can be used for resolving namespaces in an XPathNavigator.SelectSingleNode call.
            The metadata namespace will be identified by the "lom:" prefix.  The "adlcp:" namespace is also included
            because of the &lt;adlcp:location&gt; node.
            </summary>
            <remarks>
            <para>
            For SCORM 2004, the metadata namespace is (http://ltsc.ieee.org/xsd/LOM).
            </para>
            <para>
            For SCORM 1.2, the metadata namespace is (http://www.imsglobal.org/xsd/imsmd_rootv1p2).
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.MetadataNodeReader.Lom">
            <summary>
            Points to the &lt;lom&gt; node in the metadata. This may be in a different file than the manifest,
            if the <Mth>Location</Mth> exists.  Returns null if <Mth>Location</Mth> is a URI outside of the package.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Manifest.MetadataNodeReader.Location">
            <summary>
            Gets the location of the metadata information, if it is external to the manifest.
            If this value returns a location that indicates the metadata information is not in the package, 
            then other properties in this object will not read their values. If the location is 
            within the package or if there is no location specified, this object will provide properties to 
            read and parse those values.
            </summary>
            <remarks>
            Returns null if there is no &lt;adlcp:location&gt; node in the metadata.
            <para>
            If this is an absolute URI, <c>String.Empty</c> is returned from <Mth>GetTitle</Mth> and
            <Mth>GetDescriptions</Mth>.  Absolute URI's are valid according to SCORM, but are not supported
            by this reader.
            </para>
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.SequencingException">
            <summary>
            Exception thrown when an invalid navigation request is received.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingException.s_exceptionStrings">
            <summary>
            Map from error code enumeration to the appropriate string.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingException.m_code">
            <summary>
            A string representation of the sequencing exception code.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SequencingException.#ctor(Microsoft.LearningComponents.SequencingExceptionCode)">
            <summary>
            Initializes a SequencingException
            </summary>
            <param name="code">The sequencing exception code, from 
            SCORM 2004 Sequencing and Navigation Appendix D.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.SequencingException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            This constructor is provided for compatibility purposes only.  Use of this 
            constructor will not provide information to make this a meaningful SequencingException, 
            although it will remain a meaningful Exception.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.SequencingException.#ctor">
            <summary>
            This constructor is provided for compatibility purposes only.  Use of this 
            constructor will not provide information to make this a meaningful SequencingException, 
            although it will remain a meaningful Exception.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.SequencingException.#ctor(System.String)">
            <summary>
            This constructor is provided for compatibility purposes only.  Use of this 
            constructor will not provide information to make this a meaningful SequencingException, 
            although it will remain a meaningful Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.SequencingException.#ctor(System.String,System.Exception)">
            <summary>
            This constructor is provided for compatibility purposes only.  Use of this 
            constructor will not provide information to make this a meaningful SequencingException, 
            although it will remain a meaningful Exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="ex">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.SequencingException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            GetObjectData performs a custom serialization.
            </summary>
            <param name="info">The SerializationInfo that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The StreamingContext that contains contextual information about the source or destination.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.SequencingException.Code">
            <summary>
            Gets a string representation of the sequencing exception code.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ActivityTree">
            <summary>
            Represents a tree of activities, with a single root and 0 or more children per node.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ActivityTree.m_root">
            <summary>
            The root of the tree or subtree.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.ActivityTree.#ctor(Microsoft.LearningComponents.Activity)">
            <summary>
            Initializes an activity tree object.
            </summary>
            <param name="root">The root of the tree or subtree.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ActivityTree.ScanPreOrder(Microsoft.LearningComponents.Activity)">
            <summary>
            Enumerates through a tree in pre-order traversal order.
            </summary>
            <param name="root">The root of the tree or subtree being traversed.</param>
            <returns>An enumerable.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.ActivityTree.Root">
            <summary>
            The root of the tree or subtree.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ActivityTree.PreOrder">
            <summary>
            Enumerates through a tree in pre-order traversal order.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.NavigatorData">
            <summary>
            The basic data required for navigation, basically just the activity tree.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_activityTree">
            <summary>
            The entire activity tree belonging to this navigator.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_currentActivity">
            <summary>
            The current activity of the navigator.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_suspendedActivity">
            <summary>
            The suspended activity of the navigator.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_totalPoints">
            <summary>
            Total points for the entire activity tree.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_completionStatus">
            <summary>
            Completion status for the entire activity tree.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_successStatus">
            <summary>
            Success status for the entire activity tree.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.NavigatorData.m_activities">
            <summary>
            The dictionary containing all activities that belong to this navigator.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.CloneChildren(Microsoft.LearningComponents.NavigatorData,Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Activity)">
            <summary>
            Recursively clones children of the specified activity and inserts them into the clone tree.
            </summary>
            <param name="navigator">The cloned navigator data object.</param>
            <param name="cloneParent">The cloned parent to add the children to.</param>
            <param name="originalParent">The original parent to clone the children from.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.CloneForNavigationTest">
            <summary>
            Produces an incomplete clone sufficient for testing sequencing and navigation.
            </summary>
            <returns>A new object with enough data cloned to be viable for sequencing and navigation.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.SortActivityTree">
            <summary>
            Makes sure the activity tree is sorted properly
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.LogSequencing(Microsoft.LearningComponents.SequencingEventType,Microsoft.LearningComponents.NavigationCommand,System.String,System.Object[])">
            <summary>
            Provides a hook to log sequencing messages.
            </summary>
            <param name="eventType">The type of sequencing event.</param>
            <param name="command">The actual navigation command that initiated this event.</param>
            <param name="message">A string to be logged.</param>
            <param name="args">Arguments that may be supplied to the string to be logged.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.ReadGlobalObjectiveSatisfiedStatus(System.String,System.Boolean@)">
            <summary>
            Reads the Satisfied Status of the global objective specified, if any.
            </summary>
            <param name="globalObjective">Name of the global objective, if any.</param>
            <param name="satisfied">Where the result is stored, if it is read.</param>
            <returns>True if data was read, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.ReadGlobalObjectiveNormalizedMeasure(System.String,System.Single@)">
            <summary>
            Reads the Normalized Measure of the global objective specified, if any.
            </summary>
            <param name="globalObjective">Name of the global objective, if any.</param>
            <param name="measure">Where the result is stored, if it is read.</param>
            <returns>True if data was read, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.WriteGlobalObjectives(Microsoft.LearningComponents.Activity)">
            <summary>
            Writes the global objective information for all objectives associated with this activity, if any.
            </summary>
            <param name="activity">The activity whose objectives to save.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.UpdateActivityData(Microsoft.LearningComponents.Activity)">
            <summary>
            Loads information about the specified activity that is not vital to sequencing
            but it necessary for an activity to be delivered.
            </summary>
            <param name="activity">Activity to update.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.LoadActivityTree">
            <summary>
            Loads the entire activity tree from an external source, if it is not already in memory.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the attempt ID is invalid.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.NavigatorData.ActivityKeyToActivity(System.String)">
            <summary>
            Finds an activity within the activity tree based on the string identifier.
            </summary>
            <param name="key">The string identifier to search for.</param>
            <returns>An activity object, or null if the identifier was not found.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.TotalPoints">
            <summary>
            Gets or sets total points for the entire activity tree.
            </summary>
            <remarks>
            <para>
            This value is designed to be set automatically by the data model when
            appropriate.  Setting it in other conditions will result in unknown results.
            </para><para>
            This value is only null if it has never been set.  Once any data model updates this
            value, it will never return to null value.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.CompletionStatus">
            <summary>
            Gets or sets completion status for the entire activity tree.
            </summary>
            <remarks>
            <para>
            This value is designed to be set automatically by the data model when
            appropriate.  Setting it in other conditions will result in unknown results.
            </para><para>
            This value is only valid in SCORM 2004 packages.  Before being set or in other packages,
            this value will be CompletionStatus.Unknown.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.SuccessStatus">
            <summary>
            Gets or sets success status for the entire activity tree.
            </summary>
            <remarks>
            <para>
            This value is designed to be set automatically by the data model when
            appropriate.  Setting it in other conditions will result in unknown results.
            </para><para>
            This value is only valid in SCORM 2004 packages.  Before being set or in other packages,
            this value will be SuccessStatus.Unknown.
            </para>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.Activities">
            <summary>
            Gets the dictionary containing all activities that belong to this navigator.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.CurrentActivity">
            <summary>
            Gets or sets the current activity of the navigator.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.SuspendedActivity">
            <summary>
            Gets or sets the suspended activity of the navigator.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.RootActivity">
            <summary>
            Gets or sets the root activity of the navigator.
            </summary>
            <remarks>Once this value has been set, it cannot be changed.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.NavigatorData.Traverse">
            <summary>
            Enumerates through the activity tree in pre-order traversal order.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Navigator">
            <summary>
            Base class that exposes SCORM sequencing and navigation
            </summary>
            <summary>
            Base class that exposes SCORM sequencing and navigation
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Navigator.m_packageFormat">
            <summary>
            Gets the SCORM version of the schema associated with this attempt.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Navigator.m_dirtyActivities">
            <summary>
            The collection of dirty activity (those in which data has been changed since
            they were loaded into memory).
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Navigator.m_seqNav">
            <summary>
            Sequencing/navigation class for this object, created as needed.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.LoadTableOfContents(System.Boolean)">
            <summary>
            Loads the table of contents into memory and verifies which elements are valid to navigate to.
            </summary>
            <param name="evaluateSequencingRules"><c>True</c> to evaluate sequencing rules when determining
            whih elements are valid to navigate to.  <c>False</c> to determine which elements are valid
            to navigate to using only the static data in the manifest.</param>
            <returns>The root table of contents element.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.IsNavigationValid(Microsoft.LearningComponents.NavigationCommand)">
            <summary>
            Determines if the passed navigation command is valid to execute or not.
            </summary>
            <param name="command">The navigation command to test.</param>
            <returns>True if the navigation would succeed, false otherwise.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The command passed is not a valid enumeration value, or is equal to NavigationCommand.Choose.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.IsNavigationToValid(System.String)">
            <summary>
            Determines if a choice navigation to the activity identified by the string identifier passed will succeed.
            </summary>
            <param name="destination">String identifier of the activity to navigate to.</param>
            <returns>True if a choice navigation will succeed.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The destination passed is not a valid activity in this activity tree.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Navigate(Microsoft.LearningComponents.NavigationCommand)">
            <summary>
            Performs any navigation request, except for Choice navigation.
            </summary>
            <param name="command">Navigation command to execute.</param>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the navigation fails because a sequencing rule failed.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">The command passed is not a valid enumeration value, or is equal to NavigationCommand.Choose.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.NavigateTo(System.String)">
            <summary>
            Performs a choice navigation to the activity identified by the string identifier passed.
            </summary>
            <param name="destination">String identifier of the activity to navigate to.</param>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the navigation fails because a sequencing rule failed.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.NavigateTo(System.Int64)">
            <summary>
            Performs a choice navigation to the activity identified by the unique identifier passed.
            </summary>
            <param name="id">Unique identifier of the activity to navigate to.</param>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Thrown if the navigation fails because a sequencing rule failed.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.IsNavigationToValid(System.Int64)">
            <summary>
            Determines if a choice navigation to the activity identified by the unique identifier passed will succeed.
            </summary>
            <param name="id">Unique identifier of the activity to navigate to.</param>
            <returns>True if a choice navigation will succeed.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Save">
            <summary>
            Saves any changed data to storage.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.ProcessDataModelNavigation">
            <summary>
            Performs a navigation operation based on the data model of the current activity, if one is specified.
            </summary>
            <returns>True if a navigation request was executed.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.IsNavigationToValid(Microsoft.LearningComponents.Activity)">
            <summary>
            Indicated whether a choice navigation to the indicated activity would succeed.
            </summary>
            <param name="activity">The destination activity.</param>
            <returns>True if the navigation would be valid, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.IsNavigationValid(Microsoft.LearningComponents.NavigationCommand,Microsoft.LearningComponents.Activity)">
            <summary>
            Indicates whether a navigation would be valid if it were to be performed.
            </summary>
            <param name="command">The navigation command to test.</param>
            <param name="activity">The destination activity, if this is a choice navigation.</param>
            <returns>True if the navigation would be valid, false otherwise.</returns>
            <remarks>
            <para>
            This makes a partial copy of the activity tree for processing and attempts to
            perform a navigation on that copy.  This may result in poor performance if this 
            is called many times, but the alternative is to duplicate most of the sequencing
            code with lots of special cases for changes of state that should have happened but 
            could not because of the temporary nature of this request.  This makes it a 
            maintenance nightmare, for something that should only rarely be called anyway 
            except in the case of <Mth>LoadTableOfContents</Mth>.
            </para>
            <para>
            The case of <Mth>LoadTableOfContents</Mth> is tough, but steps are taken within
            that method to reduce the number of calls to this method to a bare minimum.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Navigate(Microsoft.LearningComponents.NavigationCommand,Microsoft.LearningComponents.Activity)">
            <summary>
            Performs a full SCORM 2004 or SCORM 1.2 navigation on the current activity tree.
            </summary>
            <param name="command">The navigation command to perform.</param>
            <param name="destination">The destination activity for choice navigation.</param>
            <returns>True if the attempt is completed and should not be returned to.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.FindCommonAncestor(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Activity)">
            <summary>
            Finds a common ancestor of two activities within an activity tree.
            </summary>
            <param name="activity1">An activity in an activity tree.</param>
            <param name="activity2">An activity in an activity tree.</param>
            <returns>The activity that is the common ancestor.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.Navigator.DirtyActivities">
            <summary>
            Gets the collection of dirty activity (those in which data has been changed since
            they were loaded into memory).
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Navigator.PackageFormat">
            <summary>
            Gets the package format of the schema associated with this attempt.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Navigator.Scorm12SeqNav">
            <summary>
            Class that handles SCORM 1.2 sequencing and navigation.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Navigator.SeqNav.m_navigator">
            <summary>
            The navigator that the sequencing applies to.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.Navigator.SeqNav.m_command">
            <summary>
            The command that is being executed currently.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.SeqNav.#ctor(Microsoft.LearningComponents.NavigatorData)">
            <summary>
            Initializes the class that performs sequencing/navigation.
            </summary>
            <param name="navigator">The <Typ>Navigator</Typ> performing the sequencing operation.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.SeqNav.OverallSequencingProcess(Microsoft.LearningComponents.NavigationCommand,Microsoft.LearningComponents.Activity)">
            <summary>
            Performs the requested sequencing/navigation using SCORM 2004 sequencing/navigation rules.
            </summary>
            <param name="command">The navigation command to perform.</param>
            <param name="destination"><c>Activity</c> that is the destination of a Choice navigation command.</param>
            <returns>True if the sequencing session has ended.</returns>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Occurs when there is an invalid navigation performed.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.#ctor(Microsoft.LearningComponents.NavigatorData)">
            <summary>
            Initializes the class that performs sequencing/navigation using SCORM 1.2004 sequencing/navigation rules.
            </summary>
            <param name="navigator">The <Typ>Navigator</Typ> performing the sequencing operation.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.IsValidToNavigateTo(Microsoft.LearningComponents.Activity)">
            <summary>
            Returns whether or not the activity is a valid target for navigation.
            </summary>
            <param name="activity">The activity to check</param>
            <returns>True if the activity is a valid target for navigation, false otherwise.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.Abandon">
            <summary>
            Performs the Abandon navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.AbandonAll">
            <summary>
            Performs the AbandonAll navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.Choose(Microsoft.LearningComponents.Activity)">
            <summary>
            Performs the Choose navigation command
            </summary>
            <param name="destination">The destination activity requested.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.Continue">
            <summary>
            Performs the Continue navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.ExitAll">
            <summary>
            Performs the ExitAll navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.Previous">
            <summary>
            Performs the Previous navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.ResumeAll">
            <summary>
            Performs the ResumeAll navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.Start">
            <summary>
            Performs the Start navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.SuspendAll">
            <summary>
            Performs the SuspendAll navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.UnqualifiedExit">
            <summary>
            Performs the UnqualifiedExit navigation command
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.OverallSequencingProcess(Microsoft.LearningComponents.NavigationCommand,Microsoft.LearningComponents.Activity)">
            <summary>
            Performs the requested sequencing/navigation using SCORM 1.2 sequencing/navigation rules.
            </summary>
            <param name="command">The navigation command to perform.</param>
            <param name="destination"><c>Activity</c> that is the destination of a Choice navigation command.</param>
            <returns>True if the sequencing session has ended.</returns>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Occurs when there is an invalid navigation performed.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.DeliverActivity(Microsoft.LearningComponents.Activity)">
            <summary>
            Performs actions necessary to make an activity 'active'
            </summary>
            <param name="activity">The activity to activate.  Null is not allowed.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm12SeqNav.ExitActivity(Microsoft.LearningComponents.Activity)">
            <summary>
            Performs actions necessary to make an activity inactive
            </summary>
            <param name="activity">Activity to deactivate.  Null is handled.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav">
            <summary>
            Class that handles SCORM 2004 sequencing and navigation.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.#ctor(Microsoft.LearningComponents.NavigatorData)">
            <summary>
            Initializes the class that performs sequencing/navigation using SCORM 2004 sequencing/navigation rules.
            </summary>
            <param name="navigator">The <Typ>Navigator</Typ> performing the sequencing operation.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.OverallSequencingProcess(Microsoft.LearningComponents.NavigationCommand,Microsoft.LearningComponents.Activity)">
            <summary>
            Performs the requested sequencing/navigation using SCORM 2004 sequencing/navigation rules.
            </summary>
            <param name="command">The navigation command to perform.</param>
            <param name="destination"><c>Activity</c> that is the destination of a Choice navigation command.</param>
            <returns>True if the sequencing session has ended.</returns>
            <remarks>Corresponds to OP.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
            <exception cref="T:Microsoft.LearningComponents.SequencingException">Occurs when there is an invalid navigation performed.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ResetAttemptData(Microsoft.LearningComponents.Activity,System.Boolean,System.Boolean)">
            <summary>
            Resets the attempt data for a specific activity, if specified to do so by the sequencing node.
            </summary>
            <param name="activity">The activity to reset.</param>
            <param name="useCurrentAttemptObjectiveInfo">Whether or not to reset objective information.</param>
            <param name="useCurrentAttemptProgressInfo">Whether or not to reset progress information.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.PerformDataModelInitialization(Microsoft.LearningComponents.Activity)">
            <summary>
            Performs necessary data model initialization for an activity to be delivered.
            </summary>
            <param name="activity">The activity to be delivered</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ApplyRandomization(Microsoft.LearningComponents.Activity)">
            <summary>
            Applies any randomization to a cluster, if applicable
            </summary>
            <param name="rootOfCluster">The root of the cluster to randomize.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ContentDeliveryEnvironment(Microsoft.LearningComponents.Activity)">
            <summary>
            Performs actions necessary to delivery an activity's content.
            </summary>
            <param name="activity">The activity to deliver.</param>
            <remarks>Corresponds to DB.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ClearSuspendedActivity(Microsoft.LearningComponents.Activity)">
            <summary>
            Clears flags indicating an activity is suspended for an activity and its ancestors.
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to DB.2.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ProcessTerminationRequest(Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TerminationRequest)">
            <summary>
            Processes a termination request.
            </summary>
            <param name="termRequest">The termination request to process</param>
            <returns>A sequencing request, or null if no new sequencing request is called for.</returns>
            <remarks>Corresponds to TB.2.3 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingPostConditionRules(Microsoft.LearningComponents.Activity,System.Nullable{Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRequest}@,System.Nullable{Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TerminationRequest}@)">
            <summary>
            Processes post condition rules on an activity, and returns a sequencing request and/or a termination request.
            </summary>
            <param name="activity">Activity to perform post condition rules on.</param>
            <param name="seqRequest">Sequencing request to perform based on the post condition rules, or null if none.</param>
            <param name="termRequest">Termination request to perform based on the post condition rules, or null if none.</param>
            <remarks>Corresponds to TB.2.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingExitActionRules(Microsoft.LearningComponents.Activity)">
            <summary>
            Checks for exit condition rules for an activity and its parents
            </summary>
            <param name="activity">The activity being exited.</param>
            <remarks>Corresponds to TB.2.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TerminateDescendentAttempts(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="currentActivity"></param>
            <param name="activity"></param>
            <remarks>Corresponds to UP.3 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.FinalizeDataModelPriorToExit(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.EndAttemptProcess(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to UP.4 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.OverallRollup(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to RB.1.5 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ExtendedRollup(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to the "Extended Rollup Process" outlined on SN-4-34 and SCORM 2004 Addendum Version 2 2-47.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.AddBranchToExtendedRollupSet(Microsoft.LearningComponents.Activity,System.Collections.Generic.List{Microsoft.LearningComponents.Activity}@,System.Collections.Generic.List{Microsoft.LearningComponents.DataModel.Objective})">
            <summary>
            
            </summary>
            <param name="act"></param>
            <param name="rollupSet"></param>
            <param name="globalObjectives"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ContainsReadObjectiveMap(Microsoft.LearningComponents.Activity,System.Collections.Generic.List{Microsoft.LearningComponents.DataModel.Objective})">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="globalObjectives"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ActivityProgressRollup(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to RB.1.3 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ObjectiveRollupByMeasure(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to RB.1.2a in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.s_defaultRules">
            <summary>
            default rollup rules
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.GetDefaultRollupRules">
            <summary>
            Builds a sequencing node with the default rollup rules, for use in cases where a rollup rule is not
            specified.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.RollupRuleCheck(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.RollupAction)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="action"></param>
            <returns></returns>
            <remarks>Corresponds to RB.1.4 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.EvaluateRollupConditions(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Manifest.SequencingRollupRuleNodeReader)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="rule"></param>
            <returns></returns>
            <remarks>Corresponds to RB.1.4.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.CheckChildForRollup(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.RollupAction)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="action"></param>
            <returns></returns>
            <remarks>Corresponds to RB.1.4.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ObjectiveRollupByRules(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to RB.1.2b in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.MeasureRollup(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to RB.1.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ProcessDeliveryRequest(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <remarks>Corresponds to DB.1.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ProcessNavigationRequest(Microsoft.LearningComponents.Activity,System.Nullable{Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRequest}@,System.Nullable{Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TerminationRequest}@)">
            <summary>
            Does initial processing of navigation requests.
            </summary>
            <param name="destination"><c>Activity</c> that is the destination of a Choice navigation command.</param>
            <param name="seqRequest">Returned sequencing request.</param>
            <param name="termRequest">Returned termination request.</param>
            <remarks>Corresponds to NB.2.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.FlowTreeTraversal(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection,System.Boolean,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection@)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="dir"></param>
            <param name="considerChildren"></param>
            <param name="previousDirection"></param>
            <param name="newDirection"></param>
            <returns></returns>
            <remarks>Corresponds to SB.2.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.GetObjectiveNormalizedMeasure(Microsoft.LearningComponents.Activity,System.String,System.Boolean@,System.Single@)">
            <summary>
            Gets the normalized measure for the objective referenced.
            </summary>
            <param name="activity">Activity the objective belongs to.</param>
            <param name="objectiveId">The objective Id</param>
            <param name="objectiveMeasureStatus">The returned Objective Measure Status.</param>
            <param name="objectiveNormalizedMeasure">The returned Objective Normalized Measure.</param>
            <remarks>
            This code takes into account whether or not the objective actually exists or is just implicit, if 
            it is the primary objective or not, and it may refer to global objective information.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.GetObjectiveSatisfiedStatus(Microsoft.LearningComponents.Activity,System.String,System.Boolean@,System.Boolean@)">
            <summary>
            Gets the satisfied status for the objective referenced.
            </summary>
            <param name="activity">Activity the objective belongs to.</param>
            <param name="objectiveId">The objective Id</param>
            <param name="progressStatus">The returned Objective Progress Status.</param>
            <param name="satisfiedStatus">The returned Objective Satisfied Status.</param>
            <remarks>
            This code takes into account whether or not the objective actually exists or is just implicit, if 
            it is the primary objective or not, and it may refer to global objective information.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRuleCheck(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="rule"></param>
            <returns></returns>
            <remarks>Corresponds to UP.2.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRulesCheck(Microsoft.LearningComponents.Activity,System.Collections.Generic.ICollection{Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader},Microsoft.LearningComponents.SequencingRuleAction)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="rules"></param>
            <param name="ruleAction"></param>
            <returns></returns>
            <remarks>Corresponds to UP.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRulesCheck(Microsoft.LearningComponents.Activity,System.Collections.Generic.ICollection{Microsoft.LearningComponents.Manifest.SequencingRuleNodeReader})">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="rules"></param>
            <returns></returns>
            <remarks>Corresponds to UP.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.LimitConditionsCheck(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <returns></returns>
            <remarks>Corresponds to UP.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.CheckActivity(Microsoft.LearningComponents.Activity)">
            <summary>
            Returns True if the activity is disabled or violates any of its limit conditions
            </summary>
            <param name="activity"></param>
            <returns></returns>
            <remarks>Corresponds to UP.5 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.FlowActivityTraversal(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="dir"></param>
            <param name="previousDirection"></param>
            <returns></returns>
            <remarks>Corresponds to SB.2.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.Flow(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection,System.Boolean)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="dir"></param>
            <param name="considerChildren"></param>
            <returns></returns>
            <remarks>Corresponds to SB.2.3 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.StartSequencingRequest">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Corresponds to SB.2.5 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ContinueSequencingRequest">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Corresponds to SB.2.7 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.PreviousSequencingRequest">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Corresponds to SB.2.8 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ExitSequencingRequest">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Corresponds to SB.2.11 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ResumeAllSequencingRequest">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Corresponds to SB.2.6 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.RetrySequencingRequest">
            <summary>
            
            </summary>
            <returns></returns>
            <remarks>Corresponds to SB.2.10 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ChoiceActivityTraversal(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="dir"></param>
            <remarks>Corresponds to SB.2.4 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ChoiceFlow(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="dir"></param>
            <returns></returns>
            <remarks>Corresponds to SB.2.9.1 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ChoiceFlowTreeTraversal(Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection)">
            <summary>
            
            </summary>
            <param name="activity"></param>
            <param name="dir"></param>
            <returns></returns>
            <remarks>Corresponds to SB.2.9.2 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ChoiceSequencingRequest(Microsoft.LearningComponents.Activity)">
            <summary>
            
            </summary>
            <param name="destination"></param>
            <returns></returns>
            <remarks>Corresponds to SB.2.9 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.ProcessSequencingRequest(Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRequest,Microsoft.LearningComponents.Activity,Microsoft.LearningComponents.Activity@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="seqRequest"></param>
            <param name="destination"></param>
            <param name="deliveryRequest"></param>
            <param name="exitSession"></param>
            <remarks>Corresponds to SB.2.12 in the SCORM 2004 Sequencing/Navigation manual, appendix C.</remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.SequencingRequest">
            <summary>
            All possible sequencing requests
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TerminationRequest">
            <summary>
            All possible termination requests
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Navigator.Scorm2004SeqNav.TraversalDirection">
            <summary>
            Direction of traversal
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ImpersonationBehavior">
            <summary>
            Identifies which <c>WindowsIdentity</c> is used to perform operations
            when impersonation is involved.  
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImpersonationBehavior.UseOriginalIdentity">
            <summary>
            Use the original (non-impersonated) identity.  
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ImpersonationBehavior.UseImpersonatedIdentity">
            <summary>
            Use the identity that has been impersonated.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.PackageReader">
             <summary>
             Provides read-only access to the files contained within a single package.
             </summary>
            
             <remarks>
             <c>PackageReader</c> is an abstract class which provides an application with a consistent way of accessing
             content within a package, regardless of how the package is stored.  Microsoft Learning Components provides
             the following implementations of <c>PackageReader</c>:
             <ul>
             <li><Typ>FileSystemPackageReader</Typ> provides access to a package stored in the file system.</li>
             <li><Typ>ZipPackageReader</Typ> provides access to a package stored in a zipped file.</li>
             <li><Typ>LrmPackageReader</Typ> provides access to a package stored in an LRM file.</li>
             <li><Typ>Microsoft.LearningComponents.SharePoint.SharePointPackageReader</Typ>
                 provides access to a package stored in
             	a Windows SharePoint Services document library.  This class is defined in
             	Microsoft.LearningComponents.SharePoint.dll.</li>
             </ul>
             <para>
             <c>PackageReader</c> implements <Typ>IDisposable</Typ>.  Always call the <Mth>Dispose</Mth> method when finished
             with a <c>PackageReader</c> object, or use a <c>using</c> statement, to ensure that unmanaged resources are
             explicitly and properly released.
             </para>
             </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.#ctor">
            <summary>
            TODO
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.Create(System.IO.Stream)">
            <summary>
            Returns either a <Typ>ZipPackageReader</Typ> or <Typ>LrmPackageReader</Typ>, according to the type of
            package provided.
            </summary>
            <param name="package">The zipped package (.zip or .ims) or .lrm package.</param>
            <returns>A <Typ>PackageReader</Typ> that reads the supplied package.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="package"/> is null.</exception>
            <remarks>The stream is analyzed to determine if it is a zipped file.  If it is not, it is assumed to
            be an .lrm package.  In either case, the correctness of the package is not checked here, but rather
            in subsequent calls to e.g. <Mth>CreateManifestNavigator</Mth>.
            <para>
            The PackageReader that is returned uses the current user's credentials to read files from the package.
            </para></remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.GetFileStream(System.String)">
            <summary>
            Returns a <Typ>/System.IO.Stream</Typ> that can read the specified file.
            </summary>
            
            <param name="filePath">The package-relative path to the file. If this path indicates 
            a file that is not in the package, a <c>FileNotFoundException</c> is thrown. 
            </param>
            
            <returns>A <Typ>/System.IO.Stream</Typ> for the specified file.</returns>
            
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.CreateManifestNavigator">
            <summary>
            Returns an <Typ>XPathNavigator</Typ> that points to the &lt;manifest&gt; node of the package manifest.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The imsmanifest.xml file is missing from the package, or the
            &lt;manifest&gt; is missing from the imsmanifest.xml file.</exception>
            <returns><Typ>XPathNavigator</Typ> that points to the &lt;manifest&gt; node of the package manifest.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.CreateManifestNavigator(Microsoft.LearningComponents.ValidationBehavior,System.Boolean,Microsoft.LearningComponents.ValidationResults@,System.Xml.XPath.XPathNavigator@)">
            <summary>
            Returns an <Typ>XPathNavigator</Typ> that points to the &lt;manifest&gt; node of the package manifest.
            </summary>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">The imsmanifest.xml file is missing from the package, or the
            &lt;manifest&gt; is missing from the imsmanifest.xml file.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.GetManifestReader(Microsoft.LearningComponents.Manifest.ManifestReaderSettings,Microsoft.LearningComponents.PackageValidatorSettings,System.Boolean,Microsoft.LearningComponents.ValidationResults)">
            <summary>
            Returns a reader for the manifest of the package.
            </summary>
            <param name="manifestSettings">The <Typ>ManifestReaderSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="packageValidatorSettings">The <Typ>PackageValidatorSettings</Typ> to use when parsing the
            manifest.  Cannot be null.</param>
            <param name="logReplacement">Write message that 'x was replaced by y' when the <Typ>ManifestReaderSettings</Typ>
            indicate to fix a value.</param>
            <param name="log">Optional log in which to put warnings and errors.  Can be null.</param>
            <remarks>
            Each call to this creates a new <Typ>ManifestReader</Typ> instance.
            </remarks>
            <exception cref="T:System.Xml.XmlException">An error was encountered in the XML data.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">There is no imsmanifest.xml in the package,
            or the &lt;manifest&gt; node in the imsmanifest.xml is missing,
            or <c>ManifestReaderSettings.FixScormRequirementViolations=false</c> is set and the xml:base attribute on the &lt;manifest&gt;
            node is invalid.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.FileExists(System.String)">
            <summary>
            Gets a value indicating whether the file exists in the package.
            </summary>
            
            <param name="filePath">The package-relative path to the file; for example, "imsmanifest.xml"
            	or "page3/diagram4.gif".  This path should have no URL encoding.</param>
            
            <returns><c>true</c> if the file exists; otherwise <c>false</c> if the file does not exist or if the 
            file is a directory.</returns>
            
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.TransmitFile(System.String,System.Web.HttpResponse)">
            <summary>
            Writes a file directly to a web page response. This method should be used whenever possible, as it has 
            much better performance than reading a file into a stream and copying it to the response.
            </summary>
            <param name="filePath">The package-relative path to the file.</param>
            <param name="response">The response to write to.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.GetFilePaths">
            <summary>
            Gets the collection of file paths in the package.  All paths are relative to the root of the package.
            </summary>
            <returns>Collection of file paths, relative to the root of the package, in the package.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.RecursivelyGetFilePaths(System.IO.DirectoryInfo,System.Collections.ObjectModel.Collection{System.String}@)">
            <summary>
            Recursively get the file paths from the given directory and all subdirectories.  The paths gotten are absolute paths,
            not paths relative to the package root.
            </summary>
            <param name="path">Directory to parse.</param>
            <param name="filePaths">Collection in which to place the file paths</param>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.GetFilePaths(System.IO.DirectoryInfo)">
            <summary>
            Helper method for the GetFilePaths() public method.  
            </summary>
            <param name="rootPath">Root path of the manifest.</param>
            <returns>Collection of file paths in the package.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.SafePathCombine(System.String,System.String)">
            <summary>
            Append a subdirectory to a root path, where the root is a known safe value and the subdirectory
            is potentially hostile data.  The root path defines the "highest" in the directory hierarchy
            allowed.  E.g. if the root is "c:\foo\bar", only directories beneath "bar" are allowed to be
            accessed.
            </summary>
            
            <param name="root">The root path, which should be a known safe value only, and not hostile
            data from an unknown source.</param>
            <param name="relativePath">The relativePath beneath the root path.</param>
            
            <returns>The combination of the root path and the relative path.</returns>
            
            <exception cref="T:System.ArgumentException"><paramref name="root"/> or <paramref name="relativePath"/>
            contain one or more of the invalid characters defined in InvalidPathChars, or contains a 
            wildcard character. 
            </exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="root"/> or <paramref name="relativePath"/>
            are null.</exception>
            <exception cref="T:System.UnauthorizedAccessException"><paramref name="relativePath"/> is not a simple
            relative path (e.g. it navigates out of the subdirectory hierarchy of the root directory.)</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.IsImsManifest(System.String)">
            <summary>
            Returns true if filePath == "imsmanifest.xml" case-insensitive, culture invariant.
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.ConvertFromIndexXml">
            <summary>
            If there is an m_result cached from a call to CreateManifestNavigator, return that manifest.
            Otherwise, create a manifest using a relaxed conversion.
            </summary>
            <returns>Contents of the imsmanifest.xml converted from the index.xml.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this object.
            </summary>
            <remarks>
            On the base <Typ>PackageReader</Typ> this currently does nothing.  However, good practice dictates
            that classes derived from <Typ>PackageReader</Typ> still call the base class <c>Dispose(bool disposing)</c>
            as the final operation of a derived class's <c>Dispose(bool disposing)</c> method.
            </remarks>
            <param name="disposing">True if this method was called from
               <Mth>/System.IDisposable.Dispose</Mth></param>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageReader.Dispose">
            <summary>
            This method supports the .NET Framework infrastructure and is not intended to be used
            directly from your code.
            <para>
            Releases all resources used by the <Typ>PackageReader</Typ>.
            </para>
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.FileSystemPackageReader">
             <summary>
             Provides read-only access to the files contained within a single package that is stored in the file system.
             </summary>
            
             <remarks>
             <para>
             The package can be stored on the local hard drive, removable storage, or on a network file share accessible
             via a mapped drive letter or UNC path.
             </para>
             <para>
             See <Typ>PackageReader</Typ> for examples of how classes based on <Typ>PackageReader</Typ> (such as this one)
             can be used.
             </para>
             <para>
             The only state maintained by <c>FileSystemPackageReader</c> is the file system path to the package, which is
             set in the constructor and never changes for the lifetime of the object.
             </para>
             </remarks>
            
        </member>
        <member name="F:Microsoft.LearningComponents.FileSystemPackageReader.m_packageBasePath">
            <summary>
            The path to the directory that is the root of the package, and contains the manifest
            for the package.  This is valid after the <c>FileSystemPackageReader</c>constructor executes,
            however the directory isn't checked for existence until <c>GetFileStream</c> is called.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.FileSystemPackageReader.m_impersonationBehavior">
            <summary>
            The identity used to access the cache of files. This identity must have read access to the source 
            files of the package and read/write access to the package base path.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>FileSystemPackageReader</c> class with the
            package that is stored in the specified file system path. Use the current user's identity to 
            access the package.
            </summary>
            
            <param name="packageBasePath">The path to the directory that is the base of the package, and
            contains the manifest for the package.</param>
            
            <exception cref="T:System.ArgumentException"><paramref name="packageBasePath"/> contains invalid characters
            such as ", &lt;, &gt;, or |.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path exceeds the 
            system-defined maximum length. For example, on Windows-based platforms, paths must be less 
            than 248 characters, and file names must be less than 260 characters. The specified path
            is too long.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="packageBasePath"/> is a null
            reference.</exception>
            
            <remarks>
            The package should be exploded (not in zip format) on the file system.  Zipped packages can be
            read with the <Typ>ZipPackageReader</Typ>.  Learning Resource packages can be read with the
            <Typ>LrmPackageReader</Typ>.
            <para>
            This constructor does not check if a directory exists. This constructor is a placeholder 
            for a string that is used to access the disk in subsequent operations.
            </para>
            <para>
            The <paramref name="packageBasePath"/> parameter can be a directory on a network file share accessible
            via a mapped drive letter or UNC path.
            </para>
            </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.#ctor(System.String,Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            Initializes a new instance of the <c>FileSystemPackageReader</c> class with the
            package that is stored in the specified file system path. Uses the specified identity 
            to access files in the package.
            </summary>
            
            <param name="packageBasePath">The path to the directory that is the base of the package, and
            contains the manifest for the package.</param>
            <param name="impersonationBehavior">The identity which has read access to the files in the located in 
            <paramref name="packageBasePath"/>. </param>
            
            <exception cref="T:System.ArgumentException"><paramref name="packageBasePath"/> contains invalid characters
            such as ", &lt;, &gt;, or |.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path exceeds the 
            system-defined maximum length. For example, on Windows-based platforms, paths must be less 
            than 248 characters, and file names must be less than 260 characters. The specified path
            is too long.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="packageBasePath"/> is a null
            reference.</exception>
            
            <remarks>
            The package should be exploded (not in zip format) on the file system.  Zipped packages can be
            read with the <Typ>ZipPackageReader</Typ>.  Learning Resource packages can be read with the
            <Typ>LrmPackageReader</Typ>.
            <para>
            This constructor does not check if a directory exists. This constructor is a placeholder 
            for a string that is used to access the disk in subsequent operations.
            </para>
            <para>
            The <paramref name="packageBasePath"/> parameter can be a directory on a network file share accessible
            via a mapped drive letter or UNC path.
            </para>
            </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.ManifestExists">
            <summary>
            Returns true if the manifest exists
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.GetFileStream(System.String)">
            <summary>
            Returns a <Typ>/System.IO.Stream</Typ> that can read the specified file.
            </summary>
            
            <param name="filePath">The package-relative path to the file. If this path indicates 
            a file that is not in the package, a <Typ>/System.IO.FileNotFoundException</Typ> is thrown. 
            </param>
            
            <returns>A <Typ>/System.IO.Stream</Typ> for the specified file.</returns>
            
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> contains one or more invalid
            characters, or contains a wildcard character.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined 
            maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, 
            and file names must be less than 260 characters.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified was not found.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> is in an invalid format.</exception>
            
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>/System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            
            <remarks><paramref name="filePath"/> is a relative path to the
            <c>packageBasePath</c> parameter of the <Typ>FileSystemPackageReader</Typ>
            constructor.
            </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.GetFileStream(System.String,System.Boolean)">
            <summary>
            Returns a <Typ>/System.IO.Stream</Typ> that can read the specified file, providing the option to 
            validate the package.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.ReadFile(System.String,System.String,Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            Shared helper function to read a file from the package location and wrap the resulting exceptions
            to be consistent within MLC.
            </summary>
            <param name="packagePath">The path to the root folder of the package.</param>
            <param name="filePath">The package-relative path of the file within the package.</param>
            <param name="impersonationBehavior">Indicates which identity to use when reading the file.</param>
            <returns>A stream containing the file.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.FileExists(System.String)">
            <summary>
            Gets a value indicating whether the file exists in the package.
            </summary>
            
            <param name="filePath">The package-relative path to the file.  This path should have no URL encoding.</param>
            
            <returns><c>true</c> if the file exists and the caller has permission to access it; otherwise <c>false</c>.
            </returns>
            
            <remarks><paramref name="filePath"/> is a relative path to the
            <c>packageBasePath</c> parameter of the <Typ>FileSystemPackageReader</Typ>
            constructor.
            </remarks>
            
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.FileExists(System.String,System.Boolean)">
            <summary>
            Gets a value indicating whether the file exists in the package, providing the option to 
            validate the package.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.GetFilePaths">
            <summary>
            Gets the collection of file paths in the package.
            </summary>
            <returns>Collection of file paths in the package.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.GetFilePaths(System.Boolean)">
            <summary>
            Gets the collection of file paths in the package, with the option to skip package validation.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.TransmitFile(System.String,System.Web.HttpResponse)">
            <summary>
            Writes the requested file from the package directly to the response.
            This method clears the response before sending the file.
            </summary>
            <param name="filePath">The package-relative path to a file.</param>
            <param name="response">The response to write to.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.FileSystemPackageReader.TransmitFile(System.String,System.Web.HttpResponse,System.Boolean)">
            <summary>
            Writes the requested file from the package directly to the response.
            This method clears the response before sending the file and provides an option to skip 
            package validation.
            </summary>
            <param name="filePath"></param>
            <param name="response"></param>
            <param name="skipValidation"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.LrmPackageReader">
            <summary>
            Provides read-only access to the files contained within a single package, when the package is stored in LRM format.
            This is most commonly *.lrm files. The reader will only allow reading packages that are single Learning Resource files.
            Other types of files (for instance, multi-LR LRMs, license files or remote content files) will cause exceptions when 
            files from the package are requested.
            </summary>
            <remarks>
            <para>
            The LRM file can be stored on the local hard drive, removable storage, or on a network file share accessible
            via a mapped drive letter or UNC path.  However, note that performance may be very poor if the file name is a
            UNC path.
            </para>
            <para>
            This class can be used to import a package contained in an LRM file, or for instance
            to access the contents of an LRM package.
            </para>
            <para>
            The LRM package is unbundled to a temporary directory on the first call to <Mth>FileExists</Mth> or
            <Mth>GetFileStream</Mth>.  This temporary directory is maintained for the life of the <c>LrmPackageReader</c>,
            and is deleted in the <Mth>Dispose</Mth> or finalizer. The identity passed into the constructor, or the current 
            user must have permissions to allow unbundling and reading the package files in the temporary directory.
            </para>
            <para>
            See <Typ>PackageReader</Typ> for examples of how classes based on <Typ>PackageReader</Typ> (such as this one)
            can be used.
            </para>
            <para>
            The <Typ>LrmPackageReader</Typ> class calls unmanaged code.  Since this assembly is used in the GAC, it has unmanaged code permissions
            implicitly.
            </para>
            <para>
            The <Typ>FileSystemPackageReader</Typ> and <Typ>LrmPackageReader</Typ> classes both require <Typ>FileIOPermission</Typ> to
            write to the file system.  Again, this is implicit as this assembly is a "full trust" assembly.
            </para>
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.m_lrm">
            <summary>
            The LRM file containing the package.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.m_mustDeleteFile">
            <summary>
            True if Dispose() should delete the file referenced by m_lrm.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.m_stream">
            <summary>
            A stream containing the package.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.m_unbundlePath">
            <summary>
            The path into which the files in <paramref name="m_lrm"/> should be exploded.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.m_impersonationBehavior">
            <summary>
            The identity which should be impersonated when reading / writing files in the file system.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.m_state">
            <summary>
            Current reader state.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>LrmPackageReader</c> class with the specified LRM package.
            Uses the current user's identity to access files in the package.
            </summary>
            
            <param name="filePath">The path to the LRM file containing the package, e.g. "C:\Foo\Bar.lrm".</param>
            
            <remarks>
            <para>
            This constructor does not check if the file exists. This constructor is a placeholder 
            for a string that is used to access the file in subsequent operations.
            </para>
            <para>
            The <paramref name="filePath"/> parameter can be a directory on a network file share accessible
            via a mapped drive letter or UNC path.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.#ctor(System.String,Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            Initializes a new instance of the <c>LrmPackageReader</c> class with the specified LRM package.
            Uses a specified user's identity to access files in the package.
            </summary>
            
            <param name="filePath">The path to the LRM file containing the package, e.g. "C:\Foo\Bar.lrm".</param>
            <param name="impersonationBehavior">The identity which has access to the files in the package.</param>
            
            <remarks>
            <para>
            The <paramref name="filePath"/> parameter can be a directory on a network file share accessible
            via a mapped drive letter or UNC path.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
            Alternate constructor.
            </summary>
            <param name="filePath">The path to the bundled file containing the package, e.g. "C:\Foo\Bar.lrm".</param>
            <param name="disposeFile"><c>true</c> to delete <paramref name="filePath"/> on <c>Dispose()</c>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <c>LrmPackageReader</c> class with the specified stream.
            </summary>
            <param name="stream">Stream containing a valid LRM package.</param>
            <remarks>
            <para>
            This constructor does not check if the stream contains a valid LRM package. This constructor is a placeholder 
            for a stream that is used to access the data in subsequent operations.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations are performed when the garbage
            collector reclaims the <c>LrmPackageReader</c>.
            </summary>
            
            <remarks>
            The garbage collector calls this when the current object is ready to be finalized.
            </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this object
            </summary>
            <param name="disposing">True if this method was called from
               <Mth>/System.IDisposable.Dispose</Mth></param>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.ExplodeLrmIfNeeded">
            <summary>
            Explodes the m_lrm file into a newly created (randomly named, in the temporary directory)
            destination directory if this hasn't been done already.
            </summary>
            <remarks>
            <c>m_state</c> affects what this method does, and can be changed by this method.
            <c>m_unbundlePath</c> can be changed by this method.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">State of the reader is "Closed".</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">There is a problem with the LRM package.</exception>
            <returns>Package root path.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.GetFileStream(System.String)">
            <summary>
            Returns a <Typ>/System.IO.Stream</Typ> for the file inside the LRM package referenced by 
            <paramref name="filePath"/>.
            </summary>
            
            <param name="filePath">The file to retrieve.  The path is relative to the root of the file
            hierarchy in the LRM package.  If this path indicates a file that is not in the LRM
            package, a <Typ>/System.IO.FileNotFoundException</Typ> is thrown.</param>
            
            <returns><Typ>/System.IO.Stream</Typ> for the specified file.</returns>
            
            <exception cref="T:System.IO.IOException">The file is already open.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <Typ>LrmPackageReader</Typ> is in an error state.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified was not found.</exception>
            
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for creating directories and
            reading and writing files.  Associated enumerations: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp> and
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Write</Prp>.
            </permission>
            
            <remarks><paramref name="filePath"/> is a relative path to the
            root of the LRM package.
            <para>
            The LRM package will be exploded into a temporary directory when this method is called,
            if not done previously.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.FileExists(System.String)">
            <summary>
            Gets a value indicating whether a file exists in the LRM package. 
            </summary>
            
            <param name="filePath">The file to check.  The path is relative to the root of the file
            hierarchy in the LRM package.  This path should have no URL encoding.</param>
            
            <returns><c>true</c> if the file exists; otherwise <c>false</c> if the file does not exist, if the 
            file is a directory, or if the <paramref name="filePath"/> is <c>null</c> or <c>String.Empty</c>.</returns>
            
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> contains invalid characters.</exception>
            <exception cref="T:System.InvalidOperationException">The <Typ>LrmPackageReader</Typ> is in an error state.</exception>
            
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            
            <remarks><paramref name="filePath"/> is a relative path to the
            root of the LRM package.
            <para>
            The LRM package will be exploded into a temporary directory when this method is called,
            if not done previously.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.CopyTo(System.String)">
            <summary>
            Copies the unbundled files from the cache to the location specified.
            </summary>
            <param name="path">The location to copy the unbundled files.  See remarks.</param>
            <remarks>The specified location, <paramref name="path"/> must
            be a directory that does not exist.  The path to the directory must exist.  E.g. if the path
            "c:\manifests\unbundled packages\new package" is desired, the "new package" directory must not exist,
            but the "c:\manifests\unbundled packages" directory must exist.
            </remarks>
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for writing files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Write</Prp>.
            </permission>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> already exists, or the reader
            is in an error state.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.GetFilePaths">
            <summary>
            Gets the collection of file paths in the package.
            </summary>
            <returns>Collection of file paths in the package.</returns>
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            <exception cref="T:System.InvalidOperationException">The <Typ>LrmPackageReader</Typ> is in an error state.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmPackageReader.TransmitFile(System.String,System.Web.HttpResponse)">
            <summary>
            Writes a file directly to a web page response. This method should be used whenever possible, as it has 
            much better performance than reading a file into a stream and copying it to the response.
            </summary>
            <param name="filePath">The package-relative path to the file.</param>
            <param name="response"></param>
        </member>
        <member name="P:Microsoft.LearningComponents.LrmPackageReader.FsPackageReader">
            <summary>
            Underlying package reader used once the stream has been decompressed to the file system.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.LrmPackageReader.LrmPackageReaderState">
            <summary>
            States this reader can be in.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.LrmPackageReaderState.Init">
            <summary>
            Initial state.  Lrm file has not been exploded.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.LrmPackageReaderState.Exploded">
            <summary>
            Lrm file has been exploded successfully.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.LrmPackageReader.LrmPackageReaderState.Disposed">
            <summary>
            After Dispose() is called.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ZipPackageReader">
             <summary>
             Provides read-only access to the files contained within a single package that is stored in a zipped file
             on the file system.
             </summary>
            
             <remarks>
             <para>
             The zipped package can be stored on the local hard drive, removable storage, or on a network file share accessible
             via a mapped drive letter or UNC path.  However, note that performance may be very poor if the file name is a
             UNC path.
             </para>
             <para>
             This class can be used to import a package contained in a zipped file, or for instance
             to access the contents of a zipped package.
             </para>
             <para>
             The zipped package is unzipped to a temporary directory on the first call to <Mth>FileExists</Mth> or
             <Mth>GetFileStream</Mth>.  This temporary directory is maintained for the life of the <c>ZipPackageReader</c>,
             and is deleted in the <Mth>Dispose</Mth> or finalizer.
             </para>
             <para>
             See <Typ>PackageReader</Typ> for examples of how classes based on <Typ>PackageReader</Typ> (such as this one)
             can be used.
             </para>
             <para>
             The <Typ>ZipPackageReader</Typ> class calls unmanaged code.  Since this assembly is used in the GAC, it has unmanaged code permissions
             implicitly.
             </para>
             <para>
             The <Typ>FileSystemPackageReader</Typ> and <Typ>ZipPackageReader</Typ> classes both require <Typ>FileIOPermission</Typ> to
             write to the file system.  Again, this is implicit as this assembly is a "full trust" assembly.
             </para>
             </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.m_zip">
            <summary>
            The zip file containing the package.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.m_mustDeleteFile">
            <summary>
            True if Dispose() should delete the file referenced by m_zip.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.m_stream">
            <summary>
            A stream containing the package.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.m_unzipPath">
            <summary>
            The path into which the files in <paramref name="m_zip"/> should be exploded.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.m_impersonationBehavior">
            <summary>
            The identity which should be impersonated when reading / writing files in from the 
            original zip file into the temporary directory containing the unzipped files.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.m_state">
            <summary>
            Current reader state.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <c>ZipPackageReader</c> class with the specified zipped package.
            Uses the current user's credentials to access the package files.
            </summary>
            
            <param name="filePath">The path to the zipped file containing the package, e.g. "C:\Foo\Bar.zip".</param>
            
            <remarks>
            <para>
            This constructor does not check if the file exists. This constructor is a placeholder 
            for a string that is used to access the file in subsequent operations.
            </para>
            <para>
            The <paramref name="filePath"/> parameter can be a directory on a network file share accessible
            via a mapped drive letter or UNC path.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.#ctor(System.String,Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            Initializes a new instance of the <c>ZipPackageReader</c> class with the specified zipped package. Uses the 
            specified user's credentials to access package files.
            </summary>
            
            <param name="filePath">The path to the zipped file containing the package, e.g. "C:\Foo\Bar.zip".</param>
            <param name="impersonationBehavior">The identity to use when accessing package files. </param>
            
            <remarks>
            <para>
            This constructor does not check if the file exists. This constructor is a placeholder 
            for a string that is used to access the file in subsequent operations.
            </para>
            <para>
            The <paramref name="filePath"/> parameter can be a directory on a network file share accessible
            via a mapped drive letter or UNC path.
            </para>
            </remarks>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is a null reference.</exception>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission.</exception>
            <exception cref="T:System.ArgumentException">The file name is empty, contains only white spaces, or contains invalid characters.</exception>
            <exception cref="T:System.IO.PathTooLongException">The specified path, file name, or both exceed the system-defined maximum length. For example, on Windows-based platforms, paths must be less than 248 characters, and file names must be less than 260 characters.</exception>
            <exception cref="T:System.NotSupportedException"><paramref name="filePath"/> contains a colon (:) in the middle of the string.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.#ctor(System.IO.FileInfo,System.Boolean)">
            <summary>
            Alternate constructor.
            </summary>
            <param name="filePath">The path to the zipped file containing the package, e.g. "C:\Foo\Bar.zip".</param>
            <param name="disposeFile"><c>true</c> to delete <paramref name="filePath"/> on <c>Dispose()</c>.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <c>ZipPackageReader</c> class with the specified stream.
            </summary>
            <param name="stream">Stream containing a valid zipped package.</param>
            <remarks>
            <para>
            This constructor does not check if the stream contains a valid zipped package. This constructor is a placeholder 
            for a stream that is used to access the data in subsequent operations.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.Finalize">
            <summary>
            Ensures that resources are freed and other cleanup operations are performed when the garbage
            collector reclaims the <c>ZipPackageReader</c>.
            </summary>
            
            <remarks>
            The garbage collector calls this when the current object is ready to be finalized.
            </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.Dispose(System.Boolean)">
            <summary>
            Releases all resources used by this object
            </summary>
            <param name="disposing">True if this method was called from
               <Mth>/System.IDisposable.Dispose</Mth></param>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.ExplodeZipIfNeeded">
            <summary>
            Explodes the m_zip file into a newly created (randomly named, in the temporary directory)
            destination directory if this hasn't been done already.
            </summary>
            <remarks>
            <c>m_state</c> affects what this method does, and can be changed by this method.
            <c>m_unzipPath</c> can be changed by this method.
            </remarks>
            <exception cref="T:System.ObjectDisposedException">State of the reader is "Closed".</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">There is a problem with the zip package.</exception>
            <returns>Package root path.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.GetFileStream(System.String)">
            <summary>
            Returns a <Typ>/System.IO.Stream</Typ> for the file inside the zipped package referenced by 
            <paramref name="filePath"/>.
            </summary>
            
            <param name="filePath">The file to retrieve.  The path is relative to the root of the file
            hierarchy in the zipped package.  If this path indicates a file that is not in the zipped
            package, a <Typ>/System.IO.FileNotFoundException</Typ> is thrown.</param>
            
            <returns><Typ>/System.IO.Stream</Typ> for the specified file.</returns>
            
            <exception cref="T:System.IO.IOException">The file is already open.</exception>
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <Typ>ZipPackageReader</Typ> is in an error state.</exception>
            <exception cref="T:System.IO.FileNotFoundException">The file specified was not found.</exception>
            
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for creating directories and
            reading and writing files.  Associated enumerations: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp> and
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Write</Prp>.
            </permission>
            
            <remarks><paramref name="filePath"/> is a relative path to the
            root of the zipped package.
            <para>
            The zipped package will be exploded into a temporary directory when this method is called,
            if not done previously.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.FileExists(System.String)">
            <summary>
            Gets a value indicating whether a file exists in the zipped package. 
            </summary>
            
            <param name="filePath">The file to check.  The path is relative to the root of the file
            hierarchy in the zipped package.  This path should have no URL encoding.</param>
            
            <returns><c>true</c> if the file exists; otherwise <c>false</c> if the file does not exist or if the 
            file is a directory.</returns>
            
            <exception cref="T:System.ArgumentException"><paramref name="filePath"/> contains invalid characters.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="filePath"/> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The <Typ>ZipPackageReader</Typ> is in an error state.</exception>
            
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            
            <remarks><paramref name="filePath"/> is a relative path to the
            root of the zipped package.
            <para>
            The zipped package will be exploded into a temporary directory when this method is called,
            if not done previously.
            </para>
            </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.RecursiveCopy(System.IO.DirectoryInfo,System.IO.DirectoryInfo,Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            Recursively copy all package files from one directory to another.
            </summary>
            <param name="from">Directory to copy from.</param>
            <param name="to">Directory to copy to.</param>
            <param name="impersonationBehavior">The identity that can read the files in the <paramref name="from"/> folder.
            If this identity can also write to the <paramref name="to"/> folder, the method performs faster
            than if it does not have write permissions.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.RecursiveCopy(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <summary>
            Recursively copy from one directory to another. This method does not impersonate.
            </summary>
            <param name="from"></param>
            <param name="to"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.RecursiveCopyStreams(System.IO.DirectoryInfo,Microsoft.LearningComponents.ImpersonationBehavior,System.IO.DirectoryInfo)">
            <summary>
            Recursively copy from one folder to another by reading the files into memory. 
            </summary>
            <param name="fromDir">The folder to copy from.</param>
            <param name="fromImpersonationBehavior">The identity that has rights to read the <paramref name="fromDir"/>.</param>
            <param name="toDir">The folder to write to. Writing is not done in an impersonation block.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.CopyTo(System.String)">
            <summary>
            Copies the unzipped files from the cache to the location specified.
            </summary>
            <param name="path">The location to copy the unzipped files.  See remarks.</param>
            <remarks>The specified location, <paramref name="path"/> must
            be a directory that does not exist.  The path to the directory must exist.  E.g. if the path
            "c:\manifests\unzipped packages\new package" is desired, the "new package" directory must not exist,
            but the "c:\manifests\unzipped packages" directory must exist. The current user must have sufficient 
            permissions to copy the package files into this directory.
            </remarks>
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for writing files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Write</Prp>.
            </permission>
            <exception cref="T:System.InvalidOperationException">The <paramref name="path"/> already exists, or the reader
            is in an error state.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.GetFilePaths">
            <summary>
            Gets the collection of file paths in the package.
            </summary>
            <returns>Collection of file paths in the package.</returns>
            <permission cref="T:System.Security.Permissions.FileIOPermission"> for reading files.
            Associated enumeration: 
            <Prp>System.Security.Permissions.FileIOPermissionAccess.Read</Prp>.
            </permission>
            <exception cref="T:System.InvalidOperationException">The <Typ>ZipPackageReader</Typ> is in an error state.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ZipPackageReader.TransmitFile(System.String,System.Web.HttpResponse)">
            <summary>
            Writes a file directly to a web page response. This method should be used whenever possible, as it has 
            much better performance than reading a file into a stream and copying it to the response.
            </summary>
            <param name="filePath">The package-relative path to the file.</param>
            <param name="response"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.ZipPackageReader.ZipPackageReaderState">
            <summary>
            States this reader can be in.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.ZipPackageReaderState.Init">
            <summary>
            Initial state.  Zip file has not been exploded.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.ZipPackageReaderState.Exploded">
            <summary>
            Zip file has been exploded successfully.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ZipPackageReader.ZipPackageReaderState.Disposed">
            <summary>
            After Dispose() is called.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RollupChildActivitySet">
            <summary>
            Represents the &lt;imsss:rollupRule&gt; childActivitySet token value.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupChildActivitySet.All">
            <summary>
            &lt;imsss:rollupRule childActivitySet="all"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupChildActivitySet.Any">
            <summary>
            &lt;imsss:rollupRule childActivitySet="any"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupChildActivitySet.None">
            <summary>
            &lt;imsss:rollupRule childActivitySet="none"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupChildActivitySet.AtLeastCount">
            <summary>
            &lt;imsss:rollupRule childActivitySet="atLeastCount"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupChildActivitySet.AtLeastPercent">
            <summary>
            &lt;imsss:rollupRule childActivitySet="atLeastPercentage"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SequencingConditionCombination">
            <summary>
            Represents the &lt;imsss:ruleConditions&gt; conditionCombination attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingConditionCombination.All">
            <summary>
            &lt;imsss:ruleConditions conditionCombination="all"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingConditionCombination.Any">
            <summary>
            &lt;imsss:ruleConditions conditionCombination="any"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RollupCondition">
            <summary>
            Represents the &lt;imsss:rollupCondition&gt; condition attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.ActivityProgressKnown">
            <summary>
            &lt;imsss:rollupCondition condition="activityProgressKnown"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.Attempted">
            <summary>
            &lt;imsss:rollupCondition condition="attempted"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.AttemptLimitExceeded">
            <summary>
            &lt;imsss:rollupCondition condition="attemptLimitExceeded"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.Completed">
            <summary>
            &lt;imsss:rollupCondition condition="completed"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.ObjectiveMeasureKnown">
            <summary>
            &lt;imsss:rollupCondition condition="objectiveMeasureKnown"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.ObjectiveStatusKnown">
            <summary>
            &lt;imsss:rollupCondition condition="objectiveStatusKnown"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.OutsideAvailableTimeRange">
            <summary>
            &lt;imsss:rollupCondition condition="outsideAvailableTimeRange"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.Satisfied">
            <summary>
            &lt;imsss:rollupCondition condition="satisfied"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupCondition.TimeLimitExceeded">
            <summary>
            &lt;imsss:rollupCondition condition="timeLimitExceeded"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RollupAction">
            <summary>
            Represents the &lt;imsss:rollupAction&gt; action attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupAction.Satisfied">
            <summary>
            &lt;imsss:rollupAction action="satisfied"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupAction.NotSatisfied">
            <summary>
            &lt;imsss:rollupAction action="notSatisfied"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupAction.Completed">
            <summary>
            &lt;imsss:rollupAction action="completed"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupAction.Incomplete">
            <summary>
            &lt;imsss:rollupAction action="incomplete"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RollupConsideration">
            <summary>
            Represents the &lt;imsss:rollupConsiderations&gt; requiredForSatisfied, requiredForNotSatisfied,
            requiredForCompleted, and requiredForIncomplete attributes.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupConsideration.Always">
            <summary>
            Example: &lt;imsss:rollupConsiderations requiredForSatisfied="always"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupConsideration.IfAttempted">
            <summary>
            Example: &lt;imsss:rollupConsiderations requiredForSatisfied="ifAttempted"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupConsideration.IfNotSkipped">
            <summary>
            Example: &lt;imsss:rollupConsiderations requiredForSatisfied="ifNotSkipped"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RollupConsideration.IfNotSuspended">
            <summary>
            Example: &lt;imsss:rollupConsiderations requiredForSatisfied="ifNotSuspended"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RandomizationTiming">
            <summary>
            Represents the &lt;imsss:randomizationControls&gt; randomizationTiming attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RandomizationTiming.Once">
            <summary>
            &lt;imsss:randomizationControls randomizationTiming="once"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RandomizationTiming.OnEachNewAttempt">
            <summary>
            &lt;imsss:randomizationControls randomizationTiming="onEachNewAttempt"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.RandomizationTiming.Never">
            <summary>
            &lt;imsss:randomizationControls randomizationTiming="never"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SequencingConditionOperator">
            <summary>
            Respresents the &lt;imsss:rollupCondition&gt; operator attribute and &lt;imsss:ruleCondition&gt; operator attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingConditionOperator.NoOp">
            <summary>
            Example: &lt;imsss:rollupCondition operator="noOp"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingConditionOperator.Not">
            <summary>
            Example: &lt;imsss:rollupCondition operator="not"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SequencingRuleCondition">
            <summary>
            Represents the &lt;imsss:ruleCondition&gt; condition attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.Satisfied">
            <summary>
            &lt;imsss:ruleCondition condition="satisfied"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.ObjectiveStatusKnown">
            <summary>
            &lt;imsss:ruleCondition condition="objectiveStatusKnown"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.ObjectiveMeasureKnown">
            <summary>
            &lt;imsss:ruleCondition condition="objectiveMeasureKnown"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.ObjectiveMeasureGreaterThan">
            <summary>
            &lt;imsss:ruleCondition condition="objectiveMeasureGreaterThan"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.ObjectiveMeasureLessThan">
            <summary>
            &lt;imsss:ruleCondition condition="objectiveMeasureLessThan"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.Completed">
            <summary>
            &lt;imsss:ruleCondition condition="completed"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.ActivityProgressKnown">
            <summary>
            &lt;imsss:ruleCondition condition="activityProgressKnown"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.Attempted">
            <summary>
            &lt;imsss:ruleCondition condition="attempted"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.AttemptLimitExceeded">
            <summary>
            &lt;imsss:ruleCondition condition="attemptLimitExceeded"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.TimeLimitExceeded">
            <summary>
            &lt;imsss:ruleCondition condition="timeLimitExceeded"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.OutsideAvailableTimeRange">
            <summary>
            &lt;imsss:ruleCondition condition="outsideAvailableTimeRange"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleCondition.Always">
            <summary>
            &lt;imsss:ruleCondition condition="always"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.SequencingRuleAction">
            <summary>
            Represents the &lt;imsss:ruleAction&gt; action attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.NoAction">
            <summary>
            Doesn't map to a SCORM token.  Means that the &lt;imsss:ruleAction&gt; node is either missing or lacking
            the "action" attribute value.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.Skip">
            <summary>
            &lt;imsss:ruleAction action="skip"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.Disabled">
            <summary>
            &lt;imsss:ruleAction action="disabled"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.HiddenFromChoice">
            <summary>
            &lt;imsss:ruleAction action="hiddenFromChoice"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.StopForwardTraversal">
            <summary>
            &lt;imsss:ruleAction action="stopForwardTraversal"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.ExitParent">
            <summary>
            &lt;imsss:ruleAction action="exitParent"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.ExitAll">
            <summary>
            &lt;imsss:ruleAction action="exitAll"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.Retry">
            <summary>
            &lt;imsss:ruleAction action="retry"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.RetryAll">
            <summary>
            &lt;imsss:ruleAction action="retryAll"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.Continue">
            <summary>
            &lt;imsss:ruleAction action="continue"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.Previous">
            <summary>
            &lt;imsss:ruleAction action="previous"/&gt;
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.SequencingRuleAction.Exit">
            <summary>
            &lt;imsss:ruleAction action="exit"/&gt;
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ResourceType">
            <summary>
            Define the type of resources included in SCORM content.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ResourceType.None">
            <summary>
            Indicates an activity with no associated resource.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ResourceType.Sco">
            <summary>
            Uses RTE on client.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ResourceType.Asset">
            <summary>
            Does not use RTE on the client and is not Lrm content.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ResourceType.Lrm">
            <summary>
            Is Class Server Lrm content.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.PackageType">
            <summary>
            The type of package. 
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.PackageType.Resource">
            <summary>
            A resource package, with no organization node. 
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.PackageType.ContentAggregation">
            <summary>
            A package that aggregates and organizes content.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.AlreadyInList">
            <summary>
              Looks up a localized string similar to The item specified is already added to this or another list belonging to this data model..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.CannotChangeId">
            <summary>
              Looks up a localized string similar to Cannot change the identifier if an item in a dictionary.  Try removing the item, changing the identifier, then re-adding it..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.CannotDeletePrimaryObjective">
            <summary>
              Looks up a localized string similar to Cannot remove or replace the primary objective..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.CantWriteToDataModel">
            <summary>
              Looks up a localized string similar to This LearningDataModel object may not be written to..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DataModelElementTooLong">
            <summary>
              Looks up a localized string similar to Data model element &apos;{0}&apos; was passed a value that exceeded the supported length..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DB_1_1__1">
            <summary>
              Looks up a localized string similar to Cannot deliver a non-leaf activity..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DB_1_1__2">
            <summary>
              Looks up a localized string similar to Nothing to deliver..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DB_1_1__3">
            <summary>
              Looks up a localized string similar to Activity unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DB_2__1">
            <summary>
              Looks up a localized string similar to Identified activity is already active..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DirectoryNotFound">
            <summary>
              Looks up a localized string similar to The requested directory, {0}, can not be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DRLO_CurrentActivityEntryPointIsAbsolute">
            <summary>
              Looks up a localized string similar to The entry point of the current activity is not contained within this package..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.DRLO_InvalidRelativePath">
            <summary>
              Looks up a localized string similar to The relativePath value &apos;{0}&apos; does not represent a valid, package-relative path..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.EndOfStream">
            <summary>
              Looks up a localized string similar to End of stream reached..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ImsManifestXmlMissing">
            <summary>
              Looks up a localized string similar to The package is missing the required file, imsmanifest.xml..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.IndexOutOfRange">
            <summary>
              Looks up a localized string similar to The index is out of range..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.InvalidExtensionType">
            <summary>
              Looks up a localized string similar to Unsupported type &apos;{0}&apos; added to extension data..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.InvalidScormV1p2Value">
            <summary>
              Looks up a localized string similar to Data model element &apos;{0}&apos; was passed a value that was out of range according to the SCORM 1.2 specifications..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.InvalidScormV1p3Value">
            <summary>
              Looks up a localized string similar to Data model element &apos;{0}&apos; was passed a value that was out of range according to the SCORM 2004 specifications..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.KeyDoesNotMatchItem">
            <summary>
              Looks up a localized string similar to The key specified &apos;{0}&apos; does not match the identifier within the item to be added to the dictionary &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ListCannotBeModified">
            <summary>
              Looks up a localized string similar to The list cannot be modified..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LrmMultiNotSupported">
            <summary>
              Looks up a localized string similar to An error occurred while unbundling the file. A file with multiple Learning Resources is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LrmNoManifest">
            <summary>
              Looks up a localized string similar to An error occurred while unbundling the file. The Index.xml or imsmanifest.xml file cannot be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LrmUnknownFormat">
            <summary>
              Looks up a localized string similar to An error occurred while unbundling the file. Unable to determine the file format..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_AbandonNotValid">
            <summary>
              Looks up a localized string similar to It is not valid to abandon the current session. Only an active or suspended session may be abandoned, and only in Execute view..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_CantRenderManifest">
            <summary>
              Looks up a localized string similar to The requested manifest file cannot be rendered..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_ExitNotValid">
            <summary>
              Looks up a localized string similar to It is not valid to exit the current session. Only a session that has started may be exited, and only in Execute view..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_PropertyCannotBeNull">
            <summary>
              Looks up a localized string similar to The value cannot be set to null..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_ReactivateNotValid">
            <summary>
              Looks up a localized string similar to It is not valid to reactivate the current session. Only a completed or abandoned session may be reactivated, and only in RandomAccess view..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_RelativePathRequired">
            <summary>
              Looks up a localized string similar to The RenderContext.RelativePath must have a value..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_ResourceNotInPackage">
            <summary>
              Looks up a localized string similar to The current activity in the session defines an entry point that does not exist in the package. The content cannot be read..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_ResumeNotValid">
            <summary>
              Looks up a localized string similar to It is not valid to resume the current session. Only a suspended session may be resumed, and only in Execute view..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_StringCannotBeEmpty">
            <summary>
              Looks up a localized string similar to The value cannot be set to an empty or null string..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.LS_SuspendNotValid">
            <summary>
              Looks up a localized string similar to It is not valid to suspend the current session. Only an active session may be suspended, and only in Execute view..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NavigationFinishedDone">
            <summary>
              Looks up a localized string similar to Navigation complete.  No current activity..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NavigationFinishedNewActivity">
            <summary>
              Looks up a localized string similar to Navigation resulted in making &apos;{0}&apos; the current active activity..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__1">
            <summary>
              Looks up a localized string similar to A current activity is already defined. The sequencing session has already begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__10">
            <summary>
              Looks up a localized string similar to Choice Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__11">
            <summary>
              Looks up a localized string similar to Target activity does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__12">
            <summary>
              Looks up a localized string similar to The current activty is already terminated..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__13">
            <summary>
              Looks up a localized string similar to Undefined navigation request..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__2">
            <summary>
              Looks up a localized string similar to A current activity is not defined. The sequencing session has not begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__3">
            <summary>
              Looks up a localized string similar to A suspended activity is not defined..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__4">
            <summary>
              Looks up a localized string similar to Flow Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__5">
            <summary>
              Looks up a localized string similar to Flow or Forward Only Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__6">
            <summary>
              Looks up a localized string similar to No activity is &quot;previous&quot; to the root..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__7">
            <summary>
              Looks up a localized string similar to Unsupported navigation request..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__8">
            <summary>
              Looks up a localized string similar to Choice Exit Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NB_2_1__9">
            <summary>
              Looks up a localized string similar to No activities to consider..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NoIdentifier">
            <summary>
              Looks up a localized string similar to A required identifier was not provided for this element..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.NonUniqueId">
            <summary>
              Looks up a localized string similar to An item with the identifier &apos;{0}&apos; already exists in this list..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.OnlyValidForSCORMV1p2">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; data model element is only valid in SCORM 1.2 packages..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.OnlyValidForSCORMV1p3">
            <summary>
              Looks up a localized string similar to The &apos;{0}&apos; data model element is only valid in SCORM 2004 packages..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.PackageDirectoryAlreadyExists">
            <summary>
              Looks up a localized string similar to Cannot copy to &apos;{0}&apos; because a file or directory with the same name already exists. This operation can only copy to a destination that does not yet exist.  It will create the destination directory..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.PackageFileNotFound">
            <summary>
              Looks up a localized string similar to The requested file was not found in the package..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ReadError">
            <summary>
              Looks up a localized string similar to Read error..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.RequredObjectiveNotFound">
            <summary>
              Looks up a localized string similar to Sequencing cannot proceed because the required objective &apos;{0}&apos; was not found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.RollupChildMissingPrimaryObjective">
            <summary>
              Looks up a localized string similar to Rollup aborted because child activity &apos;{0}&apos; does not have a primary objective..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.RollupInitiated">
            <summary>
              Looks up a localized string similar to Rollup initiated for activity &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.RollupSettingNormalizedMeasure">
            <summary>
              Looks up a localized string similar to Rollup setting normalized measure to {0} for activity &apos;{1}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_1__1">
            <summary>
              Looks up a localized string similar to Last activity in the tree..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_1__2">
            <summary>
              Looks up a localized string similar to Cluster has no available children..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_1__3">
            <summary>
              Looks up a localized string similar to No activity is &quot;previous&quot; to the root..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_1__4">
            <summary>
              Looks up a localized string similar to Forward Only Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_10__1">
            <summary>
              Looks up a localized string similar to A current activity is not defined. The sequencing session has not begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_10__2">
            <summary>
              Looks up a localized string similar to The current activity is active or suspended..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_10__3">
            <summary>
              Looks up a localized string similar to Flow Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_11__1">
            <summary>
              Looks up a localized string similar to A current activity is not defined. The sequencing session has not begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_11__2">
            <summary>
              Looks up a localized string similar to The current activity has not been terminated..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_12__1">
            <summary>
              Looks up a localized string similar to Undefined sequencing request..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_2__1">
            <summary>
              Looks up a localized string similar to Flow Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_2__2">
            <summary>
              Looks up a localized string similar to Activity unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_4__1">
            <summary>
              Looks up a localized string similar to Forward Traversal Blocked..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_4__2">
            <summary>
              Looks up a localized string similar to Forward Only Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_4__3">
            <summary>
              Looks up a localized string similar to No activity is &quot;previous&quot; to the root..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_5__1">
            <summary>
              Looks up a localized string similar to A current activity is defined. The sequencing session already begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_6__1">
            <summary>
              Looks up a localized string similar to A current activity is defined. The sequencing session already begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_6__2">
            <summary>
              Looks up a localized string similar to No Suspended Activity defined..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_7__1">
            <summary>
              Looks up a localized string similar to A current activity is not defined. The sequencing session has not begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_7__2">
            <summary>
              Looks up a localized string similar to Flow Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_8__1">
            <summary>
              Looks up a localized string similar to A current activity is not defined. The sequencing session has not begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_8__2">
            <summary>
              Looks up a localized string similar to Flow Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__1">
            <summary>
              Looks up a localized string similar to No target for Choice..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__2">
            <summary>
              Looks up a localized string similar to Target activity does not exist or is unavailable..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__3">
            <summary>
              Looks up a localized string similar to Target activity hidden from choice..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__4">
            <summary>
              Looks up a localized string similar to Choice Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__5">
            <summary>
              Looks up a localized string similar to No activities to consider..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__6">
            <summary>
              Looks up a localized string similar to Unable to activate target; target is not a child of the Current Activity..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__7">
            <summary>
              Looks up a localized string similar to Choice Exit Sequencing Control Mode violation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__8">
            <summary>
              Looks up a localized string similar to Unable to choose target activity - constrained choice..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SB_2_9__9">
            <summary>
              Looks up a localized string similar to Choice request prevented by Flow-only activity..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingExitRuleExecuted">
            <summary>
              Looks up a localized string similar to Sequencing Exit rule requires that activity &apos;{0}&apos; terminate..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingFlowingTo">
            <summary>
              Looks up a localized string similar to Sequencing is flowing to activity &apos;{0}&apos;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleRequestContinue">
            <summary>
              Looks up a localized string similar to Continue.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleRequestExitAll">
            <summary>
              Looks up a localized string similar to ExitAll.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleRequestExitParent">
            <summary>
              Looks up a localized string similar to ExitParent.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleRequestPrevious">
            <summary>
              Looks up a localized string similar to Previous.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleRequestRetry">
            <summary>
              Looks up a localized string similar to Retry.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleRequestRetryAll">
            <summary>
              Looks up a localized string similar to RetryAll.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPostConditionRuleResult">
            <summary>
              Looks up a localized string similar to Sequencing Post Condition rule on activity &apos;{0}&apos; resulted in a {1} request..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SequencingPreConditionSkipped">
            <summary>
              Looks up a localized string similar to Activity &apos;{0}&apos; skipped because its pre-condition Skip rules evaluated as true..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SLS_CurrentActiveActivityRequired">
            <summary>
              Looks up a localized string similar to A CurrentActivity that is active is required to exist before requesting this operation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.SLS_CurrentActivityRequired">
            <summary>
              Looks up a localized string similar to A CurrentActivity is required to exist before requesting this operation..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.StreamMustReadAndSeek">
            <summary>
              Looks up a localized string similar to Stream must have read and seek capability..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__1">
            <summary>
              Looks up a localized string similar to A Current Activity is not defined. The sequencing session has not begun..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__2">
            <summary>
              Looks up a localized string similar to The Current activity already terminated..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__3">
            <summary>
              Looks up a localized string similar to Cannot suspend an inactive root..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__4">
            <summary>
              Looks up a localized string similar to Activity tree root has no parent..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__5">
            <summary>
              Looks up a localized string similar to Nothing to suspend; no active activities..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__6">
            <summary>
              Looks up a localized string similar to Nothing to abandon; no active activities..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.TB_2_3__7">
            <summary>
              Looks up a localized string similar to Undefined termination request..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.UnauthorizedAccess">
            <summary>
              Looks up a localized string similar to The requested item, {0}, can not be accessed..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.UniqueIdNotFound">
            <summary>
              Looks up a localized string similar to No item with the identifier &apos;{0}&apos; was found in this list..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.UniqueIdNotSupported">
            <summary>
              Looks up a localized string similar to No unique identifiers are defined for items in this list..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.UTIL_ParamIsEmptyString">
            <summary>
              Looks up a localized string similar to A parameter contains an empty string, which is not allowed. .
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.WrongDataModel">
            <summary>
              Looks up a localized string similar to An object created for use by a different data model cannot be added to this data model..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.WrongNameTable">
            <summary>
              Looks up a localized string similar to The object is not in the correct NameTable..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ZipPackageExceptionBadZipFile">
            <summary>
              Looks up a localized string similar to The package compression format is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ZipPackageExceptionDefault">
            <summary>
              Looks up a localized string similar to Error code: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ZipPackageExceptionNoFile">
            <summary>
              Looks up a localized string similar to The .zip file cannot be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.Resources.ZipPackageReaderErrorState">
            <summary>
              Looks up a localized string similar to The ZipPackageReader has encountered an error and cannot continue..
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RloDataModelContext">
            <summary>
            The context within which RloHandlers process a session exiting.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RloDataModelContext.GetInputStream">
            <summary>
            Get the input stream containing the primary file from the resource associated with the 
            current activity in the session. 
            </summary>
            <returns>The stream containing the current activity's primary file.</returns>
            <remarks>
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the <Prp>CurrentActivityEntryPoint</Prp> indicates 
            the current activity does not have a resource in the package.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.RloDataModelContext.View">
            <summary>
            The view of the session.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloDataModelContext.LearningDataModel">
            <summary>
            Gets the data model of the current activity in the session.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloDataModelContext.CurrentActivityEntryPoint">
            <summary>
            Gets the entry point of the current activity. This may be an absolute Uri, indicating 
            the file does not exist in the package and cannot be returned from <Mth>GetInputStream()</Mth>.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.RloReactivateContext">
            <summary>
            Context used for Reactivate process.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.DefaultRloHandler">
            <summary>
            Represents processing of Rlo data when there is no other custom handler available.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.DefaultRloHandler.ProcessFormData(Microsoft.LearningComponents.RloProcessFormDataContext,System.Collections.Specialized.NameValueCollection,System.Collections.Generic.IDictionary{System.String,System.Web.HttpPostedFile})">
            <summary>
            Requests the RloHandler to process information received from the client.
            </summary>
            <remarks>
            This method does not take action on the posted data
            </remarks>
            <exception cref="T:Microsoft.LearningComponents.InvalidFormDataException">Thrown if posted data contains invalid data.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.DefaultRloHandler.Render(Microsoft.LearningComponents.RloRenderContext)">
            <summary>
            Requests the RloHandler to render the requested 
            view to the <c>RloHandlerContext.OuputStream</c>
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.DefaultRloHandler.ProcessSessionEnd(Microsoft.LearningComponents.RloDataModelContext)">
            <summary>
            Process the end of the session.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.DefaultRloHandler.Reactivate(Microsoft.LearningComponents.RloReactivateContext)">
            <summary>
            Requests the RloHandler to process a reactivation request and clear the appropriate data 
            values from the data model. The request may only be issued when the session is in RandomAccess 
            view and is not active -- it is either Completed or Abandoned.
            </summary>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.RloProcessFormDataContext">
            <summary>
            Class that represents the context in which data from a posted form is processed. An instance of this 
            class is passed to the RloHandler when ProcessFormData is called.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RloProcessFormDataContext.#ctor(Microsoft.LearningComponents.LearningSession)">
            <summary>
            Create a context to send to an RloHandler.
            </summary>
            <param name="session">The session that is being rendered.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloProcessFormDataContext.#ctor(Microsoft.LearningComponents.SessionView,Microsoft.LearningComponents.DataModel.LearningDataModel)">
            <summary>
            Create a context to send to an RloHandler.
            </summary>
            <param name="view">The view that will be rendered from the form data.</param>
            <param name="learningDataModel">The data model of the current activity in the session.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.RloProcessFormDataContext.View">
            <summary>
            Gets the view that will be rendered from the form data.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloProcessFormDataContext.LearningDataModel">
            <summary>
            Gets the data model of the current activity in the session.
            </summary>
            <remarks>Note that in <c>SessionView.Review</c> the returned data model may not be modified
            by the RloHandler.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.RloRenderContext">
            <summary>
            Class that represents the context in which the RloHandler is called to Render.
            An instance of this class is passed to the RloHandler when rendering 
            is requested by the RloHandler.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.#ctor(Microsoft.LearningComponents.LearningSession,Microsoft.LearningComponents.RenderContext)">
            <summary>
            Create a context to send to an RloHandler when calling <c>RloHandler.Render</c>.
            </summary>
            <param name="session">The session that is being rendered.</param>
            <param name="renderContext">Information required to render the current file. 
            </param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.SetOutputStreamExtension(System.String)">
            <summary>
            Set the file extension for the output stream. If there is a 
            Response object, the mime type is set on the response.
            </summary>
            <param name="fileExtension">The extension of the filename
            that is being rendered. This is of the form ".htm", including the 
            period.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.WriteFileToResponse(System.String)">
            <summary>
            Writes the file from the package directly to the response and set the appropriate 
            content type in the response. If the response is provided and the path extension is not
            in the list of files to use IIS compatibility mode, this is much faster than 
            copying the file contents to the output stream and should be used whenever possible.
            If there is no response object, the method reverts to copying the file between streams.
            </summary>
            <param name="relativePath">The package-relative path to the file to render.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.WriteFileToResponse(System.Byte[])">
            <summary>
            Writes the file from a byte array directly to the response. The output stream
            extension must be set prior to calling this method.
            If the response is provided and the path extension is not
            in the list of files to use IIS compatibility mode, this is much faster than 
            copying the file contents to the output stream and should be used whenever possible.
            If there is no response object, the method reverts to copying the file between streams.
            </summary>
            <param name="fileBytes">The file to render.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.WriteIisCompatibilityModeToResponse(System.IO.Stream)">
            <summary>
            Write the stream to the response, using WriteBinary. This method closes the stream.
            </summary>
            <param name="packageStream"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.UseCompatibilityMode(System.String)">
            <summary>
            Returns true if IIS compatibility mode should be used for sending this file. 'Compatibility 
            mode' indicates the code should not use TransmitFile to send the requested file.
            </summary>
            <param name="pathExtension">The extension, including preceding period, of a file to render</param>
            <returns>True if IIS compatiblity mode should be used for this file type.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.RloRenderContext.GetInputStream">
            <summary>
            Get the input stream containing the current requested page for the RloHandler
            to operate on.
            </summary>
            <returns>The stream containing the currently requested file.</returns>
            <remarks>
            </remarks>
            <exception cref="T:System.IO.FileNotFoundException">If the requested input stream does not exist 
            within the package.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.OutputStream">
            <summary>
            Gets the output stream that the RloHandler should write to, when requested to render a view.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.Response">
            <summary>
            Gets the httpResponse that the RloHandler may write to. In some cases (particularly test code), this 
            value may be null.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.RelativePath">
            <summary>
            The package-relative path of the file to be rendered. If the file exists in the package, 
            the contents of this file is returned by <Mth>GetInputStream()</Mth>.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.IsResourceEntryPoint">
            <summary>
            Returns true if the requested <Prp>RelativePath</Prp> is the entry point for the current activity
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.EmbeddedUIResourcePath">
            <summary>
            Get the location of resources embedded in the rendered content that are 
            not contained within the content. 
            This will not be null.
            </summary>
            <remarks>
            The value will be either an absolute path or a relative path.  If relative, the path
            must begin with "./" and end without a "/".  E.g. "./", "./path" are legal values.
            If not set explicitly, will be the relative path "./".
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.FormHiddenControls">
            <summary>
            Gets the list of hidden controls to render in the form. The key is 
            the id of the control, the value is the value of the control.
            Both strings are provided in plain text (not HTML). 
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.ScriptToRender">
            <summary>
            Gets the jscript to render in the page. The returned string will not include the &lt;script&gt; delimiters. 
            The rendered page should ensure this script is rendered in a way that will cause it to run before the user can interact with the 
            page but after the page has been processed by the browser for rendering. For instance, the script should be added to 
            an onload handler or in-page script at the end of the file.
            </summary>
            <remarks>The value of this property is valid jscript 
            and can be rendered directly in the page without further encoding.</remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.ShowCorrectAnswers">
            <summary>
            Get a value indicating whether correct answers should be 
            displayed in the content, if possible. Regardless of this value, answers may only be shown if 
            it is supported in the current activity format for the current <c>LearningSession.View</c>.
            </summary>
            <remarks>
            This setting only affects content which is dynamically rendered, such as Lrm content, and only
            in Review and Grading views. In other views and content formats, the setting is ignored.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.RloRenderContext.ShowReviewerInformation">
            <summary>
            Gets a value indicating whether sections of the content intended for a reviewer of a session
            (and not the learner)
            should be displayed in the rendered content. 
            </summary>
            <remarks>
            This setting only affects content which is dynamically rendered, such as Lrm content, and only
            in Review and Grading views. In other views and content formats, the setting is ignored.
            </remarks>
        </member>
        <member name="T:Microsoft.LearningComponents.PlainTextString">
            
                <summary>
                Represents a series of Unicode characters as an end user would see them,
                without any encoding or markup.
                </summary>
            
                <seealso cref="T:Microsoft.LearningComponents.HtmlString"/>
                <seealso cref="T:Microsoft.LearningComponents.JScriptString"/>
                <seealso cref="T:Microsoft.LearningComponents.UrlString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlStringWriter"/>
            
        </member>
        <member name="F:Microsoft.LearningComponents.PlainTextString.m_plainText">
            <summary>
            The string value wrapped by this class.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.PlainTextString.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Microsoft.LearningComponents.PlainTextString"/> class.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.PlainTextString.#ctor(System.String)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.LearningComponents.PlainTextString"/> class
             and specifies initial text for the object to contain.
             </summary>
            
             <param name="plainText">Initial value of the object.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.PlainTextString.#ctor(Microsoft.LearningComponents.HtmlString)">
             <summary>
             Initializes a new instance of the <see cref="T:Microsoft.LearningComponents.PlainTextString"/> class
             and specifies initial text for the object to contain.
             </summary>
            
             <param name="htmlText">Initial value of the object.</param>
            
             <remarks>
             The <P>htmlText</P> will be converted to plain text by a call to <Mth>HttpUtility.HtmlDecode</Mth>.
             </remarks>
            
        </member>
        <member name="T:Microsoft.LearningComponents.HtmlString">
            
                <summary>
                Represents HTML markup, i.e. a series of Unicode characters
                intended to be written to an HTML file and read by a Web browser.
                </summary>
            
                <remarks>
            
                <Typ>/System.String</Typ> can be used to represent many kinds of strings of
                Unicode characters: plain text, HTML markup, URLs, etc.  While that flexibility
                is convenient, it comes at a cost: it's too easy to pass the wrong type of
                string from one piece of code to another (for example, to a method from
                its caller).  This can lead to incorrect results, depending on the input
                data, and may even result in security bugs such as script insertion
                vulnerabilities.  Bugs can be caused by (a) a developer not understanding
                all the subtleties of string encoding, and/or (b) misunderstanding a method's
                "contract" (i.e. comments defining legal inputs, outputs, and side effects).
            
                <p/>
            
                The following simple example (a helper method in a C# ASP.NET application)
                illustrates both problems:
            
                <code language="C#">
                /// &lt;summary&gt;
                /// Outputs HTML consisting of an anchor element which, when clicked,
                /// displays given text within a JScript alert.
                /// &lt;/summary&gt;
                ///
                /// &lt;param name="linkText"&gt;Text of the link.&lt;/param&gt;
                ///
                /// &lt;param name="alertText"&gt;Text to display in the alert.&lt;/param&gt;
                ///
                void WriteAlertLink(string linkText, string alertText)
                {
                    Response.Write(String.Format("&lt;a href=\"javascript:alert('{0}')\"&gt;{1}&lt;/a&gt;",
                        alertText, linkText));
                }
                </code>
            
                Calling the function as follows:
            
                <code language="C#">
                WriteAlertLink("Click me!", "Thanks for clicking me.");
                </code>
            
                will generate a "<u>Click me!</u>" link which, when clicked, correctly displays
                the following:
            
                <Img>WriteAlertLink_1.gif</Img>
            
                So far so good.
            
                <p/>
            
                Unfortunately, calling the method as follows:
            
                <code language="C#">
                WriteAlertLink("Select&amp;copy", @"See C:\100%BEEF\*.txt");
                </code>
            
                generates an odd-looking link "<u>Select©</u>" which, when clicked,
                displays the following:
            
                <Img>WriteAlertLink_2.gif</Img>
            
                Worse yet, calling the method as follows:
            
                <code language="C#">
                WriteAlertLink("Oops", "That's all, folks!");
                </code>
            
                generates a script error:
            
                <Img>WriteAlertLink_3.gif</Img>
            
                How can there be so many problems in such a simple one-line method?
                <c>WriteAlertLink</c> has two parameters, and both have problems.  The
                first—and easiest to fix—is <c>linkText</c>.  Any good developer
                familiar with HTML can spot the problem here: <c>linkText</c> is not
                HTML-encoded.  A more precise way to think about the problem is that there is a
                kind of type mismatch: in the examples above, the caller is expecting that
                <c>linkText</c> is of type "plain text", but in fact <c>linkText</c> is of type
                "HTML".  To fix this problem,
            
                <ul>
            
                <li><u>either</u> the method contract (header comments) need to change to
                reflect the fact that the <c>linkText</c> is of type "HTML" (in which case it
                should probably be named <c>linkHtml</c>, not <c>linkText</c>),</li>
            
                <li><u>or</u> a method such as <c>HttpUtility.HtmlEncode</c> needs to be used
                to convert <c>linkText</c> from type "HTML" to type "plain text".  (In this
                case, the contract comments should also be updated to clarify that
                <c>linkText</c> is of type "HTML".)</li>
            
                </ul>
            
                Parameter <c>alertText</c> is more problematic.  If the effective type of
                <c>linkText</c> is HTML, what's the effective type of alertText?  To answer
                that question, recall that <c>WriteAlertLink</c> generates the following HTML:
            
                <p>
                <pre>&lt;a href="javascript:alert('<i>alertText</i>')"&gt;<i>linkText</i>&lt;/a&gt;</pre>
                </p>
            
                Now, examine what will happen to <c>alertText</c> at runtime, before it is
                passed to the <c>alert</c> function:
            
                <ol>
            
                <li>When the browser parses the "href" attribute, converts character
                entity references such as "&amp;#32;" and "&amp;quot;" into corresponding
                characters.</li>
            
                <li>When the user clicks on the link, the browser notices that the href's
                protocol is "javascript:", so it:
            
                    <ol type="a">
            
                    <li>converts any "%xx" hexadecimal escape sequences within
                    "javascript:"...  into the corresponding characters, and</li>
            
                    <li>passes everything after "javascript:" to the JScript
                    interpreter.</li>
            
                    </ol>
            
                </li>
            
                <li>The JScript interpreter sees a single-quoted string
                (<c>'<i>alertText</i>'</c>) and it:
            
                    <ol type="a">
            
                    <li>converts any backslash escape sequences such as "\n" and "\007"
                    to the corresponding characters, and</li>
            
                    <li>generates a script error if there is another single quote (') within
                    <c>alertText</c>.</li>
            
                    </ol>
            
                </li>
            
                </ol>
            
                Consider the example where <c>alertText</c> is "See C:\100%BEEF\*.txt" as shown
                in one of the examples above:
            
                <ul>
            
                <li>#1 doesn't apply—there are no character entity references in this
                string.</li>
            
                <li>#2 causes "%BE" in the string to change to "¾", since Unicode
                character 0x00BE is "¾".  The result is "See C:\100¾EF\*.txt".
                </li>
            
                <li>#3 causes "\100" to change to "@", since octal 100 (decimal 64) is the
                character code for "@".  Also, "\*" changes to just "*"—that's what
                JScript does to unknown backslash escape sequences.  The result is
                "See C:@¾EF*.txt".</li>
            
                </ul>
            
                In the case where <c>alertText</c> is "That's all, folks!", #3 causes a script
                error due to the embedded single quote.
            
                <p/>
            
                Microsoft.LearningServer.Library addresses the string encoding problem by
                introducing several classes that serve as "wrappers" for specific kinds of
                strings:
            
                <ol>
            
                <li><Typ>PlainTextString</Typ> represents text without any encoding or markup,
                as an end user would see it.</li>
            
                <li><Typ>HtmlString</Typ> represents HTML markup, intended to be interpreted
                by a Web browser.</li>
            
                <li><Typ>JScriptString</Typ> represents JScript source code that's intended
                to be written to a &lt;script&gt;...&lt;/script&gt; block within an HTML file.
                </li>
            
                <li><Typ>UrlString</Typ> represents a string that can be typed into the address
                bar of a Web browser.</li>
            
                </ol>
            
                These classes can be used in places where you want to refer to a more specific
                kind of string.  For example, assume the following method is defined:
            
                <code language="C#">
                void Foo(HtmlString html)
                {
                    Console.WriteLine(html);
                }
                </code>
            
                This method simply copies the HTML markup within the <c>html</c> parameter
                to the console.  (Note that this involes an implicit conversion from
                <Typ>HtmlString</Typ> to <Typ>/System.String</Typ>—that conversion
                returns the HTML markup as-is.)  Since the argument is of type
                <Typ>HtmlString</Typ>, the following call generates a compiler error:
                "cannot convert from 'string' to 'HtmlString'".
            
                <code language="C#">
                Foo("Select&amp;copy"); // compiler error
                </code>
            
                Instead, the caller needs to be more explicit about the type of string
                being passed in.  The following two lines produce the same output; in the
                first case, the string begins as a PlainTextString that is converted to
                an HtmlString using <Mth>../PlainTextString.ToHtmlString</Mth>; in the second
                case the string begins as HTML markup.
            
                <code language="C#">
                Foo(new PlainTextString("Select&amp;copy").ToHtmlString());
                Foo(new HtmlString("Select&amp;amp;copy"));
                </code>
            
                Defining the argument of <c>Foo</c> as <Typ>HtmlString</Typ> instead of
                simply <Typ>/System.String</Typ> has the following advantages:
            
                <ol>
            
                <li>The argument is clearly documented as being an HTML string.</li>
            
                <li>Certain encoding errors (such as passing a <Typ>PlainTextString</Typ>
                or <Typ>/System.String</Typ> value) can be caught at compile time.</li>
            
                </ol>
            
                Returning to the <c>WriteAlertLink</c> example, the following is a more
                type-safe version of that method that uses some of the classes in the
                Microsoft.LearningServer.Library namespace:
            
                <code language="C#">
                void WriteAlertLink(HtmlString linkHtml, PlainTextString alertText)
                {
                    HtmlStringWriter htmlWriter = new HtmlStringWriter(Response.Output);
                    htmlWriter.AddJavascriptProtocolAttribute(HtmlTextWriterAttribute.Href,
                        new JScriptString(String.Format("alert({0})",
                            JScriptString.QuoteString(alertText, true))));
                    htmlWriter.RenderBeginTag(HtmlTextWriterTag.A);
                    htmlWriter.WriteHtml(linkHtml);
                    htmlWriter.RenderEndTag();
                }
                </code>
            
                In addition to using <Typ>PlainTextString</Typ>, <Typ>HtmlString</Typ>, and
                <Typ>JScriptString</Typ>, the example above demonstrates another
                Microsoft.LearningServer.Library encoding helper class,
                <Typ>HtmlStringWriter</Typ>, which is similar to
                <Typ>/System.Web.UI.HtmlTextWriter</Typ> but is more type-safe.
                See the individual classes used above for more information.
            
                <p/>
            
                The new version of <c>WriteAlertLink</c> shown above is called as follows:
            
                <code language="C#">
                WriteAlertLink(new HtmlString("Select&amp;amp;copy"),
                    new PlainTextString(@"See C:\100%BEEF\*.txt"));
                </code>
            
                As expected, this generates a "<u>Select&amp;copy</u>" hyperlink which, when
                clicked, displays the following:
            
                <Img>WriteAlertLink_4.gif</Img>
            
                You would get the same results by calling <c>WriteAlertLink</c> as follows:
            
                <code language="C#">
                WriteAlertLink(new PlainTextString("Select&amp;copy").ToHtmlString(),
                    new PlainTextString(@"See C:\100%BEEF\*.txt"));
                </code>
            
                In fact, since an implicit conversion is defined between
                <Typ>/System.String</Typ> and <Typ>PlainTextString</Typ>, the following
                also works:
                <code language="C#">
                WriteAlertLink(new PlainTextString("Select&amp;copy").ToHtmlString(),
                    @"See C:\100%BEEF\*.txt");
                </code>
            
                However, the following would generate a compiler error, since there is
                no implicit conversion between <Typ>/System.String</Typ> and
                <Typ>HtmlString</Typ>:
            
                <code language="C#">
                WriteAlertLink("Select&amp;copy", @"See C:\100%BEEF\*.txt"); // compiler error
                </code>
            
                </remarks>
            
                <seealso cref="T:Microsoft.LearningComponents.PlainTextString"/>
                <seealso cref="T:Microsoft.LearningComponents.JScriptString"/>
                <seealso cref="T:Microsoft.LearningComponents.UrlString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlStringWriter"/>
            
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlString.m_html">
             <summary>
             The string value wrapped by this class.
             </summary>
            
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlString.#ctor(System.String)">
            <summary>
            Represents a string containing HTML.
            </summary>
            
            <param name="html">Html to initialize the representation.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlString.#ctor(Microsoft.LearningComponents.PlainTextString)">
            <summary>
            Convert a PlainTextString to Html.
            </summary>
            <param name="plainText">Text string.</param>
            <remarks>
            HtmlEncodes the <paramref name="plainText"/>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlString.ToString">
            <summary>
            Returns the Html associated with this string.
            </summary>
            
            <returns>
            The string containing html.
            </returns>
        </member>
        <member name="T:Microsoft.LearningComponents.JScriptString">
            
                <summary>
                [Internal class?]
                Represents JScript source code, i.e. a series of Unicode characters
                intended to be written into a &lt;script&gt;...&lt;/script&gt; block of
                an HTML file.
                </summary>
            
                <remarks>
            
                <p/>
            
                Note that <Typ>JScriptString</Typ> should not be used to represent a
                "javascript:" URI.  For example, if you place "alert('100%BEEF')"
                within a &lt;script&gt;...&lt;/script&gt; block, you'll get an alert
                with the message "100%BEEF".  However, in "javascript:alert('100%BEEF')"
                "%BE" is interpreted as character 0xBE—if that's not what's intended,
                "javascript:alert('100%25BEEF') should be used.  Use
                <Mth>ToJavascriptProtocol</Mth> to convert from <Typ>JScriptString</Typ>
                to a "javascript:" URI.
            
                </remarks>
            
                <seealso cref="T:Microsoft.LearningComponents.PlainTextString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlString"/>
                <seealso cref="T:Microsoft.LearningComponents.UrlString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlStringWriter"/>
            
        </member>
        <member name="F:Microsoft.LearningComponents.JScriptString.m_jscript">
            <summary>
            The string value wrapped by this class.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.UrlString">
            
                <summary>
                Represents a string that can be typed into the address bar of a Web
                browser, or a substring of such a string.
                </summary>
            
                <seealso cref="T:Microsoft.LearningComponents.PlainTextString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlString"/>
                <seealso cref="T:Microsoft.LearningComponents.JScriptString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlStringWriter"/>
            
        </member>
        <member name="F:Microsoft.LearningComponents.UrlString.m_url">
            <summary>
            The string value wrapped by this class.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.UrlString.ToAscii">
             <summary>
             Converts any non-ASCII characters within the string to UTF-8 and
             hexadecimal-encoded (%xx) equivalents.
             </summary>
            
             <returns>
             An <Typ>UrlString</Typ> with non-ASCII characters converted
             to UTF-8 sequences that are then hexadecimal-encoded.
             </returns>
            
             <remarks>
            
             If you type "http://localhost/LaNiсa" into Internet Explorer, it will
             convert the URL internally to "http://localhost/LaNi%c3%b1a", which
             is an equivalent representation of the URL that only contains ASCII
             characters. (You can also type "http://localhost/LaNi%c3%b1a" directly
             into a browser&#8212;doing so will navigate to the same document.)
            
             <p/>
            
             This method converts any non-ASCII character within the string to
             UTF-8 and hexadecimal-encoded (%xx) equivalents.  For example,
             "с" is converted to "%c3%b1".
            
             <p/>
             
             If the URL doesn't contain non-ASCII characters, the output of this
             method is the same as its input.  Example:
            
             <code language="C#">
             UrlString url1 = new UrlString("http://localhost/LaNiсa");
             UrlString url2 = url1.ToAscii(); // returns "http://localhost/LaNi%c3%b1a"
             UrlString url3 = url2.ToAscii(); // returns "http://localhost/LaNi%c3%b1a"
             </code>
            
             <Mth>ToAscii</Mth> does not fully "canonicalize" the URL.  In
             particular, the space character is not converted to "%20".
            
             </remarks>
            
             <example>
            
             The following code:
            
             <code language="C#">
             Console.WriteLine(new UrlString("http://localhost/LaNiсa").ToAscii());
             </code>
            
             writes the following output:
            
             <p>
             <pre>http://localhost/LaNi%c3%b1a</pre>
             </p>
            
             </example>
            
        </member>
        <member name="M:Microsoft.LearningComponents.UrlString.ToUnicode">
             <summary>
             Converts hexadecimal-encoded (%xx) non-ASCII UTF-8 sequences within a
             string to the Unicode equivalents.
             </summary>
            
             <returns>
             An <Typ>UrlString</Typ> with hexadecimal-encoded non-ASCII UTF-8
             sequences converted to Unicode equivalents.
             </returns>
            
             <remarks>
             This method looks for non-ASCII URL-encoded bytes within runs of
             hexadecimal-encoded (%xx) sequences in the string and converts those
             bytes to Unicode characters.  For example, "%c3%b1" is converted to
             "с", since byte 0xc3 followed by byte 0xb1 is the UTF-8 encoding for
             the character "с".  However, for example, "%20" is left unmodified.
            
             <p/>
            
             A characteristic of this method is that it converts an URL to an URL that's
             semantically equivalent: typing the string returned by the method into the
             address bar of Internet Explorer will yield the same result (i.e.
             navigate to the same location) as typing the input string.
            
             <p/>
            
             Unlike <Mth>/System.Web.HttpUtility.UrlDecode</Mth>, this method does
             not change "+" to " " (space).  Doing so might change the meaning of the URL,
             since "+" and " " aren't treated as the same character when they are
             part of the path component of the URL.  For example, although the
             following URLs point to the same location:
            
             <p>
             <pre>http://localhost/Foo.aspx?X=A B</pre>
             <pre>http://localhost/Foo.aspx?X=A+B</pre>
             </p>
            
             the following URLs point to different locations:
            
             <p>
             <pre>http://localhost/A B.aspx</pre>
             <pre>http://localhost/A+B.aspx</pre>
             </p>
             
             Similarly, this method does not decode "%25" into "%".  If it did, then
             calling this method on the following URL:
            
             <p>
             <pre>http://localhost/LaNi%25c3%25b1a.htm</pre>
             </p>
            
             would yield the following result:
            
             <p>
             <pre>http://localhost/LaNi%c3%b1a.htm</pre>
             </p>
            
             which has a different meaning.  (The first URL refers to a document
             named "La%c3%25a.htm"&#8212;i.e. the file name itself contains "%"
             characters&#8212;while the second URL refers to a document named
             named "LaNiсa.htm".)
            
             <p/>
            
             Characters that do not correspond to hexadecimal characters are not
             modified.  For example, "%JK" is not modified.
            
             </remarks>
            
             <example>
            
             The following code:
            
             <code language="C#">
             Console.WriteLine(new UrlString("http://localhost/LaNi%c3%b1a").ToUnicode());
             </code>
            
             writes the following output:
            
             <p>
             <pre>http://localhost/LaNiсa</pre>
             </p>
            
             </example>
            
        </member>
        <member name="M:Microsoft.LearningComponents.UrlString.EndUnicodeRun(System.Byte[],System.Int32@,System.Text.StringBuilder,System.Boolean,System.Boolean@,System.Int32@)">
            <summary>
            Process a character that indicates it is the end of a unicode run. The method writes the current character (or,
            optionally the remainder of the string) in m_url and puts it into the output buffer after first writing the 
            characters in the unicode run.
            </summary>
            <param name="unicodeBytes">The list of bytes that were part of the run. They will be written to the output
            buffer. The list cannot be null, but may be empty.</param>
            <param name="iByte">Number of bytes in the array. (This is not the size of the array, but rather the number 
            of bytes stored in the array.)</param>
            <param name="output">The output buffer to flush the unicode run and current character. It cannot be null.</param>
            <param name="flushInput">If true, the remainder of m_url (starting from ich) will be written to the output
            buffer and ich is incremented accordingly.</param>
            <param name="inUnicodeRun">Bool indicating whether currently in the midst of a run of unicode 
            chars. On return, this will be set to false.</param>
            <param name="ich">The position of the current character in m_url.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.UrlString.GetEncodedValue(System.Int32,System.Int32@)">
            <summary>
            Takes a startLocation in m_url that contains a %, return the integer that is the next two digits if those 
            digits are within the range for unicode characters (ie, valid hex).
            </summary>
            <param name="startLocation">This should indicate the location of a % character.</param>
            <param name="charValue">If the value following the % character (ie, at startLocation+1 and startLocation+2
            indicates an integer, it's returned here. The value is unchanged if the method returns false.</param>
            <returns>True if a valid integer is returned in <P>charValue</P>.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.UrlString.AppendUnicodeChars(System.Byte[],System.Int32@,System.Text.StringBuilder)">
            <summary>
            Given a collection of UTF-8 bytes, translate them to unicode characters and append them to the output
            buffer.
            </summary>
            <param name="unicodeBytes">Typed list of bytes that can be translated, assuming UTF-8 encoding,
            to unicode characters. May contain 0 elements, but cannot be null. The list of bytes must contain 
            precisely enough bytes to result in a list of characters. Extra bytes will be lost -- so don't send 
            any in!</param>
            <param name="iByte">The index of the next byte to be added to the <P>unicodeBytes</P> array.</param>
            <param name="output">The output string to append the unicode characters to. Cannot be null.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.HtmlStringWriter">
            
                <summary>
                </summary>
            
                <seealso cref="T:Microsoft.LearningComponents.PlainTextString"/>
                <seealso cref="T:Microsoft.LearningComponents.HtmlString"/>
                <seealso cref="T:Microsoft.LearningComponents.JScriptString"/>
                <seealso cref="T:Microsoft.LearningComponents.UrlString"/>
            
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlStringWriter.m_htmlTextWriter">
            <summary>
            The HtmlTextWriter wrapped by this class.  This HtmlTextWriter may
            write into a StringBuilder, a TextWriter, or a given HtmlTextWriter,
            depending on which /// HtmlStringWriter constructor to use.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlStringWriter.Indent">
            <summary>
            Indent written text by this number of tab positions.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.AtomizedString">
            <summary>
            Provides a class that does performance efficient comparisons between atomized strings
            from the same NameTable.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AtomizedString.#ctor(System.String,System.Xml.NameTable)">
            <summary>
            Creates a new AtomizedString object.
            </summary>
            <param name="str">The string.  May not be null.</param>
            <param name="nameTable">The <Typ>NameTable</Typ> that should contain <P>str</P>,
            although this is not enforced (see remarks.)</param>
            <remarks>
            In order for <Typ>AtomizedString</Typ> comparisons to work correctly, the <P>str</P>
            parameter must be contained in the <P>nameTable</P>.  For performance reasons, this
            is not checked at runtime, except in debug builds where it throws ArgumentException.
            </remarks>
            <exception cref="T:System.ArgumentNullException">
            <P>str</P> or <P>nameTable</P> is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            (debug build only) <P>nameTable</P> does not contain <P>str</P>.
            </exception>
        </member>
        <member name="M:Microsoft.LearningComponents.AtomizedString.Equals(System.Object)">
            <summary>
            Returns true if the Value of the two objects are the same atomized string from
            the same NameTable.
            </summary>
            <param name="obj">AtomizedString object to compare with.</param>
            <returns>True if equal, false if not.</returns>
            <exception cref="T:System.ArgumentException">
            If comparing <Typ>AtomizedString</Typ> objects with different <Typ>NameTable</Typ>'s.
            </exception>
        </member>
        <member name="M:Microsoft.LearningComponents.AtomizedString.op_Equality(Microsoft.LearningComponents.AtomizedString,Microsoft.LearningComponents.AtomizedString)">
            <summary>
            Compare two atomized strings for equality.  See <Mth>AtomizedString.Equals</Mth>.
            </summary>
            <param name="atom1">AtomizedString to the left of the ==.</param>
            <param name="atom2">AtomizedString to the right of the ==.</param>
            <returns>True if equal, false if not.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AtomizedString.op_Inequality(Microsoft.LearningComponents.AtomizedString,Microsoft.LearningComponents.AtomizedString)">
            <summary>
            Compare two atomized strings for inequality.  See <Mth>AtomizedString.Equals</Mth>.
            </summary>
            <param name="atom1">AtomizedString to the left of the !=.</param>
            <param name="atom2">AtomizedString to the right of the !=.</param>
            <returns>True if inequal, false if equal.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.AtomizedString.GetHashCode">
            <summary>
            Overrides GetHashCode (necessary to override <Mth>AtomizedString.Equals</Mth>.
            </summary>
            <returns>The underlying string's <Mth>String.GetHashCode</Mth> return value.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.AtomizedString.Value">
            <summary>
            Returns the string value.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.AtomizedString.NameTable">
            <summary>
            Returns the NameTable.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.HtmlNodeType">
            <summary>
            Specifies the type of node.  When the HtmlTextReader parses an HTML file, it reads the file
            character by character.  Once it has read enough characters to know what the syntax represents,
            it assigns a "node type" - e.g. Element, EndElement, Text, etc.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlNodeType.None">
            <summary>
            There is no current node.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlNodeType.Comment">
            <summary>
            Comment. E.g. anything that starts with a less than sign followed by an exclamation point
            and two dashes.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlNodeType.Identifier">
            <summary>
            Identifier. E.g. anything that starts with a less than sign and an exclamation point but
            isn't a comment. Not an "official" HTML type.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlNodeType.Element">
            <summary>
            Element.  E.g. tag.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlNodeType.EndElement">
            <summary>
            End element.  E.g. end tag.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlNodeType.Text">
            <summary>
            Text.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.AttributeNode">
            <summary>
            Holds information about a single attribute (name / value pair, quote character, line number
            and position.)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttributeNode.QuoteChar">
            <summary>
            Quote character used around the attribute value. '\0' means no quote character is used.
            Otherwise will be either '\'' or '"'.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttributeNode.LineNumber">
            <summary>
            Line number of the attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.AttributeNode.LinePosition">
            <summary>
            Line position of the attribute.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.AttributeNode.#ctor(Microsoft.LearningComponents.HtmlString,Microsoft.LearningComponents.HtmlString,System.Char,System.Int32,System.Int32)">
            <summary>
            Constructor.
            </summary>
            <param name="name">Name of the attribute, as it is encoded in the HTML.</param>
            <param name="value">Value of the attribute, as it is encoded in the HTML.</param>
            <param name="quoteChar">The quote character, will be '\0', '\'', or '"'.  '\0' means no quote char.</param>
            <param name="lineNumber">The line number of the attribute.</param>
            <param name="linePosition">The line position of the attribute.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.HtmlTextReader">
            <summary>
            Represents a reader that provides fast, non-cached, forward-only access to HTML data which
            may also contain embedded XML.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.Dispose">
            <summary>
            Calls Close().
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.CheckDispose">
            <summary>
            Throws ObjectDisposedException if this object has been disposed or closed.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of <Typ>HtmlTextReader</Typ>.
            </summary>
            <remarks>
            The caller should ensure the <paramref name="stream"/> has an efficient, high performance, ReadByte()
            method.  For instance, use <Typ>BufferedStream</Typ>.  The <paramref name="stream"/> must be readable 
            and seekable.
            </remarks>
            <exception cref="T:System.ArgumentException">The <paramref name="stream"/>is invalid (not readable or not seekable.)</exception>
            <exception cref="T:System.ArgumentNullException">The <paramref name="stream"/> is null.</exception>
            <param name="stream">Stream containing the data to parse.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.Skip">
            <summary>
            Skips the current node up to the current node's end tag if the current node is an
            element.
            </summary>
            <remarks>
            If the current node is an element and there is no associated end element, skips all
            the way to the end of the file.
            If the current node is not an element, throws <Typ>NotSupportedException</Typ>.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.GetOuterXml">
            <summary>
            Parses the current node as Xml, and creates an XmlReader containing the current node 
            up to the current node’s end tag.  The returned XmlReader is conforms to
            <Mth>ConformanceLevel.Fragment</Mth>.
            </summary>
            <returns><Typ>XmlReader</Typ> limited to reading the current stream from the current tag to
            the corresponding end tag.</returns>
            <remarks>
            After calling this function, the state of the reader will be "between nodes".  E.g. the
            NodeType will be "None".  The next node read by <Mth>Read</Mth> will be the node
            following the end tag parsed of the Xml island.
            <para>
            The caller is responsible for closing the <Typ>XmlReader</Typ> returned by this method.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the node type isn't an Element node,
            or the node's name is blank.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.AddNamespaceURI(System.String)">
            <summary>
            Adds a namespace URI to the HtmlTextReader and returns an atomized object for efficient
            reference comparison with the object returned by NamespaceURI.
            </summary>
            <param name="uri">The string representing the URI.</param>
            <returns>Atomized object for efficient reference comparison with the object
            returned by NamespaceURI.</returns>
            <remarks>
            If the string <P>uri</P> has already been added, this method returns the atomized object
            representing that string.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.Close">
            <summary>
            Changes the <Fld>ReadState</Fld> to Closed.
            </summary>
            <remarks>
            This method changes ReadState to Closed and also releases any resources held while reading 
            including calling Close on the underlying stream.  If Close has already been called, 
            no action is performed.
            <para>
            The caller should no longer call methods on this object after calling <Mth>Close</Mth> or
            <Mth>Dispose</Mth>.
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.CopyNode(System.IO.TextWriter)">
            <summary>
            Copies the current node to the supplied TextWriter.  This may only be called once per node.
            <Typ>InvalidOperationException</Typ> is thrown if this is called more than once per node.
            </summary>
            <remarks>Does not call <Mth>Flush</Mth> on the supplied <Typ>TextWriter</Typ>.</remarks>
            <exception cref="T:System.ArgumentNullException"><P>textWriter</P> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The state of the reader is incorrect for this call.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.GetAttributeValue(Microsoft.LearningComponents.PlainTextString,System.Boolean)">
            <summary>
            Gets the value of the requested attribute name from the named Element or Identifier node.  
            </summary>
            <param name="name"></param>
            <param name="ignoreCase"></param>
            <returns>The attribute value of the requested attribute name, or String.Empty if it doesn't exist.</returns>
            <remarks>
            If the node isn’t Element or Identifier, throws InvalidOperationException.  
            This method does not move the reader unless attributes haven’t been parsed yet.
            <p>If there is more than one attribute with the same name, only retrieves 
            the first.</p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">If <c>NodeType</c> is not
            <c>HtmlNodeType.Element</c> or <c>HtmlNodeType.Identifier</c>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.GetAttributeValue(Microsoft.LearningComponents.PlainTextString)">
            <summary>
            Gets the value of the requested attribute name from the case-sensitively named Element or Identifier node.  
            </summary>
            <param name="name"></param>
            <returns>The attribute value of the requested attribute name, or String.Empty if it doesn't exist.</returns>
            <remarks>
            If the node isn’t Element or Identifier throws InvalidOperationException.  
            If the name doesn’t exist as an attribute returns String.Empty. 
            This method does not move the reader unless attributes haven’t been parsed yet.
            <p>If there is more than one attribute with the same name, only retrieves 
            the first.</p>
            </remarks>
            <exception cref="T:System.InvalidOperationException">If <c>NodeType</c> is not
            <c>HtmlNodeType.Element</c> or <c>HtmlNodeType.Identifier</c>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.GetAttributeValue(System.Int32)">
            <summary>
            Gets the value of an attribute on the current node, by index.
            </summary>
            <param name="index">Index of the attribute value to get.</param>
            <returns>Value of the attribute.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            <P>index</P> is out of range. This can also throw if the node type is such that
            attributes aren't allowed. (E.g. text nodes can't have attributes.)
            </exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.GetAttributeName(System.Int32)">
            <summary>
            Gets the name of an attribute on the current node, by index.
            </summary>
            <param name="index">Index of the attribute name to get.</param>
            <returns>Name of the attribute.</returns>
            <remarks>Since this represents the name of an HTML attribute, string comparisons should generally
            be done without case sensitivity.</remarks>
            <exception cref="T:System.IndexOutOfRangeException">
            <P>index</P> is out of range. This can also throw if the node type is such that
            attributes aren't allowed. (E.g. text nodes can't have attributes.)
            </exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.AddXmlns">
            <summary>
            Adds the current Element's xmlns attributes to m_XmlNamespaceManager.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.Read">
            <summary>
            Reads the next node from the stream.
            </summary>
            <remarks>
            If the encoding doesn’t exist on the system, an exception is thrown on the next Read.
            <para> Note: the following statement is currently unsupported:
            If the node read is a META node containing a charset encoding, the encoding changes.
            </para>
            </remarks>
            <exception cref="T:System.InvalidOperationException">If an error occurs while parsing.</exception>
            <returns><c>true</c> if the next node was read successfully; <c>false</c> if there are
            no more nodes to read.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.AttributeCount">
            <summary>
            Gets the number of attributes on the current node.
            </summary>
            <remarks>
            Only valid when NodeType is Element or Identifier.  Otherwise, returns 0.
            <p>Causes attributes to be parsed if they haven’t been already.</p>
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.HasAttributes">
            <summary>
            Gets a value indicating whether the current node has any attributes.
            </summary>
            <remarks>
            Only true when NodeType is Element or Identifier and contains attributes.  Otherwise, returns false.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.LocalName">
            <summary>
            Gets the local name of the current node.
            </summary>
            <remarks>
            The local name is everything after the first ":" character in the Name, or the full
            Name if there is no ":" character.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.Name">
            <summary>
            Gets the full name of the current node.
            </summary>
            <remarks>
            Since this represents the name of an HTML element, string comparisons should generally be done
            without case sensitivity.
            </remarks>
            <exception cref="T:System.InvalidOperationException">The reader is in an error state.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.NamespaceURI">
            <summary>
            Returns the namespace of the current node, treating the current node as Xml for the moment.
            </summary>
            <remarks>
            Unlike XmlTextReader, this is only valid if the current node is an Element.
            Returns null if there is no namespace or the current node is not an Element.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Current node is not an Element.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.NodeType">
            <summary>
            Gets the type of the current node.
            </summary>
            <exception cref="T:System.InvalidOperationException">The reader is in an error state.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.Prefix">
            <summary>
            Gets the namespace prefix associated with the node.
            </summary>
            <remarks>
            If the node's name has a ":" character in it, everything to the left of the first instance of
            the ":" character is considered to be the namespace prefix.  If there is no ":" character,
            returns String.Empty.
            </remarks>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.ReadState">
            <summary>
            Gets the state of the reader (Closed, EndOfFile, Error, Initial, Interactive)
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.Value">
            <summary>
            Gets the text value of the current node.  Standard Html character entities are replaced with the corresponding 
            Unicode characters.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser">
            <summary>
            State-machine class that parses a StreamReader, character-by-character, for HTML and XML.
            From a macro view, it is always in one of two states: between nodes or parsing a node.
            The main parsing routine is <Mth>HtmlNodeParser.Parse</Mth>.  If the parser's state is "between nodes"
            upon entering this method, upon exiting the method (assuming there is another node to parse)
            the state will usually  be parsing a node.  This is because it exits as soon as it knows the type of node
            being parsed, which usually won't take until the end of the node.  If the parser's state is "parsing a 
            node" upon entry, upon exit the state will be "between nodes."
            </summary>
            <remarks>
            Call <Mth>Close</Mth> when done to dispose of the <Typ>StreamWriter</Typ>'s.
            </remarks>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_Reader">
            <summary>
            holds the stream being parsed
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_ParseState">
            <summary>
            current parse state
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_Attributes">
            <summary>
            collection of attribute nodes on currently parsed element or Identifier
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_AttributeName">
            <summary>
            name of the currently parsing attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_AttributeValue">
            <summary>
            value of the currently parsing attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_Name">
            <summary>
            name of the currently parsing node.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_ParseMode">
            <summary>
            The current Parse mode of the HtmlNodeParser.  See <Typ>ParseMode</Typ>.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_Value">
            <summary>
            value of the currently parsing node.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_LinePosition">
            <summary>
            the line position of the currently parsing character
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_LineNumber">
            <summary>
            the line number of the currently parsing character
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_QuoteChar">
            <summary>
            quote char around the currently parsing attribute.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_AttributeLineNumber">
            <summary>
            same as m_LineNumber but for the beginning of the currently parsing attribute name
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_AttributeLinePosition">
            <summary>
            same as m_LinePosition but for the beginning of the currently parsing attribute name
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_ParseWriter">
            <summary>
            On a per-node basis, contains the contents of the currently parsing node, up to the
            point at which it has been parsed so far.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_GetOuterHtmlWriter">
            <summary>
            This StreamWriter is used by GetOuterHtml and is only non-null during the lifetime of that call.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.Close">
            <summary>
            Close the <Typ>StreamWriter</Typ>'s used by this object.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_CopyNode">
            <summary>
            This TextWriter is provided to the CopyNode call,
            and is only non-null during the lifetime of that call.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_IsEmptyElement">
            <summary>
            Identifies the Element as an empty element (e.g. one that ends with /> instead of just >).
            This is only valid when the current node is an Element and after the entire Element has been 
            parsed (e.g. m_ParseState is None.)
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.m_NodeType">
            <summary>
            The type of node being parsed.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.#ctor(System.IO.StreamReader)">
            <summary>
            Creates a new HtmlNodeParser using the provided reader.
            </summary>
            <param name="reader">StreamReader that reads from the Html stream.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.CopyNode(System.IO.TextWriter)">
            <summary>
            Copies the current node to the supplied TextWriter at the TextWriter's current position.
            </summary>
            <remarks>Does not call <Mth>Flush</Mth> on the supplied <Typ>TextWriter</Typ>.</remarks>
            <exception cref="T:System.ArgumentNullException"><P>textWriter</P> is null.</exception>
            <exception cref="T:System.InvalidOperationException">The state of the reader is incorrect for this call.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.GetOuterHtml">
            <summary>
            Returns the Html/Xml of the current Element up to its corresponding EndElement, unless the
            current Element is an empty element (e.g. ends with a /&gt; and not just a &gt;).  If it is an
            empty element, returns only the current Element.
            </summary>
            <returns>
            Returns a <Typ>TextReader</Typ> that gives access to the HTML (or XML as the case may be) from
            the current node (which must be an Element node) to the corresponding EndElement
            node (or the end of the file if the EndElement doesn't exist.)
            </returns>
            <remarks>
            After calling this method, the state of the parser will be that the current note type is "none."
            </remarks>
            <exception cref="T:System.InvalidOperationException">If the node type isn't an Element node,
            or the node's name is blank.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.GetNextNode">
            <summary>
            Parses until a new node is found.  Skips over the remainder of the currently parsing node.
            </summary>
            <returns>true if a new node is found. false if end of stream is reached.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.Parse">
            <summary>
            Parses the next section of the stream.
            </summary>
            <remarks>
            Throws EndOfStreamException when it hits the end of the stream without finishing
            parsing a full node.
            
            On entry to this method:
            m_ParseMode must be set.
            
            On exit from this method:
            m_AttributeLineNumber is set
            m_AttributeLinePosition is set
            m_ParseState is set
            m_NodeType is set if a new node is parsed.
            m_Reader is advanced to either the end of the currently parsing node, or just enough of the
            newly parsing node to recognize the type of node it is.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.StartNode(Microsoft.LearningComponents.HtmlNodeType)">
            <summary>
            Begins parsing a new node.
            </summary>
            <param name="nodeType">The type of node being parsed.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.EndNode(System.Nullable{System.Char})">
            <summary>
            Finishes parsing the current node.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.StartNewAttribute">
            <summary>
            Begins parsing a new attribute.
            </summary>
            <remarks>
            If <Fld>m_ParseMode</Fld> is <Typ>ParseMode.Skip</Typ> this method does nothing.
            Otherwise, it clears the current attribute name, value, and quote char.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.AddAttribute">
            <summary>
            Add an attribute to the list of attributes.
            </summary>
            <remarks>
            If <Fld>m_ParseMode</Fld> is <Typ>ParseMode.Skip</Typ> this method does nothing.
            Otherwise, it creates a new attribute node using the parsed attribute name, value, quote char,
            line number, and line position.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.AppendToValue(System.Char)">
            <summary>
            Append the character to m_Value.
            </summary>
            <param name="c">Character to append.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.AppendToAttributeName(System.Char)">
            <summary>
            Append the character to m_AttributeName.
            </summary>
            <param name="c">Character to append.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.AppendToAttributeValue(System.Char)">
            <summary>
            Append the character to m_AttributeValue.
            </summary>
            <param name="c">Character to append.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.Name">
            <summary>
            Name of the currently parsing node, or String.Empty if none.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.Value">
            <summary>
            value of the currently parsing node, or String.Empty if none.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.IsEmptyElement">
            <summary>
            Get accessor for m_IsEmptyElement, which ensures the correct validations.
            </summary>
            <exception cref="T:System.InvalidOperationException">If the current NodeType is not Element
            or m_ParseState is not None.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.HtmlTextReader.HtmlNodeParser.NodeType">
            <summary>
            The type of node being parsed.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ReadOnlyDictionary`2">
            <summary>
            Implements a read-only version of <Typ>IDictionary</Typ>.
            </summary>
            <remarks>Ensures that RloHandlers don’t change the collection of form controls that is provided by the application. 
            Makes the interface cleaner so that it can be expanded later with different RloHandlers with less hassle.
            </remarks>
            <typeparam name="K">The type of keys in the dictionary.</typeparam>
            <typeparam name="V">The type of values in the dictionary.</typeparam>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.#ctor(System.Collections.Generic.IDictionary{`0,`1})">
            <summary>
            Constructor.
            </summary>
            <param name="dictionary">The <Typ>IDictionary</Typ> to wrap.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.Add(`0,`1)">
            <summary>
            Not supported. 
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.ContainsKey(`0)">
            <summary>
            Determines whether the <Typ>ReadOnlyDictionary</Typ> contains an element with the specified key.  
            </summary>
            <param name="key">The key to locate in the <Typ>ReadOnlyDictionary</Typ>.</param>
            <returns><c>true</c> if the <Typ>ReadOnlyDictionary</Typ> contains an element with the key; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.Remove(`0)">
            <summary>
            Not supported.
            </summary>
            <param name="key"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.TryGetValue(`0,`1@)">
            <summary>
            Gets the value associated with the specified key.  
            </summary>
            <param name="key">The key whose value to get.</param>
            <param name="value">When this method returns, the value associated with the specified key, if the key is found;
            otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized.</param>
            <returns><c>true</c> if the object that implements <Typ>ReadOnlyDictionary</Typ> contains an element with the specified key; 
            otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.Add(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported.
            </summary>
            <param name="item"></param>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.Clear">
            <summary>
            Not supported.
            </summary>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Determines whether the <Typ>ICollection</Typ> contains a specific value. 
            </summary>
            <param name="item">The object to locate in the <Typ>ICollection</Typ>.</param>
            <returns><c>true</c> if item is found in the <Typ>ICollection</Typ>; otherwise, <c>false</c>. </returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
            <summary>
            Copies the elements of the <Typ>ICollection</Typ> to an <Typ>Array</Typ>, starting at a particular <Typ>Array</Typ> index. 
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements copied from <Typ>ICollection</Typ>. 
            The <Typ>Array</Typ> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in <paramref name="array"/> at which copying begins.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
            <summary>
            Not supported.
            </summary>
            <param name="item"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Always thrown.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.GetEnumerator">
            <summary>
            Supports a simple iteration over a nongeneric collection. 
            </summary>
            <returns><Typ>IEnumerator</Typ> base interface.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.ReadOnlyDictionary`2.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection. 
            </summary>
            <returns>An <Typ>IEnumerator</Typ> object that can be used to iterate through the collection.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.ReadOnlyDictionary`2.Keys">
            <summary>
            Gets an <Typ>ICollection</Typ> containing the keys of the <Typ>ReadOnlyDictionary</Typ>. 
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ReadOnlyDictionary`2.Values">
            <summary>
            Gets an <Typ>ICollection</Typ> containing the values in the <Typ>IDictionary</Typ>. 
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ReadOnlyDictionary`2.Item(`0)">
            <summary>
            Gets the element with the specified key.  Set is not supported.
            </summary>
            <param name="key">The key of the element to get.</param>
            <returns>The element with the specified key.</returns>
        </member>
        <member name="P:Microsoft.LearningComponents.ReadOnlyDictionary`2.Count">
            <summary>
            Gets the number of elements in the <Typ>ICollection</Typ>.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ReadOnlyDictionary`2.IsReadOnly">
            <summary>
            Always returns <c>true</c>.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.Assert(System.Boolean)">
            <summary>
            Throws an exception if the condition is false.
            </summary>
            <param name="condition">A boolean representing a condition that should be true.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.Assert(System.Boolean,System.String)">
            <summary>
            Throws an exception if the condition is false.
            </summary>
            <param name="condition">A boolean representing a condition that should be true.</param>
            <param name="uniqueId">Unique string identifier to display for this internal error.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.StringToTimeSpanScormV1p3(System.String)">
            <summary>
            Converts a SCORM 2004 Timespan string into a <Typ>TimeSpan</Typ>.
            </summary>
            <param name="value">A length of time in hours, minutes and seconds shown in the following 
            format: P[yY][mM][dD][T[hH][mM][s[.s]S]] with a precision of 0.01 seconds.</param>
            <returns>The corresponding <Typ>TimeSpan</Typ>.  If <paramref name="value"/> is null or
            <c>String.Empty</c>, this returns <c>TimeSpan.MaxValue</c>.</returns>
            <exception cref="T:System.FormatException"><paramref name="value"/> is in an incorrect format.  No
            message is included in the exception.</exception>
            <remarks><para>
            XmlConvert.ToTimeSpan() will not work for converting SCORM 2004 values (which are also ISO 
            8601 values) since XmlConvert uses an incorrect value for days per year and days per month.
            XmlConvert.ToString(TimeSpan) will produce a correct equivalent, however.</para>
            <para>
            1 year ~ (365*4+1)/4*60*60*24*100 = 3155760000 centiseconds
            1 month ~ (365*4+1)/48*60*60*24*100 = 262980000 centiseconds
            1 day = 8640000 centiseconds
            1 hour = 360000 centiseconds
            1 minute = 6000 centiseconds
            </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.StringToTimeSpanScormV1p2(System.String)">
            <summary>
            Converts a SCORM 1.2 Timespan string into a <Typ>TimeSpan</Typ>.
            </summary>
            <param name="value">A length of time in hours, minutes and seconds shown in the following 
            numerical format: HHHH:MM:SS.SS.  Hours has a minimum of 2 digits and a maximum of 4 digits.  
            Minutes shall consist of exactly 2 digits.  Seconds shall contain 2 digits, with an optional 
            decimal point and 1 or 2 additional digits.</param>
            <returns>The corresponding <Typ>TimeSpan</Typ>.  If <paramref name="value"/> is null or
            <c>String.Empty</c>, this returns <c>TimeSpan.MaxValue</c>.</returns>
            <exception cref="T:System.FormatException"><paramref name="value"/> is in an incorrect format.  No
            message is included in the exception.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.StringToXPathLiteral(System.String)">
            <summary>
            Converts a string to an XPath literal.
            </summary>
            <remarks>
            <para>
            For example, the string <c>"Abc'123'Def"</c> converts to <c>"\"Abc'123'Def\""</c>.
            </para>
            <para>
            XPath defines a literal string as a string between two double quotes that contains no double quotes
            or a string between two single quotes that contains no single quotes.
            </para>
            <para>
            This works well for most cases, but if the string in question contains both single and double quotes,
            we have some work to do.  We get around this by using the built-in concat() function to concatenate
            the string fragments without double-quotes along with double-quotes in single-quoted strings.
            </para>
            </remarks>
            <param name="value">The string to verify</param>
            <returns>A properly quoted string or equivalent expression.</returns>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.ValidateParameterNonNull(System.String,System.Object)">
            <summary>
            Helper function to check if a parameter is null. If not, an ArgumentNullException
            is thrown with <paramref name="paramName"/> as the parameter name.
            </summary>
            <param name="paramName"></param>
            <param name="parameter"></param>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.ValidateParameterNotEmpty(System.String,System.String)">
            <summary>
            Helper function to verify a parameter is not an empty string. If the 
            <P>parameter</P> is null, empty or contains only blanks, an ArgumentException is thrown.
            </summary>
            <param name="paramName">The name of the parameter, provided in case of error.</param>
            <param name="parameter">The parameter value to validate.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.Utilities.CopyStream(System.IO.Stream,Microsoft.LearningComponents.ImpersonationBehavior,System.IO.Stream,Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            Copy from one stream to another, using potentially different identities for reading and writing.
            </summary>
            <param name="fromStream">The stream to copy from.</param>
            <param name="readImpersonationBehavior">Determines whether to impersonate when reading from <paramref name="fromStream"/>. </param>
            <param name="toStream">The stream to write to.</param>
            <param name="writeImpersonationBehavior">Determines whether to impersonate when writing to <paramref name="toStream"/>. 
            </param>
        </member>
        <member name="T:Microsoft.LearningComponents.ImpersonateIdentity">
            <summary>
            The ImpersonateIdentity class manages the impersonation of the user
            to enable accessing resources.  Instances _must_ be disposed of -- best
            practice is to use within a using () {} construct.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.ImpersonateIdentity.#ctor(Microsoft.LearningComponents.ImpersonationBehavior)">
            <summary>
            This method throws an exception of the user does not have the right
            to switch to the identity.  This must be Disposed of
            when we are finished with it. If the identity is null, this method has no effect.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.ImpersonateIdentity.Dispose">
            <summary>
            This method Impersonates to the current user account and notifies
            the web part that it's be done. 
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ManifestValidator">
            <summary>
            ManifestValidator validates that the contents of the manifest conforms to the SCORM requirements,
            for those manifest elements and attributes that are relevant to Microsoft Learning Components.
            </summary>
            <remarks>
            ManifestValidator does not attempt to validate that files external to the manifest
            exist in the locations indicated in the manifest. Use PackageValidator for that level 
            of validation.
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.ManifestValidator.Validate(Microsoft.LearningComponents.Manifest.ManifestReader)">
            <summary>
            Validate the manifest. Errors and warnings are returned in the results
            </summary>
            <param name="manifestReader">The <c>ManifestReader</c> to validate.</param>
        </member>
        <member name="T:Microsoft.LearningComponents.PackageValidator">
            <summary>
            PackageValidator detects variances with the SCORM specification.
            </summary>
            <remarks>Given a SCORM package, the PackageValidator will verify that the manifest is 
            correct (using the ManifestValidator object) and verify that the files referenced in the 
            manifest are actually present in the package.
            <para>The PackageValidator does not verify that files referenced within assets and not within
            the package manifest are present in the package. Put another way: the PackageValidator does 
            not read or parse the contents of any file (other than the manifest) within the package.
            </para>
            <para>
            Definitions:
            Error = A required node in a SCORM package either does not exist or does not have
            an appropriate value.
            Warning = A SCORM recommendation is not followed in the package or an optional 
            value in the package has an invalid value. </para>
            </remarks>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageValidator.Validate(Microsoft.LearningComponents.PackageReader,Microsoft.LearningComponents.PackageValidatorSettings)">
            <summary>
            Validate a package according to specific validation settings. 
            </summary>
            <remarks>
            The <Typ>ValidationResults</Typ> log will contain the warnings and errors encountered during the package
            validation process, up to any <Typ>InvalidPackageException</Typ> that is thrown during the process, at
            which time the validation process ends.
            </remarks>
            <returns>
            A <Typ>ValidationResults</Typ> log that contains the warnings and errors encountered during the package
            validation process.
            </returns>
            <param name="packageValidatorSettings">The <c>PackageValidatorSettings</c> determining which 
            validation rules should be applied during the validation process.</param>
            <param name="packageReader">The package to be valdated.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if the <paramref name="packageReader"/> is null.</exception>
            <exception cref="T:Microsoft.LearningComponents.InvalidPackageException">Thrown if the validation process encounters errors in the package
            for which the <paramref name="packageValidatorSettings"/> have a <Typ>ValidationBehavior</Typ> value 
            of <c>ValidationBehavior.Enforce</c>.</exception>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageValidator.Validate(Microsoft.LearningComponents.PackageReader)">
            <summary>
            Validate the basic structure of a package to ensure it is e-learning content. This method does not 
            verify any package details, but rather verifies that the structure of the package indicates it is 
            intended to be e-learning content that can be rendered within MLC.
            </summary>
            <param name="packageReader">The package to validate.</param>
            <returns>The results of validation.</returns>
        </member>
        <member name="F:Microsoft.LearningComponents.PackageValidator.queryOrAnchor">
            <summary>
            Used by RemoveQueryAndAnchor()
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageValidator.RemoveQueryAndAnchor(System.String)">
            <summary>
            Given a string containing a URI, remove any query string or anchor (e.g. anything after a "?" or "#").
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ValidationResults">
             <summary>
             The results from a validation operation.
             </summary>
             <remarks>
             This is a class to hold logged warnings and errors of type <Typ>ValidationResult</Typ>.
             </remarks>
            
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResults.#ctor">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResults.LogWarning(Microsoft.LearningComponents.ValidationResults,System.String)">
            <summary>
            Adds a warning to the <paramref name="log"/>, if provided.
            </summary>
            <param name="log">If non-null, the warning is added to it.</param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResults.LogError(Microsoft.LearningComponents.ValidationResults,System.Boolean,System.String)">
            <summary>
            Adds an error to the <paramref name="log"/>, if provided.  Throws a <Typ>InvalidPackageException</Typ> if the
            <paramref name="throwInvalidPackageException"/> is <c>true</c>.
            </summary>
            <param name="log">If non-null, the error is added to it.</param>
            <param name="throwInvalidPackageException">True to throw a <Typ>InvalidPackageException</Typ> containing the <paramref name="message"/>.
            </param>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResults.AddResult(Microsoft.LearningComponents.ValidationResult)">
            <summary>
            Adds a new <Typ>ValidationResult</Typ> item to the log.  
            </summary>
            <param name="result">The <Typ>ValidationResult</Typ> log item to add to the <paramref name="log"/>.</param>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidationResults.Results">
            <summary>
            List of errors and warnings in the package.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidationResults.HasErrors">
            <summary>
            True if there are errors in the log.  False if there are not.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidationResults.HasWarnings">
            <summary>
            True if there are warnings in the log. False if there are not.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ValidationResult">
            <summary>
            ValidationResult is the information about a particular error 
            or warning that was received during the process of validating a package.
            </summary>  
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResult.#ctor(System.Boolean,System.String)">
            <summary>
            Constructor.
            </summary>
            <param name="isError"><c>true</c> if this is a critical problem in the manifest, or <c>false</c> if this is a non-critical 
            problem in the manifest.</param>
            <param name="message">The result message.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResult.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor called during de-serialization.
            </summary>
            <param name="info">Info about object.</param>
            <param name="context">Context of deserialization.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.ValidationResult.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Return serialization data.
            </summary>
            <param name="info">The information for serialization</param>
            <param name="context">The context of serialization</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="info"/> of <paramref name="context"/>
            is not provided.</exception>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidationResult.IsWarning">
            <summary>
            True if this represents a warning.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidationResult.IsError">
            <summary>
            True if this represents an error.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidationResult.Message">
            <summary>
            The human-readable message for this warning or error.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ValidationBehavior">
            <summary>
            Validation behaviors used by <Typ>PackageValidatorSettings</Typ>.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ValidationBehavior.None">
            <summary>
            Validation violations are ignored.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ValidationBehavior.LogWarning">
            <summary>
            Validation violations are logged as warnings.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ValidationBehavior.LogError">
            <summary>
            Validation violations are logged as errors.
            </summary>
        </member>
        <member name="F:Microsoft.LearningComponents.ValidationBehavior.Enforce">
            <summary>
            Validation violations throw exceptions.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.PackageValidatorSettings">
            <summary>
            Validation behaviors used during package validation.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageValidatorSettings.#ctor(Microsoft.LearningComponents.ValidationBehavior,Microsoft.LearningComponents.ValidationBehavior,Microsoft.LearningComponents.ValidationBehavior,Microsoft.LearningComponents.ValidationBehavior)">
            <summary>
            Constructor.
            </summary>
            <param name="scormRequirementValidation">How to validate SCORM requirement violations.</param>
            <param name="scormRecommendationValidation">How to validate SCORM recommendation violations.</param>
            <param name="mlcRequirementValidation">How to validate MLC requirement violations.</param>
            <param name="lrmRequirementValidation">How to validate LRM requirement violations.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageValidatorSettings.RequiresLog(Microsoft.LearningComponents.ValidationBehavior)">
            <summary>
            Returns true if the behavior is LogError or LogWarning.
            </summary>
            <param name="behavior"></param>
            <returns></returns>
        </member>
        <member name="M:Microsoft.LearningComponents.PackageValidatorSettings.RequiresLog">
            <summary>
            Returns true if any of the validation requirements is LogError or LogWarning.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Microsoft.LearningComponents.PackageValidatorSettings.ScormRequirementValidation">
            <summary>
            How to validate SCORM requirement violations.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.PackageValidatorSettings.ScormRecommendationValidation">
            <summary>
            How to validate SCORM recommendation violations.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.PackageValidatorSettings.MlcRequirementValidation">
            <summary>
            How to validate MLC requirement violations.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.PackageValidatorSettings.LrmRequirementValidation">
            <summary>
            How to validate Lrm requirement violations.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.InvalidPackageException">
            <summary>
            Exception to indicate the package contents are not valid.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidPackageException.#ctor">
            <summary>
            Initializes a new instance of the <Typ>InvalidPackageException</Typ> class.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidPackageException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <Typ>InvalidPackageException</Typ> class.
            </summary>
            <param name="message">The message for the exception.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidPackageException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <Typ>InvalidPackageException</Typ> class.
            </summary>
            <param name="message">The message for the exception.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Microsoft.LearningComponents.InvalidPackageException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <Typ>InvalidPackageException</Typ> class.
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="T:Microsoft.LearningComponents.LrmSettings">
            <summary>
            Settings used to determine how to handle problems with an LRM package.
            </summary>
        </member>
        <member name="M:Microsoft.LearningComponents.LrmSettings.#ctor(System.Boolean)">
            <summary>
            Constructor for LrmSettings, which determines whether or not to fix a package that violates LRM requirements.
            </summary>
            <param name="fixLrmViolations">
            If <c>true</c>, when an LRM requirement is violated the value will be changed to a valid
            value.  If <c>false</c>, throw an exception.
            </param>
        </member>
        <member name="P:Microsoft.LearningComponents.LrmSettings.FixLrmViolations">
            <summary>
            If <c>true</c>, when an LRM requirement is violated the value will be changed to a valid
            value.  If <c>false</c>, throw an exception.
            </summary>
        </member>
        <member name="T:Microsoft.LearningComponents.ValidatorResources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ActivityResourceBadAttribute">
            <summary>
              Looks up a localized string similar to A resource that belongs to an activity must have a type attribute set to &quot;webcontent&quot;, an adlcp:scormType attribute set to &quot;sco&quot; or &quot;asset&quot;, and a valid href attribute.  {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadAttributeValue">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; of attribute, {1}, on element &lt;{2}&gt;, is an invalid value.  Extra information: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadAttributeValueReplacement">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; of attribute, {1}, on element &lt;{2}&gt;, is an invalid value.  It has been replaced by the default value &quot;{3}&quot;.  Extra information: {4}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadUri">
            <summary>
              Looks up a localized string similar to The value is an invalid URI..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadValue">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; of element &lt;{1}&gt; is an invalid value.  Extra information: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadValueReplacement">
            <summary>
              Looks up a localized string similar to The value &quot;{0}&quot; of element &lt;{1}&gt; is an invalid value.  It has been replaced by the default value &quot;{2}&quot;.  Extra information: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadXmlBase">
            <summary>
              Looks up a localized string similar to The value is an invalid xml:base. xml:base must be a valid URI that does not begin with a &quot;/&quot; but does end with a &quot;/&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.BadXmlInManifest">
            <summary>
              Looks up a localized string similar to The package contains a manifest that contains badly formed XML..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ConvertedUriReplacement">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; portion of attribute, {1}, on element &lt;{2}&gt; contains invalid URI characters.  These have been converted into valid characters automatically.  The new value is &quot;{3}&quot;.  Extra information: {4}..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ConvertedUriSpaces">
            <summary>
              Looks up a localized string similar to The &quot;{0}&quot; value of attribute, {1}, on element &lt;{2}&gt; contains spaces, which are invalid URI characters.  This URI is still being allowed, but the package may not work as expected..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.DuplicateMinNormalizedMeasure">
            <summary>
              Looks up a localized string similar to The &lt;minNormalizedMeasure&gt; node can only appear once in the &lt;{0} objectiveID=&quot;{1}&quot;&gt; node.  See SCORM 1.3 CAM 5.1.7.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.DuplicateRollupAction">
            <summary>
              Looks up a localized string similar to The &lt;rollupAction&gt; node can only appear once in the &lt;rollupRule&gt;node.  See SCORM 1.3 CAM 5.1.6.1.3..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.DuplicateRollupConditions">
            <summary>
              Looks up a localized string similar to The &lt;rollupCondition&gt; node can only appear once in the &lt;rollupRule&gt; node.  See SCORM 1.3 CAM 5.1.6.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.DuplicateRuleAction">
            <summary>
              Looks up a localized string similar to The &lt;ruleAction&gt; node may occur 1 and only 1 time within a &lt;preConditionRule&gt;, &lt;postConditionRule&gt;, or &lt;exitConditionRule&gt;.  See SCORM 1.3 CAM 5.1.3.1.2..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.DuplicateRuleConditions">
            <summary>
              Looks up a localized string similar to The &lt;ruleConditions&gt; node can only appear once in the &lt;{0}&gt; node.  See SCORM 1.3 CAM 5.1.3.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ElementRemoved">
            <summary>
              Looks up a localized string similar to (element has been removed).
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.EmptyReferencedObjective">
            <summary>
              Looks up a localized string similar to The referencedObjective attribute on the {0} node is whitespace only, which is invalid.  See SCORM 1.3 CAM 5.1.3.1.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.EmptyString">
            <summary>
              Looks up a localized string similar to (empty string).
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.FileHrefMissing">
            <summary>
              Looks up a localized string similar to The &lt;file&gt; node must have an href attribute.  See SCORM 1.3 CAM 3.4.1.23, or SCORM 1.2 CAM 2.3.5.4.3..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.FileMissing">
            <summary>
              Looks up a localized string similar to The file {0} does not exist..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.GenericDuplicate">
            <summary>
              Looks up a localized string similar to The parent node is {0}..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.IdenticalKeyValues">
            <summary>
              Looks up a localized string similar to The duplicate nodes share the same {0} value, &quot;{1}&quot;.  The values must be different..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.IllegalAttributeInResourcePackage">
            <summary>
              Looks up a localized string similar to The attribute, {1}, containing the value &quot;{0}&quot; on node &lt;{2}&gt; is illegal in Resource packages..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.IllegalNegativeInteger">
            <summary>
              Looks up a localized string similar to The value must be 0 or a positive integer..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.IllegalPercentage">
            <summary>
              Looks up a localized string similar to The value must be a decimal value from 0 to 1, inclusive..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidDuplicateNodes">
            <summary>
              Looks up a localized string similar to UA !There are multiple instances of element, &lt;{0}&gt;. Extra information:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidDuplicateNodesIgnored">
            <summary>
              Looks up a localized string similar to There are multiple instances of element, &lt;{0}&gt;. All but the first are ignored. Extra information:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidFileType">
            <summary>
              Looks up a localized string similar to The file {0} is not a valid file type..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidIdentifier">
            <summary>
              Looks up a localized string similar to The identifier is not a valid xs:ID..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidNode">
            <summary>
              Looks up a localized string similar to An element, &lt;{0}&gt;, is invalid because it is illegal or has illegal attribute values. Extra information: {1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidPresentationNode">
            <summary>
              Looks up a localized string similar to A &lt;presentation&gt; node may only appear, if needed, as a child of a leaf &lt;item&gt;element that references a resource..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.InvalidTrueValuesInMapInfo">
            <summary>
              Looks up a localized string similar to In multiple &lt;mapInfo&gt; nodes, true values are restricted.  See SCORM 1.3 CAM 5.1.7.1.2..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ItemIdentifierMissing">
            <summary>
              Looks up a localized string similar to The &lt;item&gt; node must have an identifier attribute.  See SCORM 1.3 CAM 3.4.1.9, or SCORM 1.2 CAM 2.3.5.3.1.2..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ItemMustRepresentSco">
            <summary>
              Looks up a localized string similar to The parent node, {0}, must represent a SCO..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ItemTitleMissing">
            <summary>
              Looks up a localized string similar to The &lt;title&gt; node is required on the {0} node in Content Aggregation manifests.  See SCORM 1.3 CAM 3.4.1.10, or SCORM 1.2 CAM 2.3.5.3.1.2.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrAttributeLengthException">
            <summary>
              Looks up a localized string similar to The node &lt;{0}&gt; has a value that starts with &quot;{1}&quot; that is too long for the &quot;{2}&quot; attribute..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrAttributeLengthViolation">
            <summary>
              Looks up a localized string similar to The node &lt;{0}&gt; has a value that is too long for the &quot;{1}&quot; attribute.  It has been truncated to &quot;{2}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrAttributeValueException">
            <summary>
              Looks up a localized string similar to The value of the &lt;{0}&gt; element&apos;s &quot;{1}&quot; attribute is missing or erroneous..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrChildInLrmNamespaceNotFound">
            <summary>
              Looks up a localized string similar to The node &lt;{0}&gt; can not be found in the correct namespace. Extra information:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrChildInLrmNamespaceNotFoundTryOther">
            <summary>
              Looks up a localized string similar to The node &lt;{0}&gt; can not be found in the correct namespace  An attempt will be made to find a child node with that name in other namespaces. Extra information:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrDefaultAttributeUsed">
            <summary>
              Looks up a localized string similar to A default value of &quot;{0}&quot; has been used in place of the missing or erroneous value for the &lt;{1}&gt; element&apos;s &quot;{2}&quot; attribute..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrDefaultValueUsed">
            <summary>
              Looks up a localized string similar to A default value of &quot;{0}&quot; has been used in place of the missing or erroneous value for the &lt;{1}&gt; element..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrFixLmsViolationsNotSet">
            <summary>
              Looks up a localized string similar to Unable to substitute a default value for the missing value of node &lt;{0}&gt; because the conversion process is not allowed to substitute default values for missing or erroneous values in the index.xml..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrLicensedContentNotSupported">
            <summary>
              Looks up a localized string similar to This learning resource requires a license and licensed Learning Resources are not supported..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrLogCannotBeNullWhenRequired">
            <summary>
              Looks up a localized string similar to The log parameter can not be null when the ValidationBehavior requires a log..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrMultiLRNotSupported">
            <summary>
              Looks up a localized string similar to The package is a multiple learning resource package, which is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrMustHaveCorrectRoot">
            <summary>
              Looks up a localized string similar to A valid index.xml begins with a &lt;LearningResource&gt; node in the &quot;urn:schemas-microsoft-com:learning-resource&quot; namespace..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrNodeLengthException">
            <summary>
              Looks up a localized string similar to The node &lt;{0}&gt; has a value that starts with &quot;{1}&quot; that is too long..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrNodeLengthViolation">
            <summary>
              Looks up a localized string similar to The node &lt;{0}&gt; has a value that is too long.  It has been truncated to &quot;{1}&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrNodeValueException">
            <summary>
              Looks up a localized string similar to The value of the &lt;{0}&gt; element is missing or erroneous..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrPageIdDuplicate">
            <summary>
              Looks up a localized string similar to The value of the PageID attribute, {0}, on a &lt;Page&gt; element is used more than once.  PageID&apos;s must be unique for each &lt;Page&gt; element..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrPageNodeSkipped">
            <summary>
              Looks up a localized string similar to The value of the PageID attribute of the {0} element is invalid. The element has been omitted from the conversion..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.LrRemoteContentNotSupported">
            <summary>
              Looks up a localized string similar to Remote content is not supported..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ManifestMetaDataMissing">
            <summary>
              Looks up a localized string similar to The &lt;metadata&gt; node is missing or in the wrong namespace on the &lt;manifest&gt;.  See SCORM 1.3 CAM 3.4.1.2..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ManifestMissing">
            <summary>
              Looks up a localized string similar to A manifest is required and is not present in the package..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ManifestNodeMissing">
            <summary>
              Looks up a localized string similar to A &lt;manifest&gt; node in the correct namespace is required..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MetadataLocationBadXml">
            <summary>
              Looks up a localized string similar to The file, {0}, referenced by the location element inside of metadata in the manifest contains invalid metadata..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MetadataLocationNotFound">
            <summary>
              Looks up a localized string similar to The file, {0}, referenced by the location element inside of metadata in the manifest can not be found in the package..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MinNormalizedMeasureOutOfRange">
            <summary>
              Looks up a localized string similar to The value is out of range [-1 to 1] on the &lt;minNormalizedMeasure&gt; node in the &lt;{0} objectiveID=&quot;{1}&quot;&gt; node.  See SCORM 1.3 CAM 5.1.7.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MlcNodeViolation">
            <summary>
              Looks up a localized string similar to The value that begins with &quot;{0}&quot; of the node, {1}, is longer than that supported by Microsoft Learning Components..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MlcNodeViolationTruncated">
            <summary>
              Looks up a localized string similar to The value that begins with &quot;{0}&quot; of the node, {1}, is longer than that supported by MLC.  It has been truncated to {2} characters..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MlcViolation">
            <summary>
              Looks up a localized string similar to The value that begins with &quot;{0}&quot; of the attribute, {1}, is longer than that supported by Microsoft Learning Components.  Extra information: {2}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MlcViolationActivityMissing">
            <summary>
              Looks up a localized string similar to An Activity node is required for content used in Microsoft Learning Components..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MlcViolationOrganizationMissing">
            <summary>
              Looks up a localized string similar to An Organization node is required for content used in Microsoft Learning Components..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.MlcViolationTruncated">
            <summary>
              Looks up a localized string similar to The value that begins with &quot;{0}&quot; of the attribute, {1}, is longer than that supported by for content used in Microsoft Learning Components.  It has been truncated to {2} characters.  Extra information: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.NodeName">
            <summary>
              Looks up a localized string similar to The name of the erroneous node is: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.NodeXml">
            <summary>
              Looks up a localized string similar to The full XML of the erroneous node is: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ObjectiveIdMissing">
            <summary>
              Looks up a localized string similar to The objective must have an objectiveID attribute.  Extra information: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.OrganizationIdentifierMissing">
            <summary>
              Looks up a localized string similar to The &lt;organization&gt; node must have an identifier attribute.  See SCORM 1.3 CAM 3.4.1.7, or SCORM 1.2 CAM 2.3.5.3.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.OrganiztionTitleMissing">
            <summary>
              Looks up a localized string similar to The &lt;title&gt; node is missing on the &lt;organization&gt; node with identifier=&quot;{0}&quot;.  See SCORM 1.3 CAM 3.4.1.8, or SCORM 1.2 CAM 2.3.5.3.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.OrphanedFile">
            <summary>
              Looks up a localized string similar to The file {0} is not referenced in the manifest..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.OutOfRangeNegOneToOne">
            <summary>
              Looks up a localized string similar to The value is outside the valid range [-1 to 1]..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.PackageCouldNotBeOpened">
            <summary>
              Looks up a localized string similar to This package could not be opened. More information: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ParentXml">
            <summary>
              Looks up a localized string similar to The full XML of the parent node is: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.PrerequisitesScriptInvalid">
            <summary>
              Looks up a localized string similar to There are problems with the syntax of the prerequisite script, or a referenced identifier can not be found in the manifest..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.PrerequisitesTypeWrong">
            <summary>
              Looks up a localized string similar to The value of the &lt;prerequisites&gt; type attribute must be &quot;aicc_script&quot;..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.PrimaryObjectiveMissingOrDuplicate">
            <summary>
              Looks up a localized string similar to In a list of &lt;objectives&gt;, there must be one and only one &lt;primaryObjective&gt; node..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ReferenceNotFound">
            <summary>
              Looks up a localized string similar to The referenced node can not be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RequiredAttributeMissing">
            <summary>
              Looks up a localized string similar to The required attribute, {0}, is missing on element &lt;{1}&gt;. Extra information:{2}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RequiredElementMissing">
            <summary>
              Looks up a localized string similar to The required element, &lt;{0}&gt;, is missing. Extra information:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RequiredElementMissingDefault">
            <summary>
              Looks up a localized string similar to The required element, &lt;{0}&gt;, is missing.  Default values will be used. Extra information:{1}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ResourceHrefMissing">
            <summary>
              Looks up a localized string similar to The resource node is missing the required attribute, &apos;href&apos;.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ResourceIdentifierMissing">
            <summary>
              Looks up a localized string similar to The &lt;resource&gt; node must have an identifier attribute.  See SCORM 1.3 CAM 3.4.1.21, or SCORM 1.2 CAM 2.3.5.4.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ResourceNotAllowedOnActivity">
            <summary>
              Looks up a localized string similar to If an &lt;item&gt; element is a parent element, the &lt;item&gt; may not reference a &lt;resource&gt;.  See SCORM 1.3 CAM 3.4.1.9.  The full XML of the node is: {0}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ResourceOrOrganizationNotFound">
            <summary>
              Looks up a localized string similar to The referenced resource or organization can not be found..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RollupActionMissing">
            <summary>
              Looks up a localized string similar to The &lt;rollupAction&gt; node is missing on an &lt;rollupRule&gt;.  See SCORM 1.3 CAM 5.1.6.1.3..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RollupConditionConditionMissing">
            <summary>
              Looks up a localized string similar to The &lt;rollupCondition&gt; node must have a condition attribute.  See SCORM 1.3 CAM 5.1.6.1.2..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RollupConditionsMissing">
            <summary>
              Looks up a localized string similar to The &lt;rollupConditions&gt; node is missing on an &lt;rollupRule&gt;.  See SCORM 1.3 CAM 5.1.6.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.RuleConditionConditionMissing">
            <summary>
              Looks up a localized string similar to The &lt;ruleCondition&gt; node must have a condition attribute.  See SCORM 1.3 CAM 5.1.3.1.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.SequencingCollectionInResource">
            <summary>
              Looks up a localized string similar to &lt;sequencingCollection&gt; nodes are not permitted in resource packages. This manifest is considered a resource package because it has no &lt;organization&gt; nodes.  See SCORM CAM 3.5.3..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.SequencingIdMissing">
            <summary>
              Looks up a localized string similar to The &lt;sequencing&gt; node in a &lt;sequencingCollection&gt; must have an ID attribute.  See SCORM 1.3 CAM 5.1.1..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.SpmNodeViolation">
            <summary>
              Looks up a localized string similar to The value that begins with &quot;{0}&quot; of the node, &lt;{1}&gt;, is longer than the smallest permitted maximum (SPM), {2}..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.SpmViolation">
            <summary>
              Looks up a localized string similar to The value that begins with &quot;{0}&quot; of the attribute, {1}, is longer than the smallest permitted maximum (SPM), {2}.  Extra information: {3}.
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ValueIncorrectType">
            <summary>
              Looks up a localized string similar to The value is not the expected type..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ValueOutOfRange">
            <summary>
              Looks up a localized string similar to The value is out of range..
            </summary>
        </member>
        <member name="P:Microsoft.LearningComponents.ValidatorResources.ValueOutOfRangeToken">
            <summary>
              Looks up a localized string similar to The value is not one of the permitted token values..
            </summary>
        </member>
    </members>
</doc>
