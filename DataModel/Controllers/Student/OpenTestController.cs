using System;
using System.Collections.Generic;
using System.Web;
using System.Web.UI.HtmlControls;
using System.Web.UI.WebControls;
using IUDICO.DataModel.Common;
using IUDICO.DataModel.DB;
using IUDICO.DataModel.HttpHandlers;
using IUDICO.DataModel.ImportManagers;
using LEX.CONTROLS;

namespace IUDICO.DataModel.Controllers.Student
{
    public class OpenTestController : ControllerBase
    {
        [ControllerParameter] public int OpenThema;

        [ControllerParameter] public int PageIndex;
        
        [ControllerParameter] public string Submit;

        [ControllerParameter] public string CurriculumnName;

        [ControllerParameter] public string StageName;

        //[PersistantField]
        //private bool ShowResultChecked;

        private IList<TblPages> pages = new List<TblPages>();

        public IVariable<string> Description = string.Empty.AsVariable();

        public IVariable<string> ThemaName = string.Empty.AsVariable();

        public IVariable<string> PageCount = string.Empty.AsVariable();

        #region Page Controls

        private HtmlControl iframe;

        public HttpResponse Response { get; set; }

        public ContentPlaceHolder PageContent { get; set; }

        public CheckBox ShowResult { get; set; }

        public Button NextButton { get; set; }

        public Button PreviousButton { get; set; }

        #endregion

        public void NextPage()
        {
            RedirectToController(new OpenTestController
                                     {
                                         BackUrl = string.Empty,
                                         OpenThema = OpenThema,
                                         Submit = Submit,
                                         PageIndex = ++PageIndex
                                     });
        }

        public void PreviousPage()
        {
            RedirectToController(new OpenTestController
                                     {
                                         BackUrl = string.Empty,
                                         OpenThema = OpenThema,
                                         Submit = Submit,
                                         PageIndex = --PageIndex
                                     });
        }

        public void PageLoad(object sender, EventArgs e)
        {
            if (OpenThema == 0)
                throw new Exception("Wrong request (Thema ID dont specified)");

            LoadIFrame();

            SetPages();

            ShowCurrentTestPage();

           //ShowResult.Checked = ShowResultChecked;
        }

        public void ShowResultCheckBox_CheckedChanged(object sender, EventArgs e)
        {
           //ShowResultChecked = ShowResult.Checked;
        }

        private void ShowCurrentTestPage()
        {
            CorrectWrongIndex();

            CheckButtonState();

            SetDescription();
            iframe.Attributes["src"] = CreateRequestForPage(pages[PageIndex]);
        }

        private void SetDescription()
        {
            Description.Value = string.Format("You open {0}({1}) page", pages[PageIndex].PageName,
                                              (FX_PAGETYPE) pages[PageIndex].PageTypeRef);

            PageCount.Value = string.Format("{0}/{1}", PageIndex + 1, pages.Count);
        }

        private void CorrectWrongIndex()
        {
            if (PageIndex >= pages.Count || PageIndex < 0)
            {
                if (ShowResult.Checked)
                {
                    Response.Redirect(
                        ServerModel.Forms.BuildRedirectUrl(new ThemeResultController { BackUrl = string.Empty, ThemeId = OpenThema, CurriculumnName = CurriculumnName, StageName = StageName}));
                }
                else
                {
                    //RedirectToController(new StudentPageController {BackUrl = string.Empty});
                    Response.Redirect(
                        ServerModel.Forms.BuildRedirectUrl(new StudentPageController {BackUrl = string.Empty}));
                }
            }
        }

        private void CheckButtonState()
        {
            PreviousButton.Enabled = !(PageIndex == 0);

            NextButton.Enabled = !(PageIndex == pages.Count - 1);
        }

        private void SetPages()
        {
            var thema = ServerModel.DB.Load<TblThemes>(OpenThema);
            ThemaName.Value = thema.Name;
            pages = ServerModel.DB.Load<TblPages>(ServerModel.DB.LookupIds<TblPages>(thema, null));
        }

        private string CreateRequestForPage(TblPages p)
        {
            string extension = (p.PageTypeRef == (int) FX_PAGETYPE.Practice
                                    ? FileExtentions.IudicoPracticePage
                                    : FileExtentions.IudicoTheoryPage);

            RequestBuilder testPageUrl = RequestBuilder.newRequest(string.Format("DisplayIudicoTestPage.{0}", extension))
                .AddPageId(p.ID.ToString()).AddCurriculumnName(CurriculumnName).AddStageName(StageName);

            if (p.PageTypeRef == (int) FX_PAGETYPE.Practice)
                testPageUrl.AddSubmit(Submit).AddThemeId(OpenThema.ToString()).AddPageIndex(PageIndex.ToString());

            return testPageUrl.BuildRequestForHandler();
        }

        private void LoadIFrame()
        {
            if (PageContent != null)
            {
                iframe = (HtmlControl) PageContent.FindControl("openedTestFrame");
                if (iframe == null)
                    throw new Exception("Can't load iframe");
            }
            else
            {
                throw new Exception("Can't load page Content");
            }
        }
    }
}