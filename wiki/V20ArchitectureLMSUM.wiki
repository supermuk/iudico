#summary User Management Plugin.

=Підсистема керування користувачами=

[http://iudico.googlecode.com/files/um_usecase.png]

==Реєстрація==

Система управління користувачами надає можливість будь-якій особі зареєструватися для подальшого проходження курсів. Але з огляду на безпеку, після реєстрації, для подальшої роботи у системі, користувач має бути активований викладачем, або адміністратором.

[http://iudico.googlecode.com/files/um_sequence.png]

==Групи==

Групи можуть складатись з одного, або більше користувачів, і використовуються при наданні доступу для проходження курсу системою навчальних планів. Система навчальних планів не працює з користувачами, а виключно з групами, тому користувач, який не належить до групи, не має можливості пройти жодного курсу. Групами можуть бути як академічні групи студентів в університеті (чи підгрупи), так і будь-яка вибірка студентів, обрана для проходження якогось курсу (наприклад, конкурс серед усіх курсів). Така гнучкість дозволяє користувачу належати до декількох груп одночасно. Оскільки переваги уже наведені вище, розглянемо деякі недоліки. Повинна існувати система для деактивації користувачів, які з тих чи інших причин не навчають в університеті, або у деякій академічній групі. Таких користувачів потрібно або деактивувати, або видаляти з групи, в залежності від випадку. В іншому випадку, облікові записи цих користувачів можуть бути використані не належним чином, який було розглянути в розділі *Реєстрація*.

==Ролі==

Роль – це роль, яку користувач може виконувати в системі. Наявність певної ролі дає змогу користувачу виконувати дії передбачені для цієї ролі. На даний момент користувач може належати до однієї з таких ролей:

 * гість - не автентифікований користувач. має можливість реєструватись;
 * студент - користувач має можливість проходити курси/тести (та переглядати їх результати), які є дозволені групі, до якої даний користувач належить;
 * викладач - користувач має можливість створювати інших користувачів, створювати курси, редагувати свої курси, створювати групи, додавати користувачів до груп;
 * адміністратор - користувач має можливість виконувати усі дії.

==Автентифікація==

Користувач може автентифікуватись одним з двох способів:
 * використовуючи логін та пароль;
 * використовуючи систему OpenID.
Після реєстрації користувача, його обліковий запис повинен бути активований адміністратором. Тоді користувач зможе автентифікуватися і змінювати свої дані. В тому числі, він зможе вказати OpenID, який він хоче використовувати для подальшої автентифікації в системі IUDICO.

[http://iudico.googlecode.com/files/um_activity_login.png]

=== OpenID ===
OpenID - це відкритий стандарт, який описує, як користувачі можуть автентифікуватись в децентралізованому порядку. Він дозволяє використовувати один обліковий запис на великій кількості сайтів.

Протокол OpenID не покладається на централізований сайт для підтвердження істинності користувача. Крім того, він не диктує конкретні методи, якими користувач може автентифікуватись, що дозволяє підходи від звичайних (такі як пароль) до більш безпечних (як смарт-картки та біометричні).

Термін OpenID також означає OpenID-ідентифікатор, який зазначено в стандарті OpenID, який може бути представлений як URL (або XRI) і надається OpenID-провайдерами.

*Процес автентифікації*

[http://iudico.googlecode.com/files/um_sequence_login.png]

Для використання OpenID-протоколу для автентифікації залежна сторона повинна надати можливість ввести OpenID-ідентифікатор. На сайті розташовується форма входу, але замість звичних полів логін і пароль, в ній можна заповнити лише одне поле для введення OpenID-ідентифікатора.

Щоб користувач зміг пройти OpenID-автентифікацію на сайті Залежної сторони використовуючи свій OpenID-ідентифікатор _student.openid-provider.org_, який він зареєстрував у OpenID-провайдера _openid-provider.org_, йому потрібно просто ввести свій OpenID-ідентифікатор в запропонованій формі входу на сайті залежної сторони. Якщо ідентифікатор є у вигляді URL, то спершу залежна сторона перетворює його в канонічний вигляд _http://student.openid-provider.org/_.

 * Відповідно до OpenID 1.0 залежна сторона запитує веб-сторінку за цією адресою і через HTML тег `<link>` знаходить URL OpenID-провайдера, наприклад, _http://openid-provider.org/openid-auth/_. Залежна сторона також перевіряє, чи варто використовувати делегований ідентифікатор.
 * З версії OpenID 2.0 залежна сторона проводить інспекцію запитуючи Yadis документ з типом _application/xrds+xml_, який може розташовуватися по вказаному URL, і завжди доступний для вказаному XRI.

Залежна сторона може обмінюватися інформацією з OpenID-провайдером одним з двох режимів:

 * _checkid`_`immediate_ - обмін інформацією між серверами йде у фоні, без відома користувача;
 * _checkid`_`setup_ - де користувач безпосередньо звертається до сайту OpenID-провайдера на який він заходить з сайту залежної сторони.

Більшою популярністю в Інтернеті користується другий режим. Крім того, режим _checkid`_`immediate_ може перейти до використання _checkid`_`setup_, якщо операція входу не може бути проведена автоматично.

Спочатку залежна сторона і провайдер погоджують _shared secret_ або секретний код, який залежна сторона записує. При використанні режиму _checkid`_`setup_ залежна сторона перенаправляє користувача до сайту OpenID-провайдера, де користувач може автентифікуватись безпосередньо з OpenID-провайдером. Метод автентифікації може бути різним, але зазвичай використовується проста автентифікація з логіном та паролем, після чого OpenID-провайдер запитує у користувача, чи він довіряє залежній стороні свої ідентифікаційні дані.

 * Якщо користувач відхиляє запит OpenID-провайдера, щоб довірити ідентифікаційні дані залежній стороні, то користувача перенаправляють назад до сайту залежної сторони, з повідомленням, що автентифікація була відхилена і тому залежна сторона не може автентифікувати користувача.
 * Якщо користувач приймає запит OpenID-провайдера, щоб довірити ідентифікаційні дані залежній стороні, то користувача також перенаправляють назад до сайту залежної сторони, з ідентифікаційними даними. Після цього залежна сторона повинна перевірити, що ідентифікаційні дані дійсно прийшли від відповідного OpenID-провайдера. Якщо залежна сторона і OpenID-провайдер попередньо узгодили shared secret, то вона порівнює записаний shared secret з тим, що прийшов разом з ідентифікаційними даними користувача. Така залежна сторона називається такою, що _зберігає стан_ (_stateful_), тому що вона зберігає секретний ключ між сесіями. З іншого боку, залежна сторона, що _не зберігає стан_ (_stateless_) повинна зробити ще один фоновий запит (_check`_`authentication_) для перевірки того, що дані дійсно прийшли з сервера OpenID-провайдера.

Після успішної перевірки ідентифікаційних даних, залежна сторона визнає користувача як _student.openid-provider.org_. Після цього залежна сторона може зберегти сесію, і якщо це перший візит - попросити у користувача додаткову інформацію необхідну для закінчення реєстрації.

==ASP.NET Membership==

Автентифікація та авторизація у системі IUDICO базована на ASP.NET Membership.

[http://iudico.googlecode.com/files/umlMembership.png]

Система _ASP.NET Membership_ надає вбудований спосіб для перевірки та зберігання облікових даних користувача. _ASP.NET Membership_ допомагає здійснювати автентифікацію та авторизацію користувачів на сайті. Вона підтримує:
 * cтворення нових користувачів;
 * зберігання облікових даних користувача в Microsoft SQL Server;
 * автентифікацію користувачів;
 * авторизацію користувачів;
 * використання своїх провайдерів для збільшення функціоналу.

Система _ASP.NET Membership_ базується в свою чергу на таких компонентах:

 * *MembershipProvider* - провайдер, що відповідає за зберігання та отримання даних користувача з бази даних (чи іншого місця зберігання)
 * *RoleProvider* - провайдер, що відповідає за зміну ролі користувача та перевірку наявності ролі у користувача
 * *MembershipUser* - клас, який містить дані про користувача. Цей клас використовується класом MembershipProvider

Для забезпечення системи управління користувача, що дозволить автентифікуватися звичайним методом та за допомогою OpenID та авторизацію згідно ролей описаних в розділі *Ролі* потрібно було використати такі класи.

 * *_OpenIdMembershipProvider_* - похідний від _MembershipProvider_, додає функціональність автентифікації за допомогою OpenID. Зберігає облікові дані в відмінному форматі від _MembershipProvider_ зменшуючи кількість потрібних таблиць у базі даних та покращуючи структуру. 
 * *_OpenIdRoleProvider_* - похідний від _RoleProvider_, змінює функціональність, використовуючи фіксовану кількість ролей описаних раніше і не дає змогу додавати нові, або видаляти існуючі ролі
 * *_OpenIdMembershipUser_* - похідний від _MembershipProvider_, додає поле OpenID-ідентифікатора.
 * *_IoCMembershipProvider_* - похідний від _MembershipProvider_, перенаправляє усі виклики до _OpenIdMembershipProvider_. Цей клас потрібний, оскільки, щоб використовувати свої похідні класи від _MembershipProvider_ та _RoleProvider_, їх потрібно задати у конфігураційному файлі. Цей підхід суперечить плагін архітектурі IUDICO, де усі компоненти завантажуються у реальному часі. Тому використовується цей допоміжний клас, який під час завантаження системи отримує клас, якому передавати усі виклики методів.
 * *_IoCRoleProvider_* - похідний від _RoleProvider_, перенаправляє усі виклики до _OpenIdRoleProvider_. Функція цього класу аналогічна функції класу _IoCMembershipProvider_ і описана вище.
 * *_AllowAttribute_* - атрибут, за допомогою якого здійснюється авторизація користувача згідно ролі, до якої він належить, та ролі яку потрібно, для отримання доступу до відповідного ресурсу (сторінки чи дії).