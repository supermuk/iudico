#labels Featured
== Архітектура ITestingService ==

*_ITestingService_* – це інтерфейс, що представляє функціональність модуля тестування доступну для інших плаґінів системи IUDICO.

[http://img842.imageshack.us/img842/7144/iservice.png]


|| *_Метод_* || *_Опис_* ||
|| GetResults(User, Theme) : IEnumerable< AttemptResult > || Повертає усі результатиAttemptResult спроб проходження вказаної теми Theme для певного користувача User ||
|| GetAllAttempts() : IEnumerable< AttemptResult > || Повертає результати AttemptResult спроб усіх користувачів над усіма темами. Цей метод дає змогу клієнтові отримати повну інформацію про всі тестування що відбувались у системі. ||
|| GetAnswers(AttemptResult) : IEnumerable< AnswerResult > || Повертає детальні результати по кожному питанню (AnswerResult) із пройденого користувачем курсу згідно інформації про спробу – AttemptResult. ||
|| BuildLink(Theme) : ActionLink || Використовується для побудови посилання на проходження вказаної теми. Повертає об’єкт ActionLink, що містить усю необхідну інформацію для побудови лінка. ||

----

Для результатів тестування було розроблено низку POCO (CLR аналог POJO) класів та перелічуваних типів. Вони декларуються у модулі IUDICO.Common, тому доступні для решти плаґінів. Хоча за рахунок нових об’єктів дещо збільшилась кількість коду для їх ініціалізації та приведення типів, в той же час зросла гнучкість системи.

[http://img29.imageshack.us/img29/337/statisticsd.png]

|| *_Тип_* || *_Опис_* ||
|| AnswerResult || Містить усю необхідну інформацію про відповідь користувача на конкретний тест (activity) підчас спроби (ActivityAttemptId) проходження курсу (ActivityPackageId). Також містить інформацію про правильну відповідь на це питання. Якщо курс був побудований належним чином, інформація про відповіді буде доступна по завершенню (CompletionStatus = Completed) курсу. ||
|| AttemptResult || Містить інформацію про спробу користувача пройти певний курс в межах певної теми. Зокрема чи курс завершений (CompletionStatus), чи він пройдений успішно (SuccessStatus), час початку спроби проходження курсу (StartTime) та оцінка за цю спробу (Score) ||
|| InteractionType || Перелічуваний тип, що вказує на тип запитання. Ввести число, текст, вибрати із варіантів, і т.п. Згідно SCORM 2004 ||
|| SuccessStatus || Перелічуваний тип для визначення успішності. Згідно SCORM 2004 ||
|| AttemptStatus || Перелічуваний тип для визначення поточного статусу спроби. Відкладена, завершена, в процесі і т.п. Згідно SCORM 2004 ||
|| CompletionStatus || Перелічуваний тип для визначення чи було завершено спробу. Згідно SCORM 2004 ||
|| Score || Використовується для зберігання оцінки та приведення її до процентного співвідношення. ||

----

=== Інтеграція програвача курсів із підсистемою User Management ===

Із коду програвача курсів відкритий доступ лише до простору назв IUDICO.TestingSystem. Також для коду сторінок необхідно надати доступ до сервісу IUserService. Тому було реалізовано клас сінглтон ServicesProxy, який ініціалізується перед початком програвання курсу та використовується у всіх сторінках плеєра (підкласів PageHelper) при визначенні поточно-авторизованого користувача.

[http://img851.imageshack.us/img851/3096/servicesproxy.png]

----
=== Інтеграція із базою даних Microsoft Learning Components ===

Для керування даними використовується клас MlcProxy, який безпосередньо працює із LearningStore – об’єктом, що надає доступ до бази даних MLC.

[http://img716.imageshack.us/img716/5337/mlcproxy.png]

|| *_Клас_* || *_Опис_* ||
|| MlcProxy || Цей клас містить усі необхідні методи та властивості для інтеграції із підсистемою керування курсами, навчальними планами та базою даних MLC. Цей клас наслідує функціональність MlcHelper. ||
|| MlcHelper || Аналогічно до класу PageHelper, клас MlcHelper надає усі необхідні допоміжні методи та властивості для роботи із бібліотекою MLC, зокрема LearningStore, PackageStore, необхідні IService'и, методи для інтеграції користувачів IUDICO та MLC. MlcHelper надає контекст для роботи із компонентами MLC. ||

----

=== Виклики методів TestingService ===

Загальна схема викликів продемонстрована на прикладі методу ITestingService.GetAllAttempts()

[http://img829.imageshack.us/img829/779/servicerequest.png]

=== Програвання курсу ===

[http://img850.imageshack.us/img850/7286/tsusecase.png]

|| *_Прецедент_* || *_Опис_* ||
|| *Attempt-related use cases* || _Класифікація прецидентів згідно спроб (attempt)_ ||
|| Begin Attempt on Theme || Розпочати нову спробу проходження обраної теми ||
|| Resume Attempt on Theme || Продовжити існуючу (відкладену) спробу проходження обраної теми ||
|| Suspend Attempt on Theme || Відкласти спробу проходження обраної теми на майбутнє. Не відбуваються остаточні rollup обчислення. ||
|| Complete Attempt on Theme (Submit Training) || Завершити поточну спробу. Обчислюється оцінка. ||
|| *Player-related use cases* || _Класифікація прецидентів, що відносяться до безпосереднього проходження теми_ ||
|| Interact with Course Contents || Взаємодія із навчальним матеріалом, визначеним автором навчального курсу ||
|| Navigate Choice || Перейти до іншого розділу підчас програвання навчального курсу. Згідно таблиці вмісту курсу (TOC). Може бути недоступним, згідно правил SCORM ||
|| Navigate Forward || Перейти до наступного розділу підчас програвання навчального курсу. Може бути недоступним, згідно правил SCORM ||
|| Navigate Backward || Перейти до попереднього розділу підчас програвання навчального курсу. Може бути недоступним, згідно правил SCORM ||

----

*Training Controller*

Згідно MVC архітектури системи IUDICO, бізнес логіка аплікації повинна міститись у контролерах. 

[http://img101.imageshack.us/img101/5049/controllers.png]

TrainingController містить єдиний Action - _Play_.
Він приймає ідентифікатор теми, яку необхідно програти, здійснює запити до MlcProxy та інших сервісів системи та повертає View, що містить фреймсет плеєра курсів. Передає йому ідентифікатор теми та спроби, агреговані у POCO PlayModel.

----

При здійсненні запиту на програвання деякого курсу згідно вказаної теми, відбувається уся необхідна перевірка, можливо імпорт користувача/курсу у підсистему тестування. При потребі генерується нова спроба:

[http://img193.imageshack.us/img193/6985/testingo.png]


Під час програвання курсу, по натисканню на посилання Submit Training, система здійснює усі необхідні дії для завершення курсу, та автоматично переадресовує користувача на сторінку результатів, що входить до підсистеми статистики.