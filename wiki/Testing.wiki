=Тестування=

==Функціональне тестування==

Цей тип тестування перевіряє правильність роботи програмного забезпечення через вхід/вихід. Тобто ми вважаємо, що наше програмне забезпечення є «чорним ящиком». Ми вводимо якісь дані і дістаємо деякі назад; ми перевіряємо отримані дані на коректність стосовно вхідних даних. У нашому випадку, для функціонального тестування будемо використовувати Selenium,  який дозволяє нам писати тести, що будуть виконуватися у браузері. Функціональні тести повинні покривати всю функціональність сайту включаючи, але не обмежуючи:

|| Дія || Покриття || Хто ||
|| Загальні тести: ||
|| Ідентифікацію користувача || 100% || Ігор ||
|| Авторизацію користувача || 0% || Герасим ||
|| Зміна персональної інформації || 0% || Іван ||
|| Перегляд прав || 0% || Іван ||
|| Тести для студента: ||
|| Перегляд теоретичного матеріалу || 0% ||
|| Проходження тестового завдання || 0% ||
|| Перегляд результатів тестування || 0% ||
|| Робота з календарем і нотатками || 0% ||
|| Тести для викладача: ||
|| Імпортування та видалення курсів || 0% ||
|| Додавання та видалення груп || 0% ||
|| Додавання, зміна та видалення навчальний планів || 0% ||
|| Призначення до та видалення груп від навчальних планів || 0% ||
|| Перегляд статистики || 0% ||
|| прикріпити курс до навчального плану || 0% ||
|| поділитись курсом з iншим Teacher || 0% ||
|| переглянути список Teacher || 0% ||
|| Тести для адміністратора: ||
|| Додавання, зміна та видалення користувачів || 0% ||
|| Додавання, зміна та видалення груп || 0% ||
|| Включення User в Group || 100% || Іван ||

Кожен пункт тестування передбачає перевірки при правильному введені даних, але також різні варіанти неправильних даних. Selenium дозволяє виконувати перехід між сторінками за допомогою команди clickAndWait, а також дозволяє тестування ajax компонент за допомогою набору команд waitForXXXXX.


==Структурне тестування==
Цей тип тестування використовується для перевірки внутрішніх структур даних і зв’язку між ними. Для забезпечення робочого коду потрібно, щоб кожна лінійка коду викликалася під час тестів. Якщо ж вона не викликається, то можливість дефекту у коді зростає. Ми будемо використовувати NUnit для структурного тестування. Потрібно перевірити коректність роботи таких компонентів:

|| Дія || Покриття || Хто ||
|| DB.Base || 0% ||
|| DB.Other || 0% ||
|| Import Managers || 0% ||
|| Security || 0% ||
|| Webcontrol || 0% ||
|| CMI || 67% || Саша ||
|| Testing system || 0% ||
|| Utils || 0% ||
|| Student Utils || 0% ||
|| Statistic Utils || 0% ||
|| Import Utils || 0% ||
|| Testing Utils || 0% ||
|| Controllers || 0% ||

  Для повної інформації стосовно цих компонентів можна подивитися у розділі [http://code.google.com/p/iudico/wiki/CodeStructureLMS Структури коду]