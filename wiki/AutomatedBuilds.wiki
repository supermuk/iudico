=Автоматизовані Тести=

==Hudson==
Автоматизовані тести забезпечуть, що програмне забезпечення працює як і очікувалося. Мета цих тестів — знайти помилки у програмному забезпечені. Ми забезпечуємо це за допомогою автоматичної системи постійної інтеграції Hudson.
Hudson написаний на Java, як і більшість систем такого типу, що дозволяє використовувати його на різних платформах. Також Hudson є Open Source — одна з причин, чому була обрана саме ця система. Сам по собі Hudson немає багато можливостей, і по основі був розроблений для тестування програмного забезпечення написаного на Java, але велика кількість плагінів дозволяє вільно користуватися Hudson для будь-яких проектів і мов. Щоб забезпечити постійну інтеграцію та автоматизоване тестування використовуються такі плагіни:
 * SVN – для отримання останньої ревізії з Google Code SVN
 * MS Build – для комілювання .NET проектів
 * NUnit – для запуску тестів NUnit
 * Selenium – для запуску тестів Selenium

===Інсталяція Hudson===
 # Скачати файл hudson.war з [http://hudson-ci.org/ Hudson сайту] та розмістити файл у _c:\Program Files\Hudson_
 # Запустити команду _java -DHUDSON_HOME=data -jar “c:\Program Files\Hudson\hudson.war”_. Можна перевірити, що команда спрацювала зайшовши на http://localhost:8080 
 # Скопіювати необхідні плагіни у c:\Program Files\Hudson\data\plugins
 # Зупинити Hudson натиснуваши Ctrl+C в командній стрічці
 # Запустити Hudson знову, викоростовуючи команду з пункту 2.

===Конфігурація Hudson===



===Порядок дій===
 # Обновлення коду (виконуються команди revert і update  в клієнті Subversion)
 # Компіляція проекту (для .NET проектів використовується MSBuild.exe)
 # Перевірка NUnit тестів (+GUI тести Selenium)
 # Відправлення листа з інформацією про статус проекту (Success, Failed - не компілюється, Unstable - не пройшов певні тести)


===Build Triggers===
 * після перевірки іншого проекту
 * примусовий виклик перевірки ( http://HOSTNAME/job/PROJECTNAME/build )
 * за розкладом (цей варіант ми використовуємо - в 00.00, 08.00 та 16.00 кожного дня)
 * Email notification (перевірка відбувається при отриманні певного листа)
 * Web Hooks (Google декілька раз відправляє інформацію про commit)

==NUnit==

==Selenium==
Selenium Remote Control (RC) являє собою сервер, написаний на Java, що приймає команди для браузера через HTTP протокол. Він вміє запускати браузер і виконувати в ньому різні дії, наприклад натискання кнопки, пошуку елемента, очікування завершення загрузки сторінки. RC дозволяє написати автоматизовані тести для вебсайтів на будь-якій мові програмування, що дозволяє гнучку інтеграцію Selenium з існуючим тестовим фреймворком. Для того щоб писати тести легше, Selenium в даний час надає драйвери на мовах Python, Ruby, .NET, Perl, Java і PHP. Він також є добрим для тестування складних веб інтерфейсів базованих на AJAX в системі постійної інтеграції (Continuous Integration system).

http://selenium.openqa.org/selenium-rc.png

===Інсталяція===
 # Скачати Selenium RC з [http://seleniumhq.org/projects/remote-control/ Selenium RC сайту]
 # Розархувувати в довільну папку. Запустити Selenium сервер за допомогою команди _java -jar selenium-server.jar_. Якщо не виникне помилок то на консолі повинно появитися щось подібне до:
{{{
14:23:08.312 INFO - Java: Sun Microsystems Inc. 10.0-b22
14:23:08.312 INFO - OS: Windows XP 5.1 x86
14:23:08.312 INFO - v1.0-beta-1 [2201], with Core v1.0-beta-1 [1994]
14:23:08.390 INFO - Version Jetty/5.1.x
14:23:08.406 INFO - Started HttpContext[/selenium-server/driver,/selenium-server/driver]
14:23:08.406 INFO - Started HttpContext[/selenium-server,/selenium-server]
14:23:08.406 INFO - Started HttpContext[/,/]
14:23:08.406 INFO - Started SocketListener on 0.0.0.0:4444
14:23:08.406 INFO - Started org.mortbay.jetty.Server@201f9
}}}

===Механізм роботи Selenium===
Selenium сервер працює виключно на рівні javascript, без прив'язок до API, DLL та іншим внутрішнім процесам браузера. Таким чином, він може запускати любий javascript код, який буде виконуватися на тому ж домені, і відповідно буде мати доступ до cookies, змісту сторінки і т.д.

===Підтримка Selenium===
|| ||Internet Explorer||Mozilla||Firefox||Safari||
||Windows XP||6.0||1.6+, 1.7+||0.8+, 0.9+, 1.0|| ||
||Red Hat Linux|| ||1.6+, 1.7+||0.8+, 0.9+, 1.0+|| ||
||Mac OS X 10.3||не поддерживается||1.6+, 1.7+||0.8+, 0.9+, 1.0+||1.3+||

===Приклад===
{{{
using System;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading;
using NUnit.Framework;
using Selenium;

namespace SeleniumTests
{
    [TestFixture]
    public class NewTest
    {
        private ISelenium selenium;
        private StringBuilder verificationErrors;
        
        [SetUp]
        public void SetupTest()
        {
            selenium = new DefaultSelenium("localhost", 4444, "*firefox",
                              "http://localhost:4444");
            selenium.Start();
            verificationErrors = new StringBuilder();
        }
        
        [TearDown]
        public void TeardownTest()
        {
            try
            {
                selenium.Stop();
            }
            catch (Exception)
            {
                // Ignore errors if unable to close the browser
            }
            Assert.AreEqual("", verificationErrors.ToString());
        }
        
        [Test]
        public void TheNewTest()
        {
            selenium.Open("/selenium-ide/");
            selenium.Click("link=About");
            selenium.WaitForPageToLoad("30000");
        }
    }
}
}}}