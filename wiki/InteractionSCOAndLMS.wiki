=Взаємодія  SCO та LMS=
На цій сторінці описується процес завантаження курсу в LMS і його програвання від початку і до моменту виведення статистики. Базові поняття SCORM-у тут описані в світлі конкретної реалізації під Iudico.

==Базові поняття архітектури. imsmanifest.xml==

==Базові поняття архітектури. Activity==

==Базові поняття архітектури. Activity Tree==

Процес взаємодії SCO та LMS зображено на діаграмі.

Зупинимось на найважливіших місцях:
==Завантаження курсу в LMS==
Під час завантаження курсу в LMS він перевіряється на валідність:тип ManifestValidator перевіряє imsmanifest.xml на дотримання вимог SCORM-у, а PackageValidator перевіряє весь курс на цілісність і валідність.
==Програвання курсу==
Після початку програвання курсу утворюється об'єкт типу Navigator. Цей об'єкт привязується до  Activity Tree. Обєкт Navigator відповідає за подачу навчального матеріалу учневі.
Тип ManifestReader зчитує Sequencing Definition Model з imsmanifest.xml і записує її в підрозділ Activity Run-Time Model->Sequencing Model відповідного Activity.Взаємодія LMS зі Scoobj.js відбувається за допомогою API функцій GetValue i SetValue, які відповідно зчитують і записують CmiDataModel інформацію з підрозділу Activity Run-Time Model->RTE Data Model відповідного Activity. Після закінчення програвання курсу формується статистика.
