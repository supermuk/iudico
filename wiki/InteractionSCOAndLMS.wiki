=Взаємодія  SCO та LMS=
На цій сторінці описується процес завантаження курсу в LMS і його програвання від початку і до моменту виведення статистики. Базові поняття SCORM-у тут описані в світлі конкретної реалізації в Iudico.

==imsmanifest.xml==
[http://img208.imageshack.us/img208/6274/imsmanifest.jpg]
<br>Структура imsmanifest.xml

imsmanifest.xml входить до складу кожного SCORM-сумісного курсу. Його структура детально описана в книзі SCORM-2004.САМ. Зупинимось лише на деяких особливостях його реалізації в Iudico.
Кореневим елементом в маніфесті є "organization". Він містить дочірні елементи - "item". Однією з їх складових є Sequencing Definition Model, яка задає правила сіквенсінгу для даного елемента "item". Також до всіх листкових елементів прив*язаний певний resource, який містить посилання на .html сторінку, яка являє собою найменшу неподільну частинку курсу, що програється.

==Activity==
Сутність activity детально описана в книзі SCORM-2004.SN. Зупинимось лише на особливостях його реалізації в Iudico.
Сутності activity відповідає тип Activity є run-time репрезентацією елемента "item" в imsmanifest.xml. До кожного об'єкту типу Activity прив*язаний екземпляр типу Activity Run-Time Model.
Activity Run-Time Model складається з таких складових:
 # RTE Data Model
 # Sequencing Model
  * Tracking Model
  * Overall sequencing process
  * Navigation Behavior
  * Termination Behavior
  * Rollup behaviour
  * Selection and randomization Behavior
  * Sequecning Behavior
  * Delivery Behavior
 # Navigation Model
Компоненту RTE Data Model відповідає CmiDataModel у специфікації SCORM-у. 
більш детальна інформація про кожен з цих компонентів містяться в книжках SCORM-2004.RTE і SCORM-2004.SN
Sequencing Model використовує Sequencing Definition Model з imsmanifest.xml для ініціалізації при створенні activity.
До всіх листкових activities прив*язаний певний resource, який містить посилання на .html сторінку, яка являє собою найменшу неподільну частинку курсу, що програється.

==Activity Tree==
[http://img39.imageshack.us/img39/5476/activitytree.jpg]
<br>
Структура ActivityTree

ActivityTree являє собою деревовидну структуру курсу. Складовими частинами цього дерева є об'єкти типу Activity.

==Модель взаємодії SCO та LMS==
[http://img153.imageshack.us/img153/4645/scolms.jpg]
<br>
Модель взаємодії SCO та LMS

Зупинимось на найважливіших місцях:
==Завантаження курсу в LMS==
Під час завантаження курсу в LMS він перевіряється на валідність:тип ManifestValidator перевіряє imsmanifest.xml на дотримання вимог SCORM-у, а PackageValidator перевіряє весь курс на цілісність і валідність.
==Програвання курсу==
Після початку програвання курсу утворюється об'єкт типу Navigator. Цей об'єкт привязується до  Activity Tree. Обєкт Navigator відповідає за подачу навчального матеріалу учневі.
Тип ManifestReader зчитує Sequencing Definition Model з imsmanifest.xml і записує її в підрозділ Activity Run-Time Model->Sequencing Model відповідного Activity.Взаємодія LMS зі Scoobj.js відбувається за допомогою API функцій GetValue i SetValue, які відповідно зчитують і записують CmiDataModel інформацію з підрозділу Activity Run-Time Model->RTE Data Model відповідного Activity. Після закінчення програвання курсу формується статистика.