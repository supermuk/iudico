#labels Featured
= Базові поняття та сутності SCORM =

_Джерело:_ [http://www.adlnet.gov/Technologies/scorm/SCORMSDocuments/2004%204th%20Edition/Documentation.aspx ADL SCORM 2004 4th Edition Documentation]

== Content Package ==
=== Пакет контенту ===

Пакет контенту є zip-архівом, з довільною назвою.
Містить дві головні складові:
 * спеціальний XML документ з описом структури контенту і пов'язаних з ним ресурсів в пакеті, який називається маніфестом (imsmanifest.xml). Маніфест повинен бути присутнім в кореневому каталозі пакету контенту.
 * контент (тобто фізичні файли), що складають пакет контенту. Малюнок 1  являє собою концептуальну діаграму, яка ілюструє компоненти пакету контенту.

[http://img683.imageshack.us/img683/7360/image001wq.jpg]
 Малюнок 1. Компоненти пакету контенту.

=== Компоненти Маніфесту ===
Маніфест представляє інформацію, необхідну для опису вмісту пакету. Малюнок 2 описує склад файлу маніфесту.

[http://img704.imageshack.us/img704/631/image002irq.jpg]
Малюнок 2: Компоненти Маніфесту

Маніфест складається з чотирьох основних частин:
 # Метадані: Дані, що описують пакет загалом.
 # Організація: Містить опис структури контенту або навчальних ресурсів у вигляді однієї або набору інструкцій.
 # Ресурси: Містить інформацію про фізичні ресурси (файли з різнотипними даними) та зв’язок між ними.
 # (суб) маніфест (и): Описує логічно вкладені  маніфести (які можуть  трактуватись як незалежні одиниці).

== Learning Activity ==
=== Навчальне Завдання ===

Навчальне activity (Мал. 3) можна пояснити як значуща одиниця навчання; концептуально це щось, що учень виконує підчас проходження навчання. Навчальне activity може надавати учневі навчальний ресурс, або може складатися з декількох sub-activities (під завдань). Надалі під терміном «activity» розумітимемо «навчальне activity».

[http://img42.imageshack.us/img42/940/image003zh.jpg]
 Малюнок 3. Приклад Learning Activity

Малюнок 3 зображає activity “Take Lesson”, яке складається з 3 sub-activities: «Take a Pre-Test”, “Expirience Content” і “Take a Final Test”. Учень проходитиме sub-activities в контексті проходження activity “Take Lesson”.

Sub-activities можуть складатись з додаткових sub-activities до будь-якого рівня вкладення. Sub-activities, які не складаються з додаткових sub-activities називаються activities-листки. Activities – листки матимуть пов’язані з ними content object’и. LMS визначатиме навчальні activities для доставки підчас виконання, відштовхуючись від проходження учнем попередніх навчальних activities, намірів учня і внесеній автором інформації про впорядкування.

Учень проходить content objects  в контексті навчального activity-листка. Коли над activity-листком починається спроба, асоційований з ним content object буде запущений учневі. Розпочнеться спроба учня і сесія учня над цим content object’ом. Серія пройдених content object’ів називається learning experience( _проходженням навчання_).

Всі навчальні activities мають наступні властивості:
 * Навчальні activities мають дискретний початок і кінець.
 * Навчальні activities є добре відредагованими і несуть певний навчальний зміст.
 * Навчальні activities можуть складатись із sub-activities до будь-якої глибини вкладення.
 * (Спроби над) Навчальні activities виникають в контексті (спроб над) їх батьківського activity, якщо такий існує.

=== Activity Tree ===

Activity tree становить дерево, вузлами якого є activity,це дерево описує вимоги до інформації та опрацювання, як то алгоритми впорядкування і поведінки, в форматі, який не залежатиме від реалізації.

[http://img31.imageshack.us/img31/8164/image004qg.jpg]
 Малюнок 4. Приклад Activity Tree.

Малюнок 4  відображає приклад activity tree. Коренем activity tree є activity A – корінь activity tree також є learning activity і зокрема є кластером (в більшості випадків).

=== Видобування Activity Tree з Пакету Контенту ===

Ієрархічна організація пакету приймає вигляд єдиного елементу {{{<organization>}}} в пакеті контенту. Кожен елемент в структурованій ієрархії представляє відповідну одиницю навчання. Ці елементи можуть бути вкладеними до будь-якої глибини, до них можуть застосовуватись систематичні ярлики. Наприклад, елемент може представляти курс, модуль, розділ, урок, і т.д. Для взаємозаміни контенту його ієрархічна структура традиційно описується в поняттях організації в пакеті контенту.

Оскільки поведінки впорядкування SCORM визначені в поняттях структурованих навчальних activities, то багатозначна структура контенту надає необхідну стартову площадку для видобування activity tree. В правилах впорядкування, організація контенту представляє одну, таку що може взаємодіяти, структуру activity tree. Організація контенту (елемент {{{<organization>}}}) є коренем activity tree, і кожен її елемент {{{<item>}}} відповідає навчальному activity. Елементи моделі визначення впорядкування застосовуються  до цих елементів, щоб визначити специфічну, узгоджену з бажаним навчальним процесом, поведінку впорядкування підчас виконання.

[http://img36.imageshack.us/img36/7910/image005is.jpg]
 Малюнок 5. Зв'язок між Content Organization та Activity Tree

Зв'язок між організацією контенту та activity tree, зображений на Малюнку 5, можна підсумувати так:
 # Activity tree представляє концептуальну структуру контенту, що є результатом дизайну контенту, процесів авторингу та агрегації. Зрештою, activity tree є представлене як організація контенту (елемент {{{<organization>}}}) в SCORM Content Package, з метою створення можливості обміну інформацією про впорядкування.
 Напр., інструмент авторингу може реалізувати внутрішню структуру даних, що представляє ієрархію контенту у відповідному форматі. Така структура може бути результатом дизайну  навчального процесу, або методу, що застосував розробник для визначення бажаного навчального процесу. Підчас завершення процесу розробки, інструмент авторингу перетворить свій формат у відповідний формату описаному в книзі SCORM CAM. Це даватиме змогу імпортувати навчальний матеріал в будь-яку систему, що розуміє SCORM Content Packages;
 # SCORM- сумісні LMS перетворюють організацію контенту в activity tree. Activity tree представляє реалізовану LMS’ом структуру даних, яка відображає ієрархічне внутрішнє представлення визначених навчальних activities, включаючи відстежувану інформацію для кожного activity у ієрархії, що стосується кожного окремого учня.
 # Коли учень здійснює взаємодію з контентом, що представлений з допомогою activity tree, LMS вираховує на основі відстеженої інформації та інформації про впорядкування послідовність начальних activity і чи може учень здійснити з ними дії. В цьому контексті, процес навчання для кожного учня з однією і тією ж структурою контенту може бути різним!, в залежності від інформації про впорядкування, визначеної розробником і взаємодією учня з об’єктами контенту.

=== Cluster ===
=== Кластер ===

Кластер є спеціалізованим видом навчального activity, що має sub-activities; це поняття використовується в різноманітних поведінка впорядкування. Кластер включає в себе єдиний батьківський activity і його прямих синів, проте не включає нащадків цих синів. Синівські елементи кластера є або листками, або іншими кластерами. Activity-листок *не є *кластером.

Малюнок 6 відображає 5 прикладів кластерів. Кожен кластер обведений штрих пунктирним заокругленим прямокутником.

Кластер «Курс», кластер А, містить лише 4 activities: activity «Курс» і батьківські activity кластерів B, C і D.

Кожен «Модуль»’ний кластер, кластери B, C і D, складаються з «Модуль»’ного activity і модульних «Уроків». Всі «Уроки» activities, крім «Уроку 2» «Модуля 3» є навчальними activities – листками, і мають пов'язаний з ними об’єкт контенту.»Урок 2» «Модуля 3» є кластером, який складається з двох «Розділів» - навчальних activities-листків.

[http://img441.imageshack.us/img441/5610/image006wi.jpg]
 Малюнок 6. Приклад Кластерів

Кластер розглядають як базовий будівельний блок в activity tree і багато елементів з Моделі Визначення Впорядкування  застосовуються саме до кластерів. Батьківський activity в кластері міститиме інформацію про стратегію впорядкування для кластера. Синівські, не-кластерні activities (activities-листки) кластеру  матимуть пов'язані з ними об’єкти контенту, які і будуть визначені для доставки відповідно до визначеної стратегії впорядкування.

=== Attempts ===
=== Спроби ===

Attemp (спроба) – це певне зусилля завершити activity, підчас якого можуть задовольнятись нуль чи більше навчальних цілей (learning objectives). Спроби над activities завжди відбуваються в контексті спроб над їх батьківськими activity(ies). Важливо зазначити, що для даного activity tree спроба може відбуватись над одним і лише одим activity-листком в будь-який момент часу. В цей час  всі спроби над предками (аж до кореня) будуть відбуватись аж доки не закінчиться спроба над даним activity-листком.  Коли відбувається спроба над activity-листком, можна вважати, що був запущений відповідний content object.

Спроба розпочинається коли activity визначене для доставки і закінчується коли LMS робить спробу визначити для доставки наступне activity. Спроба над activity є тісно пов’язана  зі спробою учня над асоційованим content object’ом; книга SCORM RTE  описує в деталях тимчасову модель для content object’а. Не завжди буде вдаватись завершити activity за одну спробу. В багатьох ситуаціях учень забажає відкласти activity і продовжити його пізніше. В більшості випадків, стикаючись із відкладеним activity потрібно радше  продовжити проходження, аніж розпочати нову спробу над ним.

Результатом спроби над activity, або зовнішнім адміністративним втручанням стане зміна відстежуваного статусу для даного activity. . Коли міняється відстежуваний статус activity, відстежуваний статус всіх його предків може бути змінений – така поведінка називається Rollup (Розкрутка)

=== Learning Objectives ===
=== Навчальні Цілі ===

Навчальні цілі є відділеними від навчальних activities. SCORM не встановлює жодних обмежень на те, як навчальні цілі пов’язані з навчальними activities, рівно як спосіб використання навчальних цілей в content object’ах. SCORM Поведінки Впорядкування не роблять жодних припущень як інтерпретувати навчальні цілі (напр. чи це є компетенція, чи це майстерність чи просто спільне значення, і т.д.).  З точки зору відстеження, набір інформації про статус навчальних цілей (objective satisfaction status, objective satisfaction measure) підтримується для кожної навчальної цілі пов’язаної з навчальним activity.

Activities можуть мати більше аніж одну навчальну ціль, з ними пов’язану. Проте, модель SCORM SN не робить жодних припущень щодо семантики та значення багатьох цілей пов’язаних з одним activity. По замовчуванню, інформація про статус цілі, підтримуваної для цілі даного activity є локальною до цього activity. Щоб поділитись інформацією про статус цілі, activity може посилатись до багатьох глобальних спільних цілей. Багато activities можуть посилатись на одну і ту ж глобальну спільну ціль, таким чином ділитись своєю інформацією про статус цілі. Спільні глобальні цілі можуть бути спільними в межах одного activity tree або ж можуть бути спільними між багатьма activity trees в межах LMS. Існують два обмеження на те, як activity може посилатись на спільні глобальні цілі:
 # Локальні цілі можуть набувати компонентів інформації про відстеження з властивістю   (*“read”*) з однієї і лише однієї спільної глобальної цілі.
 # Для набору локальних цілей визначених для даного activity, жодні дві локальні цілі не можуть встановити (*“write”*) для однієї і тієї ж компоненти відстежуваної інформації однієї і тієї ж спільної глобальної цілі.

== Communicative and Non-communicative Content ==
=== Комунікуючий і некомунікуючий контент ===

SCORM розрізняє комунікуючий і некомунікуючий контент. Комунікуючий контент може комунікувати інформацію про взаємодії учня з контентом використовуючи SCORM Run-Time Environment Application Programming Interface (API) . Тоді ж як некомунікуючий контент не використовує SCORM Run-Time API. SCORM впорядкування підтримує обидва види контенту на базі activity-by-activity.

SCO відповідають за зв’язок проходження учнем навчання використовуючи SCORM Run-Time API та SCORM Run-Time Environment Data Model. LMS може не робити жодних припущень щодо інформації із проходженя учнем некомунікуючого контенту. Для asset’ів, LMS автоматично бере інформацію про проходження учнем матеріалу, що базується на значеннях і поведінці по-замовчуванню.

=== Assets ===
=== Асети ===
 Асет є основним структурним елементом навчального ресурсу. Асети це електронне представлення інформації, такої як текст, зображення, звук або будь-яка інша частина даних, яка може відображатися на веб-клієнті і представляти для учня (див. Малюнок 7). Декілька асетів можуть утворювати новий асет. У деяких випадках асет може використовуватись як частина процесу навчання.

[http://img693.imageshack.us/img693/8472/image007ht.jpg]
 Малюнок 7. Приклади асетів

 Асети можуть бути описані за допомогою метаданих. Це дозволить пошук та виявлення асетів в рамках сховища, тим самим створивши сприятливі умови для повторного використання.

=== SCO - Sharable Content Object ===

SCO є набором одного або декількох асетів, які представляють собою єдиний навчальний
 ресурс, який використовує SCORM RTE для взаємодії з LMS. SCO є найнижчим рівнем навчального ресурсу, який надається LMS використовуючи SCORM Run-Time Environment Data Model. Єдиною відмінністю між SCO і асетом є те, що SCO взаємодіє з LMS використовуючи ECMAScript (JavaScript).
 Малюнок 8 нижче  демонструє приклад SCO, який складається з декількох асетів.
 Для покращення повторного використання, СКО повинен бути незалежним від контексту навчального ресурсу. Для прикладу, SCO може бути використаний в різних навчальних завданнях, виконувати різні
цілі навчання. Крім того, завдання може містити в сукупності більше одного SCO (асетів) для одержання завдання більш високого рівня, які призначені для навчання або професійної підготовки.
SCO призначені для невеликих підрозділів, таких, що можна декілька раз використовувати у різних навчальних контекстах. SCORM не накладає ніяких обмежень на точний розмір SCO. Під час розробки навчального ресурсу і навчального плану, варто зважати на те, щоб розмір контенту який буде надаватися через LMS під час виконання був мінімальний. Вимоги організації до повторного використання вплине на рішення про розмір SCO.
SCO можуть бути описані за допомогою метаданих. Це дозволить пошук та виявлення SCO в рамках сховища, тим самим створивши сприятливі умови для повторного використання.

[http://img710.imageshack.us/img710/6527/image008xa.jpg]
 Малюнок 8. Концептуальні складові SCO

SCO зобов'язані дотримувати вимоги, встановлені в книзі SCORM RTE.
Це означає, що він повинен вміти взаємодіяти з LMS, яка надає API Instance і повинен мати мінімальномі методи API (Initialize(“”) і Terminate(“”) ). Немає обмежень на будь-які інші методи API, які не є обов'язковими і залежать від характеру контенту.
 Вимога про те, що СКО повинна використовувати SCORM RTE дає наступні переваги:
 * Будь-який LMS, що підтримує SCORM RTE SCOs можна запускати і відслідковувати їх, незалежно від того, хто їх створював.
 * Будь-який LMS, що підтримує SCORM RTE може відслідковувати будь-який SCO, а також знати, коли він почався і коли він закінився.
 * Будь-який LMS, що підтримує SCORM RTE може запустити будь-який SCO таким же чином.