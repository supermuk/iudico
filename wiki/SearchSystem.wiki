Інтегрування Solr з Iudico

Пошукова система для Iudico реалізована для пошуку за навчальним матеріалом – лекціями та тестами. Скаладається вона з двох незалежних частин – це індексування та пошук даних.


Індексування даних

Індексування даних – це процес, який запускається і триває поки запущений сайт. Цей процес раз у 24 години відправляє дані Solr для індексації. Коли це відбувається, старий індекс стирається і дані індексуються заново. Такий спосіб переіндексування вибраний для оптимізації спостережень за діями над базою даних, адже крім додавання може здійснюватись і видалення даних. Іншими словами, пошукова система орієнтована на перспективу, коли навчальний сайт Iudico буде перебувати у постійному русі, коли він буде зберігати великі об’єми інформації.
Яким чином запущений цей процес? Є кілька способів виклику web-сервера:
• При зверненні до сторінки
• При запуску аплікації
• При зупинці аплікації
• Якщо сесія починається і закінчується / тайм-аути
• При закінченні терміну зберігання кешу
  	Звертання до сторінки відбувається випадково. Якщо ніхто не відвідує сайт протягом кількох годин, ніяка робота не буде виконуватись годинами. Крім того, виконання запиту дуже коротке і якщо запланувати  цей момент виконувати якусь роботу, то сторінка буде грузитись довше і погіршувати властивості аплікації.
  	При запуску програми, аплікація отримує колбек в методі Application_Start з Global.asax . Це місце найкраще підходить для запуску процессу який триває поки аплікація працює.
  	Session_start у Global.asax спрацьовує коли користувач відвідує веб-сторінку, яка вимагає запуску нової сесії. Таким чином, це теж випадковість.
 	 Кеш вичерпується за заданий час. У ASP.NET є можливість додавати записи в Кеш з певним періодом, та встановити час за який цей елемент має бути видалеий. Зробити це можна використовуючи наступні методи Кеш класу:
 
Метод onRemoveCallback викликається кожного разу коли елемент кешу вичерпується. У цьому методі можна описувати роботу яку ми хочемо виконувати як незалежний від роботи користувача процес.
Як ж реєструвати колбек кешу? Реєструємо елемент кешу у методі Application_Start, вказуючи період, в секундах, через який кеш має бути переглянута.
  
  	Запис до кешу є фіктивним, тобто, по суті,   ніяка інформація в кеш не заноситься. Все що нам потрідно, це здійснити колбек. Вже всередині колбеку можна здійснювати всі неодхідіні роботи.
  
   	В методі DoWork() реалізуємо все, що нам потрібно. Для чого ж метод HitPage()? Коли час для кешу вйшов, ми виконаємо завдання яке нам потрібно і процес зупинеться. Для того, щоб внести дані в кеш знову нам і потрібен метод HitPage(). Цей метод реалізує виклик пустої сторінки:
  
Кожного разу, коли викликається пуста сторінка, виконується метод Application_BeginRequest. Виклик всіх інших сторінок ігнорується. Отже, при запуску пустої сторінки додається новий елемент у кеш:
   	Таким чином, поки аплікація запущена, відбувається безперервний процес занесення елемента у кеш, та його видалення. І відповідно безперервно запускається метод виконання робіт, які нам потрібно, при видалені елемента з кешу.
  	Що ж відбувається у методі DoWork()? У цьому методі викликається метод класу IndexData, в якому і відбувається процесс індексування даних.
Процес індексування даних у Iudico відбувається у 2 етапи. На першому етапі відбувається видалення старих .xml файлів, в яких записана інформація про теми Iudico, та запис нових, на другому – видалення індексу Solr та запис нового.
  Що це за xml. файли?  Solr індесує дані у вигляді XML. Для того, щоб проіндексувати дані, потрібно сформувати .xml файли, які містьть інформацію про теми. В кожому .xml файлі є інформація про id курсу, назву теми та сам текст теми. Ці .xml файли, власне, Solr і буде індексувати. Кожен файл має наступну структуру:
<add>
<doc>
<field name="id">...</field>
<field name="name">...</field>
<field name="content">...</field>
</doc>
</add>
 	 Отже, спершу видаляємо всі .xml файли, які були створені  при попередньому індексуванні:
  
  	 Далі записуємо нові файли наступним чином. Отримавши дані з таблички TblResource з БД, формуємо .xml в тому форматі, в якому нам потрібно, використавуючи XmlTextWriter. Див. додаток [1] Запис XML файлів для індесування.
  	 На другому етапі працюємо з індексом Solr. Видалення попереднього відбувається через надсилання запиту по http-протоколу. Ну і звісно ж пісял цього потрібно закомітати зміни:
 
 	 Індексування .xml файлів відбувається також надсиланням запиту по http-протоколу методом Post. Див. додаток [2] Індексування XML файлів .
  	 Таким чином, раз у 24 години онвляється індекс у Solr. Індекс зберігається на стороні пошукового сервера, так як пошук здійснюється сервером, повертати індекс Iudico просто не потрібно.


5.2	Пошук за ключовим словом

Для пошуку у Iudico додана окрема сторінка – SearchPageSolr. Згідно архітектури Iudico кожна сторінка повинна мати свого контролера. Для SearchPageSolr додано SearchPageSolrController, який займається обробкою подій сторінки пошуку. 
Отже, при запуску пошукової сторінки, користувач бачить поле, для вводу пошукового слова та кнопку Search.
Коли користувач вводить пошукове слово і натискає кнопку Search, контролер відправляє http запит пошуковому серверу Solr. Як відповідь контролер отримує .xml файл, який містить інформацію про параметри пошуку, кількість знайдених документів та інформацію, яка була проіндексована нами через .xml файли. 
 	 Отже, як відбувається відправлення ключового слова та обробка відповіді Solr?  Взаємодія Iudico-Solr,  як завжди відбувається через надсилання http запиту, ключове слово передається у параметрах. Тобто запит виглядає так: ”http://localhost:8080/apache-solr-1.4.0/select?q=" + SearchQuery1.Text + "&fl=*%2Cscore", де SearchQuery1.Text ключове слово, введене користувачем. Відповідь обробляється за допомогою XmlDocument. 
   	Так як знайдені документи знаходяться у тегу result, система доступається до цього тегу і працює окремо з кожним докумнтом. В середині тега doc аплікація доступається до полів: id курсу, назва теми та текст теми. Це ті поля, які аплікація заисувала при індексуванні. 
 	 Далі маючи id курсу система дастіє з таблички TblCourses Description теми, з таблички TblCurriculums дістає назву навчального плану в якій міститься поточна тема, та з відповіді пошукового сервера система отримує значення score, що показує співідношення всього об'єму інформації до об'єму знайдених слів. Ці всі значення виводяться як додаткова інформація до назви теми.
  	Отримавши результати, користувач може відкрити будь-яку з знайдених тем. Для перегляду лекції чи проходження тесту використано вже існуючи контрол для відкривання теми.
  	Система також проводить фільтрацію виведення результатів для різних ролей аплікації. Коистувач, маючи роль студента, прикріплений до певної групи. Коли відбувається додавання теми у систему, вон атакож закріплюється за певною групою. Отже, студентможе бачити лише ті теми, які прикріплені до його групи. Адміністратор і лектор можуть здійснювати пошук по всьому контенту


Опис архітектури пошукової частини Iudico

Пошукова система поширує свою функціональність на всі ролі користувачім навчальної програми Iudico:  адміністратор, лектор, студент.  Користувачі адміністратор та лектор мають доступ до всіх можливостей пошукової системи – це пошук за заданим ключовим словом, перегляд знайдених лекції, проходження знайдених тестів. Роль студента має дотуп до пошуку за заданим ключем, переглядати доступні лекції, та проходити доступні тести, які були знайдені за заданим ключовим словом. 
Спершу клієнт вводить ключове слово, яке Iudico даді передає пошуковому серверу Solr. Solr здійснює пошук у попередньо згенерованому індексі. Далі Solr відправляє респонс у вигляді XML назад Iudico. Iudico  в свою чергу робить запит до бази даних, для перевірки виведення результатів відповідно до залогованої ролі і також для отримання додаткової інформації про курс. Далі Iudico виводить результати на сторінку.
 

Системні вимоги для запуску Solr

Пошукова система Solr запускається на базі сервлета Tomcat. Для його запуску потрібно, щоб у компютері була збережена папка tomcat. Цю папку можна скачати за адрусою (http://tomcat.apache.org/download-55.cgi). Також необхідно, щоб була збережена папка solr, яку можна скачати за адресою (http://www.apache.org/dyn/closer.cgi/lucene/solr).
При інсталюванні Iudico ці папки автоматично запишуться у системну папку Iudico, називається вона tomcat-solr, тобто скачувати вже нічого неотрібно.
У загальному випадку для запуску Tomcat повинні бути оголошені 2 системні змінні: Catalina_Home та Java_Home. Шлях до Catalina_Home прописують шлях до tomcat папки, а шлях до Java_Home – шлях до jdk файлу, який має бути на компютері. Після цього для запуска tomcat потрідно запустити startup.bat файл, що знаходиться у папці tomcat на базі solr.
При запуску аплікації створюється файл tomcatStart.bat у папці tomcat-solr, у якому прописуються 2 системні змінні, Catalina_Home та Java_Home, та запуск startup.bat. І при запуску аплікації цей файл зразу і виконується, після чого запускається Tomcat та Solr. Текст файлу tomcatStart.bat виглядає наступним чином:
set CATALINA_HOME = <Path to Site>\Site\tomcat-solr\apache-tomcat-5.5.28
set JAVA_HOME = C:\Program Files\Java\jdk1.6.0
cd <Path to Site>\Site\tomcat-solr\solr
<Path to Site>\Site\tomcat-solr\apache-tomcat-5.5.28\bin\startup.bat
 	 Системні вимоги для запуску Solr:
•	на машині повинен бути файл jdk1.6.0 у папці C:\Program Files\Java\jdk1.6.0
Запис системних змінних та запуск Solr відбудеться автоматично при запуску аплікації.


